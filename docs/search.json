[{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with ScIsoX","text":"ScIsoX comprehensive R package analysing transcriptomic complexity single-cell resolution using isoform-level expression data. vignette guide basic workflow ScIsoX, data import initial complexity analysis.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Getting Started with ScIsoX","text":"","code":"# Install from GitHub devtools::install_github(\"ThaddeusWu/ScIsoX\")  # Load the package library(ScIsoX) library(ScIsoX)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"understanding-the-data-structure","dir":"Articles","previous_headings":"","what":"Understanding the Data Structure","title":"Getting Started with ScIsoX","text":"ScIsoX works four main data inputs: Gene counts matrix: Gene-level expression (genes × cells) Transcript counts matrix: Isoform-level expression (transcripts × cells) Transcript information: Mapping transcripts genes Cell type annotation: Cell type information","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"loading-example-data","dir":"Articles","previous_headings":"Understanding the Data Structure","what":"Loading Example Data","title":"Getting Started with ScIsoX","text":"ScIsoX comes example data blood cells:","code":"# Load example datasets data(gene_counts_blood) data(transcript_counts_blood) data(transcript_info) data(sample2stage)  # Examine data dimensions cat(\"Gene counts:\", dim(gene_counts_blood), \"\\n\") #> Gene counts: 55487 205 cat(\"Transcript counts:\", dim(transcript_counts_blood), \"\\n\") #> Transcript counts: 142238 205 cat(\"Transcript info:\", dim(transcript_info), \"\\n\") #> Transcript info: 278305 6 cat(\"Cell info:\", dim(sample2stage), \"\\n\") #> Cell info: 203 2"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"data-format-requirements","dir":"Articles","previous_headings":"Understanding the Data Structure","what":"Data Format Requirements","title":"Getting Started with ScIsoX","text":"","code":"# Gene counts format gene_counts_blood[1:5, 1:3] #>                    AEC-1-AEC-1-1_FKDL202561884-1a-1 #> ENSMUSG00000000001                                2 #> ENSMUSG00000000003                                0 #> ENSMUSG00000000028                                0 #> ENSMUSG00000000031                             6242 #> ENSMUSG00000000037                                0 #>                    AEC-1-AEC-1-2_FKDL202561884-1a-2 #> ENSMUSG00000000001                                0 #> ENSMUSG00000000003                                0 #> ENSMUSG00000000028                               13 #> ENSMUSG00000000031                            13584 #> ENSMUSG00000000037                                0 #>                    AEC-1-AEC-1-3_FKDL202561884-1a-3 #> ENSMUSG00000000001                               10 #> ENSMUSG00000000003                                0 #> ENSMUSG00000000028                                0 #> ENSMUSG00000000031                             3790 #> ENSMUSG00000000037                                0  # Transcript counts format transcript_counts_blood[1:5, 1:3] #>                    AEC-1-AEC-1-1_FKDL202561884-1a-1 #> ENSMUST00000193812                                0 #> ENSMUST00000082908                                0 #> ENSMUST00000162897                                0 #> ENSMUST00000159265                                0 #> ENSMUST00000070533                                0 #>                    AEC-1-AEC-1-2_FKDL202561884-1a-2 #> ENSMUST00000193812                                0 #> ENSMUST00000082908                                0 #> ENSMUST00000162897                                0 #> ENSMUST00000159265                                0 #> ENSMUST00000070533                                0 #>                    AEC-1-AEC-1-3_FKDL202561884-1a-3 #> ENSMUST00000193812                                0 #> ENSMUST00000082908                                0 #> ENSMUST00000162897                                0 #> ENSMUST00000159265                                0 #> ENSMUST00000070533                                0  # Transcript info format head(transcript_info, 3) #>                         transcript_id   transcript_name            gene_id #> ENSMUST00000193812 ENSMUST00000193812 4933401J01Rik-201 ENSMUSG00000102693 #> ENSMUST00000082908 ENSMUST00000082908       Gm26206-201 ENSMUSG00000064842 #> ENSMUST00000162897 ENSMUST00000162897          Xkr4-203 ENSMUSG00000051951 #>                        gene_name                transcript_type      gene_type #> ENSMUST00000193812 4933401J01Rik                            TEC            TEC #> ENSMUST00000082908       Gm26206                          snRNA          snRNA #> ENSMUST00000162897          Xkr4 protein_coding_CDS_not_defined protein_coding  # Cell info format (optional but recommended) head(sample2stage, 3) #>                             sample cell_type #> 1 AEC-1-AEC-1-1_FKDL202561884-1a-1       AEC #> 2 AEC-1-AEC-1-2_FKDL202561884-1a-2       AEC #> 3 AEC-1-AEC-1-3_FKDL202561884-1a-3       AEC"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"quality-control","dir":"Articles","previous_headings":"","what":"Quality Control","title":"Getting Started with ScIsoX","text":"creating SCHT structure, ’s important perform quality control:","code":"# Visualise genes per cell distribution qc_plot <- plot_genes_per_cell_distribution(   gene_counts_blood,   plot_type = \"hist\",   return_suggestions = TRUE ) # Get automated QC recommendations qc_recommendations <- recommend_qc_parameters(gene_counts_blood)  # View different QC strategies print(\"Conservative (MAD) strategy:\") #> [1] \"Conservative (MAD) strategy:\" print(qc_recommendations$MAD_strategy) #> $min_genes_per_cell #> [1] 980 #>  #> $max_genes_per_cell #> [1] 13756  print(\"\\nModerate (90% interval) strategy:\") #> [1] \"\\nModerate (90% interval) strategy:\" print(qc_recommendations$Interval_90) #> $min_genes_per_cell #> [1] 4106 #>  #> $max_genes_per_cell #> [1] 10648"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"creating-the-scht-object","dir":"Articles","previous_headings":"","what":"Creating the SCHT Object","title":"Getting Started with ScIsoX","text":"Single-Cell Hierarchical Tensor (SCHT) core data structure ScIsoX:","code":"# Create SCHT with recommended parameters scht_obj <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   qc_params = list(     min_genes_per_cell = 4000,     max_genes_per_cell = 10000,     min_cells_expressing = 0.02,     min_expr = 1e-6   ),   n_hvg = 3000,   verbose = TRUE ) #> Matrix format after log transform: #>    class(gene_mat) = dgCMatrix  #>    dim(gene_mat)   = 17881, 181  #>    class(transcript_mat) = dgCMatrix  #>    dim(transcript_mat)   = 142238, 181 #>  #> === Sparsity Analysis for Current Dataset === #>  #> 1. Original Transcript Matrix: #>   Number of genes: 55,487 #>   Number of isoforms: 142,238 #>   Number of cells: 205 #>   Non-zero elements: 2,457,789 #>   Zero elements: 26,701,001 #>   Total elements: 29,158,790 #>   Sparsity: 91.57% #>  #> 2. Filtered Transcript Matrix (Post-QC HVG): #>   Number of genes: 1,936 #>   Number of isoforms: 7,327 #>   Number of cells: 181 #>   Non-zero elements: 73,057 #>   Zero elements: 1,253,130 #>   Total elements: 1,326,187 #>   Sparsity: 94.49% #>  #> 3. SCHT Structure (Post-QC HVG): #>   Non-zero elements: 73,057 #>   Zero elements: 154,780 #>   Total elements: 227,837 #>   Sparsity: 67.93% #>  #> 4. Naive 3D Tensor (Post-QC HVG): #>   Required dimensions: 1,936 x 21 x 181 #>   Non-zero elements: 73,057 #>   Zero elements: 7,285,679 #>   Total elements: 7,358,736 #>   Sparsity: 99.01% #>  #> 5. Zero Elements Avoided by SCHT: #>   vs Original Matrix: 26,546,221 #>   vs Filtered Matrix: 1,098,350 #>   vs Naive 3D Tensor: 7,130,899 #>  #> 6. Memory Efficiency Summary: #>   SCHT uses only 0.78% of original matrix size #>   SCHT uses only 17.18% of filtered matrix size #>   SCHT uses only 3.10% of naive tensor size  # View SCHT structure print(scht_obj) #> Integrated SCHT Object #> ===================== #>  #> Original SCHT: #> Single-Cell Hierarchical Tensor (SCHT) object #> Number of genes: 1936 #> Number of cells: 181 #> Total number of transcripts: 7327 #> Mean isoforms per gene: 3.78 #> Overall sparsity: 67.9 % #> Matrix storage type: matrix #>  #> Cell type-specific analysis: #> Number of cell types: 7 #> Cell Types: AEC, HEC, T1_pre_HSC, T2_pre_HSC, E12, E14, Adult_HSC  #>  #> Created: 2025-08-01 03:12:35 summary(scht_obj) #> Integrated SCHT Summary #> ====================== #>  #> Original SCHT Summary: #> ---------------------- #> SCHT Object Summary: #> -------------------- #>   Cells: 181 #>   Genes: 1936 #>   Total transcripts: 7327 #>   Mean isoforms: 3.78 #>  #> Preprocessing Info: #>   HVGs selected: 3000 #>   QC-filtered genes: 37606 #>   QC-filtered transcripts: 0 #>   QC-filtered cells: 24 #>  #> Data characteristics: #>   Sparsity: 67.9% #>   Created: 2025-08-01 03:12:31 #>  #> Cell type-specific Summary: #> ---------------------- #>    cell_type n_genes n_cells #> 1        AEC    1385      18 #> 2        HEC    1383      24 #> 3 T1_pre_HSC    1638      26 #> 4 T2_pre_HSC    1531      38 #> 5        E12    1361      21 #> 6        E14    1262      32 #> 7  Adult_HSC    1346      44 #>  #> Performance metrics: #>   Total processing time: 31.91 seconds (0.53 minutes) #>   Memory utilised: 183.40 MB #>  #> Note: The actual number of cells for each gene may vary from the shown n_cells, #> as cells with no expression for specific genes are removed from their respective matrices. #> This cell-wise filtering is performed independently for each gene to maintain data quality #> and avoid spurious zero expressions in the cell type-specific analyses."},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"calculating-complexity-metrics","dir":"Articles","previous_headings":"","what":"Calculating Complexity Metrics","title":"Getting Started with ScIsoX","text":"ScIsoX calculates seven core metrics quantify transcriptomic complexity:","code":"# Calculate all complexity metrics tc_results <- calculate_isoform_complexity_metrics(   scht_obj,    verbose = TRUE )  # View results structure print(tc_results) #> Isoform Complexity Analysis Result #> ================================= #>  #> Total genes analysed: 1936 #> Classification thresholds determined by: data-driven modelling #>  #> Top complexity classes: #>   1. Low Diversity + Low Specificity: 1024 genes (52.9%) #>   2. High Diversity + High Specificity: 319 genes (16.5%) #>   3. Low Diversity + High Specificity: 317 genes (16.4%) #>   4. High Diversity + Low Specificity: 276 genes (14.3%) #>  #> Call summary() for detailed statistics  # Summary statistics summary(tc_results) #> Isoform Complexity Analysis Summary: #> Total genes analysed: 1936 #>  #> NA Value Statistics (representing biologically meaningful cases): #>   - Intra-cellular Isoform Diversity   :    0 genes (0.0%) - Occurs when genes have only one expressed isoform, indicating lack of alternative splicing #>   - Inter-cellular Isoform Diversity   :    0 genes (0.0%) - Occurs when only one isoform is expressed across the entire cell population #>   - Intra-cell-type Heterogeneity      :  163 genes (8.4%) - Occurs when a cell type has insufficient cells expressing the gene (< 3 cells) #>   - Inter-cell-type Specificity        :    0 genes (0.0%) - Occurs for genes expressed in only a single cell type (high cell type-specificity) #>   - Intra-cell-type Heterogeneity Variability:  492 genes (25.4%) - Occurs when a gene is expressed in fewer than 2 cell types with sufficient data #>   - Inter-cell-type Difference Variability:  137 genes (7.1%) - Occurs when there are insufficient pairwise differences between cell types to calculate variability #>   - Cell-type-specific Co-expression Variability:  184 genes (9.5%) - Occurs when a gene lacks sufficient cell type-specific expression data to compare co-expression patterns #>  #> Classification Distribution Across Complexity Dimensions: #>  #> Intra-cellular Isoform Diversity: #>   - Strong Isoform Co-expression            :  704 genes (36.4%) #>   - Weak Isoform Co-expression              : 1232 genes (63.6%) #>  #> Inter-cellular Isoform Diversity: #>   - High Isoform Diversity                  :  595 genes (30.7%) #>   - Low Isoform Diversity                   : 1341 genes (69.3%) #>  #> Intra-cell-type Heterogeneity: #>   - High Cellular Heterogeneity             :  819 genes (42.3%) #>   - Low Cellular Heterogeneity              :  954 genes (49.3%) #>   - Unclassified                            :  163 genes (8.4%) #>  #> Inter-cell-type Specificity: #>   - Cell-Type-Independent Isoform Expression: 1300 genes (67.1%) #>   - Cell-Type-Specific Isoform Expression   :  636 genes (32.9%) #>  #> Intra-cell-type Heterogeneity Variability: #>   - Consistent Heterogeneity Across Cell Types:  892 genes (46.1%) #>   - Insufficient Cell Type Data             :  492 genes (25.4%) #>   - Variable Heterogeneity Across Cell Types:  552 genes (28.5%) #>  #> Inter-cell-type Difference Variability: #>   - High Cell-Type Distinctions             :  943 genes (48.7%) #>   - Insufficient Difference Data            :  137 genes (7.1%) #>   - Low Cell-Type Distinctions              :  856 genes (44.2%) #>  #> Cell-type-specific Co-expression Variability: #>   - Cell-Type-Adaptive Co-expression        :  596 genes (30.8%) #>   - Cell-Type-Consistent Co-expression      : 1156 genes (59.7%) #>   - Insufficient Data                       :  184 genes (9.5%) #>  #> Traditional Complexity Categories: #>   - High Diversity + High Specificity       :  319 genes (16.5%) #>   - High Diversity + Low Specificity        :  276 genes (14.3%) #>   - Low Diversity + High Specificity        :  317 genes (16.4%) #>   - Low Diversity + Low Specificity         : 1024 genes (52.9%) #>  #> Cell-Type-Specific Genes: #>   - Single cell-type genes                  :   23 genes (1.2%) #>  #> Core Metrics Statistics: #>  #>  #> |Metric                                       |  Mean| Median|    SD|  Min|   Max| Threshold| NA_Percent| #> |:--------------------------------------------|-----:|------:|-----:|----:|-----:|---------:|----------:| #> |Intra-cellular Isoform Diversity             | 0.351|  0.321| 0.270| 0.00| 0.991|     0.456|      0.000| #> |Inter-cellular Isoform Diversity             | 0.591|  0.630| 0.257| 0.01| 1.000|     0.758|      0.000| #> |Intra-cell-type Heterogeneity                | 0.363|  0.367| 0.230| 0.00| 1.000|     0.389|      8.419| #> |Inter-cell-type Specificity                  | 0.401|  0.382| 0.230| 0.00| 1.000|     0.497|      0.000| #> |Intra-cell-type Heterogeneity Variability    | 0.770|  0.620| 0.625| 0.00| 2.646|     0.832|     25.413| #> |Inter-cell-type Difference Variability       | 0.646|  0.567| 0.342| 0.00| 1.620|     0.552|      7.076| #> |Cell-type-specific Co-expression Variability | 1.032|  0.972| 0.702| 0.00| 2.646|     1.389|      9.504| #>  #> Performance metrics: #>   Processing time: 83.82 seconds (1.40 minutes) #>   Memory utilised: 975.63 MB"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"basic-visualisation","dir":"Articles","previous_headings":"","what":"Basic Visualisation","title":"Getting Started with ScIsoX","text":"Visualise complexity landscape:","code":"# Create complexity landscape plot plot_tc_landscape(   tc_results,   n_label = 10 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"finding-genes-of-interest","dir":"Articles","previous_headings":"","what":"Finding Genes of Interest","title":"Getting Started with ScIsoX","text":"Identify genes specific complexity patterns:","code":"# Find highly complex genes complex_genes <- tc_results$metrics[   tc_results$metrics$intra_cellular_isoform_diversity_class == \"Strong Isoform Co-expression\" &   tc_results$metrics$inter_cellular_isoform_diversity_class == \"High Isoform Diversity\", ]  print(paste(\"Found\", nrow(complex_genes), \"highly complex genes\")) #> [1] \"Found 384 highly complex genes\" head(complex_genes[, c(\"gene\", \"n_isoforms\",                         \"intra_cellular_isoform_diversity\",                        \"inter_cellular_isoform_diversity\")]) #>            gene n_isoforms intra_cellular_isoform_diversity #> Cd177     Cd177          2                        0.8339576 #> S100a8   S100a8          2                        0.7979806 #> S100a9   S100a9          2                        0.7408728 #> Il7         Il7          4                        0.7749878 #> Nup62cl Nup62cl          2                        0.8197578 #> Crb3       Crb3          4                        0.6215834 #>         inter_cellular_isoform_diversity #> Cd177                          0.9015444 #> S100a8                         0.9042768 #> S100a9                         0.9078688 #> Il7                            0.8055326 #> Nup62cl                        0.9041507 #> Crb3                           0.9335333  # Find genes with cell type-specific patterns ct_specific <- select_genes_of_interest(     tc_results$metrics,     category = \"Cell-Type-Specific Isoform Expression\",     top_n = 10 ) print(ct_specific) #>  [1] \"Cd177\"    \"S100a8\"   \"S100a9\"   \"Shtn1\"    \"Ceacam10\" \"Oas3\"     #>  [7] \"Il7\"      \"Nup62cl\"  \"Cideb\"    \"Ctss\""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Getting Started with ScIsoX","text":"vignette covered basic workflow ScIsoX. advanced analyses, see: Data Import QC: Detailed quality control strategies Complexity Metrics: -depth explanation seven metrics Visualisation Gallery: 13+ visualisation functions Co-expression Analysis: Isoform relationships switching","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-01-getting-started.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Getting Started with ScIsoX","text":"","code":"sessionInfo() #> R version 4.4.3 (2025-02-28) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sequoia 15.5 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Australia/Brisbane #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ScIsoX_1.1.1 #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-9                gridExtra_2.3               #>   [3] rlang_1.1.6                 magrittr_2.0.3              #>   [5] clue_0.3-66                 GetoptLong_1.0.5            #>   [7] ggridges_0.5.6              matrixStats_1.5.0           #>   [9] compiler_4.4.3              png_0.1-8                   #>  [11] systemfonts_1.2.1           vctrs_0.6.5                 #>  [13] pkgconfig_2.0.3             shape_1.4.6.1               #>  [15] crayon_1.5.3                fastmap_1.2.0               #>  [17] XVector_0.46.0              labeling_0.4.3              #>  [19] promises_1.3.3              Rsamtools_2.22.0            #>  [21] rmarkdown_2.29              UCSC.utils_1.2.0            #>  [23] ragg_1.4.0                  purrr_1.1.0                 #>  [25] xfun_0.52                   zlibbioc_1.52.0             #>  [27] cachem_1.1.0                GenomeInfoDb_1.42.3         #>  [29] jsonlite_2.0.0              progress_1.2.3              #>  [31] later_1.4.2                 DelayedArray_0.32.0         #>  [33] BiocParallel_1.40.0         parallel_4.4.3              #>  [35] prettyunits_1.2.0           cluster_2.1.8.1             #>  [37] R6_2.6.1                    bslib_0.9.0                 #>  [39] RColorBrewer_1.1-3          rtracklayer_1.66.0          #>  [41] car_3.1-3                   GenomicRanges_1.58.0        #>  [43] jquerylib_0.1.4             diptest_0.77-1              #>  [45] Rcpp_1.1.0                  SummarizedExperiment_1.36.0 #>  [47] iterators_1.0.14            knitr_1.50                  #>  [49] IRanges_2.40.1              httpuv_1.6.16               #>  [51] Matrix_1.7-3                tidyselect_1.2.1            #>  [53] viridis_0.6.5               rstudioapi_0.17.1           #>  [55] abind_1.4-8                 yaml_2.3.10                 #>  [57] miniUI_0.1.1.1              doParallel_1.0.17           #>  [59] codetools_0.2-20            curl_6.4.0                  #>  [61] lattice_0.22-6              tibble_3.3.0                #>  [63] plyr_1.8.9                  withr_3.0.2                 #>  [65] shiny_1.11.1                Biobase_2.66.0              #>  [67] evaluate_1.0.4              moments_0.14.1              #>  [69] desc_1.4.3                  circlize_0.4.16             #>  [71] mclust_6.1.1                Biostrings_2.74.1           #>  [73] pillar_1.11.0               MatrixGenerics_1.18.1       #>  [75] carData_3.0-5               DT_0.33                     #>  [77] foreach_1.5.2               stats4_4.4.3                #>  [79] plotly_4.11.0               generics_0.1.4              #>  [81] RCurl_1.98-1.16             S4Vectors_0.44.0            #>  [83] hms_1.1.3                   ggplot2_3.5.2               #>  [85] scales_1.4.0                xtable_1.8-4                #>  [87] glue_1.8.0                  lazyeval_0.2.2              #>  [89] tools_4.4.3                 BiocIO_1.16.0               #>  [91] data.table_1.17.8           ggradar_0.2                 #>  [93] GenomicAlignments_1.42.0    fs_1.6.6                    #>  [95] XML_3.99-0.18               cowplot_1.2.0               #>  [97] grid_4.4.3                  tidyr_1.3.1                 #>  [99] colorspace_2.1-1            patchwork_1.3.0             #> [101] GenomeInfoDbData_1.2.13     restfulr_0.0.15             #> [103] Formula_1.2-5               cli_3.6.5                   #> [105] textshaping_1.0.0           S4Arrays_1.6.0              #> [107] viridisLite_0.4.2           ComplexHeatmap_2.22.0       #> [109] dplyr_1.1.4                 gtable_0.3.6                #> [111] sass_0.4.10                 digest_0.6.37               #> [113] BiocGenerics_0.52.0         ggrepel_0.9.6               #> [115] SparseArray_1.6.2           rjson_0.2.23                #> [117] htmlwidgets_1.6.4           farver_2.1.2                #> [119] htmltools_0.5.8.1           pkgdown_2.1.3               #> [121] lifecycle_1.0.4             httr_1.4.7                  #> [123] mime_0.13                   GlobalOptions_0.1.2         #> [125] ggExtra_0.10.1              MASS_7.3-65"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data Import and Quality Control","text":"vignette covers essential steps importing data performing quality control (QC) ScIsoX. Proper QC crucial obtaining reliable complexity metrics.","code":"library(ScIsoX)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"data-requirements","dir":"Articles","previous_headings":"","what":"Data Requirements","title":"Data Import and Quality Control","text":"ScIsoX requires three main inputs: Gene counts matrix: Gene-level expression (genes × cells) Transcript counts matrix: Isoform-level expression (transcripts × cells) Transcript information: Mapping transcripts genes","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"loading-example-data","dir":"Articles","previous_headings":"Data Requirements","what":"Loading Example Data","title":"Data Import and Quality Control","text":"","code":"# Load example datasets data(gene_counts_blood) data(transcript_counts_blood) data(transcript_info) data(sample2stage)  # Check dimensions cat(\"Gene counts:\", dim(gene_counts_blood), \"\\n\") #> Gene counts: 55487 205 cat(\"Transcript counts:\", dim(transcript_counts_blood), \"\\n\") #> Transcript counts: 142238 205 cat(\"Number of cells with metadata:\", nrow(sample2stage), \"\\n\") #> Number of cells with metadata: 203"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"quality-control-visualisation","dir":"Articles","previous_headings":"","what":"Quality Control Visualisation","title":"Data Import and Quality Control","text":"creating SCHT structure, examine data quality:","code":"# Visualise genes per cell distribution qc_plot <- plot_genes_per_cell_distribution(   gene_counts_blood,   plot_type = \"hist\",   return_suggestions = TRUE ) # The plot shows distribution and suggests thresholds print(qc_plot$suggestions) #> NULL"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"automated-qc-recommendations","dir":"Articles","previous_headings":"","what":"Automated QC Recommendations","title":"Data Import and Quality Control","text":"ScIsoX can automatically recommend QC parameters based data:","code":"# Get automated recommendations qc_rec <- recommend_qc_parameters(gene_counts_blood) # View different strategies cat(\"=== Conservative Strategy (MAD-based) ===\\n\") #> === Conservative Strategy (MAD-based) === print(qc_rec$MAD_strategy) #> $min_genes_per_cell #> [1] 980 #>  #> $max_genes_per_cell #> [1] 13756  cat(\"\\n=== Moderate Strategy (90% interval) ===\\n\") #>  #> === Moderate Strategy (90% interval) === print(qc_rec$Interval_90) #> $min_genes_per_cell #> [1] 4106 #>  #> $max_genes_per_cell #> [1] 10648  cat(\"\\n=== Lenient Strategy (80% interval) ===\\n\") #>  #> === Lenient Strategy (80% interval) === print(qc_rec$Interval_80) #> $min_genes_per_cell #> [1] 4474 #>  #> $max_genes_per_cell #> [1] 9663"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"creating-transcript-information","dir":"Articles","previous_headings":"","what":"Creating Transcript Information","title":"Data Import and Quality Control","text":"need generate transcript information GTF file:","code":"# Create transcript info from GTF transcript_info <- create_transcript_info(   gtf_file = \"path/to/annotation.gtf\",   remove_version = TRUE )  # View the structure head(transcript_info)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"generating-gene-counts","dir":"Articles","previous_headings":"","what":"Generating Gene Counts","title":"Data Import and Quality Control","text":"transcript counts, can generate gene counts:","code":"# Generate gene counts from transcript counts # Note: Row names must be in GeneName-TranscriptID format gene_counts_generated <- generate_gene_counts(transcript_counts_blood)  # Compare with original cat(\"Generated genes:\", nrow(gene_counts_generated$gene_counts), \"\\n\") #> Generated genes: 142238 cat(\"Original genes:\", nrow(gene_counts_blood), \"\\n\") #> Original genes: 55487"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"creating-the-scht-object","dir":"Articles","previous_headings":"","what":"Creating the SCHT Object","title":"Data Import and Quality Control","text":"QC parameters selected, create SCHT structure:","code":"# Use moderate QC strategy qc_params <- qc_rec$Interval_90 qc_params$min_cells_expressing <- 0.02 qc_params$min_expr <- 1e-6  # Create SCHT scht_obj <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   qc_params = qc_params,   n_hvg = 3000,   verbose = TRUE ) #> Matrix format after log transform: #>    class(gene_mat) = dgCMatrix  #>    dim(gene_mat)   = 17881, 183  #>    class(transcript_mat) = dgCMatrix  #>    dim(transcript_mat)   = 142238, 183 #>  #> === Sparsity Analysis for Current Dataset === #>  #> 1. Original Transcript Matrix: #>   Number of genes: 55,487 #>   Number of isoforms: 142,238 #>   Number of cells: 205 #>   Non-zero elements: 2,457,789 #>   Zero elements: 26,701,001 #>   Total elements: 29,158,790 #>   Sparsity: 91.57% #>  #> 2. Filtered Transcript Matrix (Post-QC HVG): #>   Number of genes: 1,938 #>   Number of isoforms: 7,380 #>   Number of cells: 183 #>   Non-zero elements: 75,064 #>   Zero elements: 1,275,476 #>   Total elements: 1,350,540 #>   Sparsity: 94.44% #>  #> 3. SCHT Structure (Post-QC HVG): #>   Non-zero elements: 75,064 #>   Zero elements: 162,725 #>   Total elements: 237,789 #>   Sparsity: 68.43% #>  #> 4. Naive 3D Tensor (Post-QC HVG): #>   Required dimensions: 1,938 x 21 x 183 #>   Non-zero elements: 75,064 #>   Zero elements: 7,372,670 #>   Total elements: 7,447,734 #>   Sparsity: 98.99% #>  #> 5. Zero Elements Avoided by SCHT: #>   vs Original Matrix: 26,538,276 #>   vs Filtered Matrix: 1,112,751 #>   vs Naive 3D Tensor: 7,209,945 #>  #> 6. Memory Efficiency Summary: #>   SCHT uses only 0.82% of original matrix size #>   SCHT uses only 17.61% of filtered matrix size #>   SCHT uses only 3.19% of naive tensor size  # View the result summary(scht_obj) #> Integrated SCHT Summary #> ====================== #>  #> Original SCHT Summary: #> ---------------------- #> SCHT Object Summary: #> -------------------- #>   Cells: 183 #>   Genes: 1938 #>   Total transcripts: 7380 #>   Mean isoforms: 3.81 #>  #> Preprocessing Info: #>   HVGs selected: 3000 #>   QC-filtered genes: 37606 #>   QC-filtered transcripts: 0 #>   QC-filtered cells: 22 #>  #> Data characteristics: #>   Sparsity: 68.4% #>   Created: 2025-08-01 03:14:43 #>  #> Cell type-specific Summary: #> ---------------------- #>    cell_type n_genes n_cells #> 1        AEC    1388      18 #> 2        HEC    1548      24 #> 3 T1_pre_HSC    1676      26 #> 4 T2_pre_HSC    1568      38 #> 5        E12    1359      21 #> 6        E14    1263      32 #> 7  Adult_HSC    1267      44 #>  #> Performance metrics: #>   Total processing time: 35.41 seconds (0.59 minutes) #>   Memory utilised: 237.00 MB #>  #> Note: The actual number of cells for each gene may vary from the shown n_cells, #> as cells with no expression for specific genes are removed from their respective matrices. #> This cell-wise filtering is performed independently for each gene to maintain data quality #> and avoid spurious zero expressions in the cell type-specific analyses."},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"generating-qc-report","dir":"Articles","previous_headings":"","what":"Generating QC Report","title":"Data Import and Quality Control","text":"comprehensive QC analysis, generate HTML report:","code":"# Generate detailed QC report generate_qc_report(   gene_counts = gene_counts_blood,   output_file = \"qc_report.html\",   dataset_name = \"Blood Cells Analysis\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Data Import and Quality Control","text":"Always visualise data setting QC parameters Start automated recommendations adjust based experimental design Deep sequencing: Higher gene count thresholds Shallow sequencing: Lower thresholds Document QC choices reproducibility","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Data Import and Quality Control","text":"QC SCHT creation, ’re ready : - Calculate complexity metrics (see “Complexity Metrics” vignette) - Explore visualisations (see “Visualisation Gallery” vignette) - Perform co-expression analysis (see “Co-expression Analysis” vignette)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-02-data-import-qc.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Data Import and Quality Control","text":"","code":"sessionInfo() #> R version 4.4.3 (2025-02-28) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sequoia 15.5 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Australia/Brisbane #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ScIsoX_1.1.1 #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-9                gridExtra_2.3               #>   [3] rlang_1.1.6                 magrittr_2.0.3              #>   [5] clue_0.3-66                 GetoptLong_1.0.5            #>   [7] ggridges_0.5.6              matrixStats_1.5.0           #>   [9] compiler_4.4.3              png_0.1-8                   #>  [11] systemfonts_1.2.1           vctrs_0.6.5                 #>  [13] pkgconfig_2.0.3             shape_1.4.6.1               #>  [15] crayon_1.5.3                fastmap_1.2.0               #>  [17] XVector_0.46.0              promises_1.3.3              #>  [19] Rsamtools_2.22.0            rmarkdown_2.29              #>  [21] UCSC.utils_1.2.0            ragg_1.4.0                  #>  [23] purrr_1.1.0                 xfun_0.52                   #>  [25] zlibbioc_1.52.0             cachem_1.1.0                #>  [27] GenomeInfoDb_1.42.3         jsonlite_2.0.0              #>  [29] progress_1.2.3              later_1.4.2                 #>  [31] DelayedArray_0.32.0         BiocParallel_1.40.0         #>  [33] parallel_4.4.3              prettyunits_1.2.0           #>  [35] cluster_2.1.8.1             R6_2.6.1                    #>  [37] bslib_0.9.0                 RColorBrewer_1.1-3          #>  [39] rtracklayer_1.66.0          car_3.1-3                   #>  [41] GenomicRanges_1.58.0        jquerylib_0.1.4             #>  [43] diptest_0.77-1              Rcpp_1.1.0                  #>  [45] SummarizedExperiment_1.36.0 iterators_1.0.14            #>  [47] knitr_1.50                  IRanges_2.40.1              #>  [49] httpuv_1.6.16               Matrix_1.7-3                #>  [51] tidyselect_1.2.1            viridis_0.6.5               #>  [53] rstudioapi_0.17.1           abind_1.4-8                 #>  [55] yaml_2.3.10                 miniUI_0.1.1.1              #>  [57] doParallel_1.0.17           codetools_0.2-20            #>  [59] curl_6.4.0                  lattice_0.22-6              #>  [61] tibble_3.3.0                plyr_1.8.9                  #>  [63] shiny_1.11.1                Biobase_2.66.0              #>  [65] evaluate_1.0.4              moments_0.14.1              #>  [67] desc_1.4.3                  circlize_0.4.16             #>  [69] mclust_6.1.1                Biostrings_2.74.1           #>  [71] pillar_1.11.0               MatrixGenerics_1.18.1       #>  [73] carData_3.0-5               DT_0.33                     #>  [75] foreach_1.5.2               stats4_4.4.3                #>  [77] plotly_4.11.0               generics_0.1.4              #>  [79] RCurl_1.98-1.16             S4Vectors_0.44.0            #>  [81] hms_1.1.3                   ggplot2_3.5.2               #>  [83] scales_1.4.0                xtable_1.8-4                #>  [85] glue_1.8.0                  lazyeval_0.2.2              #>  [87] tools_4.4.3                 BiocIO_1.16.0               #>  [89] data.table_1.17.8           ggradar_0.2                 #>  [91] GenomicAlignments_1.42.0    fs_1.6.6                    #>  [93] XML_3.99-0.18               cowplot_1.2.0               #>  [95] grid_4.4.3                  tidyr_1.3.1                 #>  [97] colorspace_2.1-1            patchwork_1.3.0             #>  [99] GenomeInfoDbData_1.2.13     restfulr_0.0.15             #> [101] Formula_1.2-5               cli_3.6.5                   #> [103] textshaping_1.0.0           S4Arrays_1.6.0              #> [105] viridisLite_0.4.2           ComplexHeatmap_2.22.0       #> [107] dplyr_1.1.4                 gtable_0.3.6                #> [109] sass_0.4.10                 digest_0.6.37               #> [111] BiocGenerics_0.52.0         ggrepel_0.9.6               #> [113] SparseArray_1.6.2           rjson_0.2.23                #> [115] htmlwidgets_1.6.4           farver_2.1.2                #> [117] htmltools_0.5.8.1           pkgdown_2.1.3               #> [119] lifecycle_1.0.4             httr_1.4.7                  #> [121] mime_0.13                   GlobalOptions_0.1.2         #> [123] ggExtra_0.10.1              MASS_7.3-65"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Understanding Transcriptomic Complexity Metrics","text":"ScIsoX quantifies transcriptomic complexity seven complementary metrics capture different aspects isoform diversity heterogeneity. vignette provides detailed explanations metric interpret .","code":"library(ScIsoX) library(ggplot2) library(ComplexHeatmap)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"the-seven-core-metrics","dir":"Articles","previous_headings":"","what":"The Seven Core Metrics","title":"Understanding Transcriptomic Complexity Metrics","text":"","code":"# Load example data and create SCHT data(gene_counts_blood) data(transcript_counts_blood) data(transcript_info) data(sample2stage)  scht_obj <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   qc_params = list(     min_genes_per_cell = 4000,     max_genes_per_cell = 10000,     min_cells_expressing = 0.02,     min_expr = 1e-6   ),   n_hvg = 3000,   verbose = FALSE ) #>  #> === Sparsity Analysis for Current Dataset === #>  #> 1. Original Transcript Matrix: #>   Number of genes: 55,487 #>   Number of isoforms: 142,238 #>   Number of cells: 205 #>   Non-zero elements: 2,457,789 #>   Zero elements: 26,701,001 #>   Total elements: 29,158,790 #>   Sparsity: 91.57% #>  #> 2. Filtered Transcript Matrix (Post-QC HVG): #>   Number of genes: 1,936 #>   Number of isoforms: 7,327 #>   Number of cells: 181 #>   Non-zero elements: 73,057 #>   Zero elements: 1,253,130 #>   Total elements: 1,326,187 #>   Sparsity: 94.49% #>  #> 3. SCHT Structure (Post-QC HVG): #>   Non-zero elements: 73,057 #>   Zero elements: 154,780 #>   Total elements: 227,837 #>   Sparsity: 67.93% #>  #> 4. Naive 3D Tensor (Post-QC HVG): #>   Required dimensions: 1,936 x 21 x 181 #>   Non-zero elements: 73,057 #>   Zero elements: 7,285,679 #>   Total elements: 7,358,736 #>   Sparsity: 99.01% #>  #> 5. Zero Elements Avoided by SCHT: #>   vs Original Matrix: 26,546,221 #>   vs Filtered Matrix: 1,098,350 #>   vs Naive 3D Tensor: 7,130,899 #>  #> 6. Memory Efficiency Summary: #>   SCHT uses only 0.78% of original matrix size #>   SCHT uses only 17.18% of filtered matrix size #>   SCHT uses only 3.10% of naive tensor size  # Calculate complexity metrics tc_results <- calculate_isoform_complexity_metrics(scht_obj, verbose = FALSE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"intra-cellular-isoform-diversity","dir":"Articles","previous_headings":"The Seven Core Metrics","what":"1. Intra-cellular Isoform Diversity","title":"Understanding Transcriptomic Complexity Metrics","text":"measures: tendency multiple isoforms gene co-expressed within individual cells. Interpretation: - High values: Multiple isoforms frequently co-expressed cells - Low values: Cells typically express one isoform time","code":"# Visualise distribution hist(tc_results$metrics$intra_cellular_isoform_diversity,      main = \"Intra-cellular Isoform Diversity Distribution\",      xlab = \"Diversity Score\",      col = \"lightblue\",      breaks = 30) # Find genes with highest intra-cellular diversity top_intra <- head(tc_results$metrics[   order(tc_results$metrics$intra_cellular_isoform_diversity, decreasing = TRUE),   c(\"gene\", \"intra_cellular_isoform_diversity\", \"n_isoforms\") ], 10)  print(top_intra) #>                gene intra_cellular_isoform_diversity n_isoforms #> Fsd1l         Fsd1l                        0.9911077          4 #> Mapk13       Mapk13                        0.9817924          7 #> Or51ai2     Or51ai2                        0.9584020          3 #> Ptpro         Ptpro                        0.9530040          3 #> Hsd11b1     Hsd11b1                        0.9393115          3 #> Ifitm6       Ifitm6                        0.9380286          2 #> Ppp1r36dn Ppp1r36dn                        0.9377423          3 #> Tm4sf1       Tm4sf1                        0.9304544          5 #> Msantd1     Msantd1                        0.9273881          3 #> Atp4a         Atp4a                        0.9184838          5"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"inter-cellular-isoform-diversity","dir":"Articles","previous_headings":"The Seven Core Metrics","what":"2. Inter-cellular Isoform Diversity","title":"Understanding Transcriptomic Complexity Metrics","text":"measures: different isoforms distributed across cell population. Interpretation: - High values: Different cells express different isoforms - Low values: cells express similar isoform patterns","code":"# Compare intra vs inter diversity plot(tc_results$metrics$intra_cellular_isoform_diversity,      tc_results$metrics$inter_cellular_isoform_diversity,      xlab = \"Intra-cellular Diversity\",      ylab = \"Inter-cellular Diversity\",      main = \"Intra vs Inter-cellular Diversity\",      pch = 16, col = rgb(0, 0, 1, 0.3))  # Add correlation cor_value <- cor(tc_results$metrics$intra_cellular_isoform_diversity,                  tc_results$metrics$inter_cellular_isoform_diversity,                  use = \"complete.obs\") text(0.8, 0.1, paste(\"r =\", round(cor_value, 3)), col = \"red\")"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"intra-cell-type-heterogeneity","dir":"Articles","previous_headings":"The Seven Core Metrics","what":"3. Intra-cell-type Heterogeneity","title":"Understanding Transcriptomic Complexity Metrics","text":"measures: Cell--cell variation isoform usage within cell type. Interpretation: - High values: Cells type show diverse isoform patterns - Low values: Cells type consistent isoform usage","code":"# This metric requires cell type information if (inherits(scht_obj, \"IntegratedSCHT\")) {   # Visualise by classification   ggplot(tc_results$metrics,           aes(x = intra_cell_type_heterogeneity_class,               fill = intra_cell_type_heterogeneity_class)) +     geom_bar() +     labs(title = \"Distribution of Intra-cell-type Heterogeneity Classes\",          x = \"Heterogeneity Class\", y = \"Number of Genes\") +     theme_minimal() }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"inter-cell-type-specificity","dir":"Articles","previous_headings":"The Seven Core Metrics","what":"4. Inter-cell-type Specificity","title":"Understanding Transcriptomic Complexity Metrics","text":"measures: specific isoform usage patterns particular cell types. Interpretation: - High values: Strong cell type-specific isoform usage - Low values: Similar isoform patterns across cell types","code":"# Find cell type-specific genes if (\"inter_cell_type_specificity\" %in% colnames(tc_results$metrics)) {   ct_specific <- tc_results$metrics[     tc_results$metrics$inter_cell_type_specificity_class == \"Cell-Type-Specific Isoform Expression\",     c(\"gene\", \"inter_cell_type_specificity\")   ]      print(paste(\"Found\", nrow(ct_specific), \"genes with high cell type specificity\"))   head(ct_specific) } #> [1] \"Found 636 genes with high cell type specificity\" #>              gene inter_cell_type_specificity #> Cd177       Cd177                           1 #> S100a8     S100a8                           1 #> S100a9     S100a9                           1 #> Shtn1       Shtn1                           1 #> Ceacam10 Ceacam10                           1 #> Oas3         Oas3                           1"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"intra-cell-type-heterogeneity-variability","dir":"Articles","previous_headings":"The Seven Core Metrics","what":"5. Intra-cell-type Heterogeneity Variability","title":"Understanding Transcriptomic Complexity Metrics","text":"measures: much cell--cell heterogeneity varies across different cell types. Interpretation: - High values: cell types heterogeneous others - Low values: cell types show similar levels heterogeneity","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"inter-cell-type-difference-variability","dir":"Articles","previous_headings":"The Seven Core Metrics","what":"6. Inter-cell-type Difference Variability","title":"Understanding Transcriptomic Complexity Metrics","text":"measures: Identifies pairs cell types distinctive isoform usage patterns. Interpretation: - High values: Large differences cell type pairs - Low values: Uniform differences across cell type pairs","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"cell-type-specific-co-expression-variability","dir":"Articles","previous_headings":"The Seven Core Metrics","what":"7. Cell-type-specific Co-expression Variability","title":"Understanding Transcriptomic Complexity Metrics","text":"measures: isoform co-expression patterns vary across cell types. Interpretation: - High values: Co-expression relationships change cell types - Low values: Consistent co-expression across cell types","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"interpreting-metric-classifications","dir":"Articles","previous_headings":"","what":"Interpreting Metric Classifications","title":"Understanding Transcriptomic Complexity Metrics","text":"","code":"# Summary of classifications classification_summary <- lapply(   grep(\"_class$\", names(tc_results$metrics), value = TRUE),   function(col) {     table(tc_results$metrics[[col]])   } ) names(classification_summary) <- gsub(\"_class$\", \"\",                                       grep(\"_class$\", names(tc_results$metrics), value = TRUE))  print(classification_summary) #> $intra_cellular_isoform_diversity #>  #> Strong Isoform Co-expression   Weak Isoform Co-expression  #>                          704                         1232  #>  #> $inter_cellular_isoform_diversity #>  #> High Isoform Diversity  Low Isoform Diversity  #>                    595                   1341  #>  #> $intra_cell_type_heterogeneity #>  #> High Cellular Heterogeneity  Low Cellular Heterogeneity  #>                         819                         954  #>                Unclassified  #>                         163  #>  #> $inter_cell_type_specificity #>  #> Cell-Type-Independent Isoform Expression  #>                                     1300  #>    Cell-Type-Specific Isoform Expression  #>                                      636  #>  #> $intra_cell_type_heterogeneity_variability #>  #> Consistent Heterogeneity Across Cell Types  #>                                        892  #>                Insufficient Cell Type Data  #>                                        492  #>   Variable Heterogeneity Across Cell Types  #>                                        552  #>  #> $inter_cell_type_difference_variability #>  #>  High Cell-Type Distinctions Insufficient Difference Data  #>                          943                          137  #>   Low Cell-Type Distinctions  #>                          856  #>  #> $cell_type_coexpression_variability #>  #>   Cell-Type-Adaptive Co-expression Cell-Type-Consistent Co-expression  #>                                596                               1156  #>                  Insufficient Data  #>                                184"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"example-1-highly-complex-genes","dir":"Articles","previous_headings":"Finding Genes with Specific Patterns","what":"Example 1: Highly Complex Genes","title":"Understanding Transcriptomic Complexity Metrics","text":"","code":"# Genes with high complexity in multiple dimensions complex_genes <- find_complexity_pattern(   tc_results$metrics,   pattern = list(     intra_cellular_isoform_diversity_class = \"Strong Isoform Co-expression\",     inter_cellular_isoform_diversity_class = \"High Isoform Diversity\"   ) )  print(paste(\"Found\", length(complex_genes), \"highly complex genes\")) #> [1] \"Found 20 highly complex genes\" print(head(complex_genes)) #> [1] \"Cd177\"   \"S100a8\"  \"S100a9\"  \"Il7\"     \"Nup62cl\" \"Crb3\""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"example-2-simple-but-cell-type-specific","dir":"Articles","previous_headings":"Finding Genes with Specific Patterns","what":"Example 2: Simple but Cell Type-Specific","title":"Understanding Transcriptomic Complexity Metrics","text":"","code":"# Genes with low diversity but high cell type specificity specific_simple <- find_complexity_pattern(   tc_results$metrics,   pattern = list(     intra_cellular_isoform_diversity_class = \"Weak Isoform Co-expression\",     inter_cell_type_specificity_class = \"Cell-Type-Specific Isoform Expression\"   ) )  if (length(specific_simple) > 0) {   print(paste(\"Found\", length(specific_simple), \"simple but specific genes\")) } #> [1] \"Found 20 simple but specific genes\""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"visualising-metric-relationships","dir":"Articles","previous_headings":"","what":"Visualising Metric Relationships","title":"Understanding Transcriptomic Complexity Metrics","text":"","code":"# Define all seven core metrics metric_cols <- c(   \"intra_cellular_isoform_diversity\",   \"inter_cellular_isoform_diversity\",   \"inter_cell_type_specificity\",   \"intra_cell_type_heterogeneity\",   \"intra_cell_type_heterogeneity_variability\",   \"inter_cell_type_difference_variability\",   \"cell_type_coexpression_variability\" )  # Filter to available metrics in the dataset available_metrics <- metric_cols[metric_cols %in% names(tc_results$metrics)] metric_data <- tc_results$metrics[, available_metrics] metric_data <- metric_data[complete.cases(metric_data), ]  # Standardise the data for PCA metric_scaled <- scale(metric_data)  # Perform PCA analysis pca_result <- prcomp(metric_scaled)  # Create data for biplot pca_scores <- as.data.frame(pca_result$x[, 1:2]) pca_scores$gene <- tc_results$metrics$gene[complete.cases(tc_results$metrics[, available_metrics])]  # Extract loadings (metric contributions) pca_loadings <- as.data.frame(pca_result$rotation[, 1:2]) pca_loadings$metric <- rownames(pca_loadings)  # Scale loadings for better visualisation scale_factor <- 3 pca_loadings$PC1 <- pca_loadings$PC1 * scale_factor pca_loadings$PC2 <- pca_loadings$PC2 * scale_factor  # Create PCA biplot library(ggrepel) ggplot() +   # Gene points (in grey)   geom_point(data = pca_scores,               aes(x = PC1, y = PC2),               alpha = 0.5, colour = \"grey50\", size = 1) +   # Metric vectors (red arrows)   geom_segment(data = pca_loadings,                aes(x = 0, y = 0, xend = PC1, yend = PC2),                arrow = arrow(length = unit(0.3, \"cm\")),                colour = \"red\", size = 1) +   # Metric labels   geom_text_repel(data = pca_loadings,                   aes(x = PC1, y = PC2, label = metric),                   colour = \"red\", fontface = \"bold\", size = 3.5) +   labs(title = \"PCA Biplot of Complexity Metrics\",        subtitle = \"Red arrows show metric relationships; genes shown as grey points\",        x = paste0(\"PC1 (\", round(summary(pca_result)$importance[2,1]*100, 1), \"%)\"),        y = paste0(\"PC2 (\", round(summary(pca_result)$importance[2,2]*100, 1), \"%)\")) +   theme_minimal() +   theme(plot.title = element_text(hjust = 0.5),         plot.subtitle = element_text(hjust = 0.5)) +   coord_equal() # Print variance explained cat(\"Variance explained by principal components:\\n\") #> Variance explained by principal components: print(summary(pca_result)$importance[, 1:3]) #>                             PC1       PC2       PC3 #> Standard deviation     2.059705 0.9829898 0.7287917 #> Proportion of Variance 0.606060 0.1380400 0.0758800 #> Cumulative Proportion  0.606060 0.7440900 0.8199700"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"interpretation","dir":"Articles","previous_headings":"Visualising Metric Relationships","what":"Interpretation:","title":"Understanding Transcriptomic Complexity Metrics","text":"Arrows pointing similar directions: Metrics tend increase together Arrows pointing opposite directions: Metrics inversely related Arrow length: Indicates well metric represented first two PCs Gene distribution: Shows genes cluster based complexity profiles Note: specific relationships metrics vary depending dataset biological context.","code":""},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"case-study-1-constitutive-vs-alternative-splicing","dir":"Articles","previous_headings":"Case Studies","what":"Case Study 1: Constitutive vs Alternative Splicing","title":"Understanding Transcriptomic Complexity Metrics","text":"","code":"# Compare genes with different numbers of isoforms tc_results$metrics$isoform_category <- cut(   tc_results$metrics$n_isoforms,   breaks = c(2, 3, 5, 10, Inf),   labels = c(\"2-3\", \"4-5\", \"6-10\", \">10\"),   include.lowest = TRUE )  # How does complexity relate to number of isoforms? ggplot(tc_results$metrics,         aes(x = isoform_category, y = intra_cellular_isoform_diversity)) +   geom_boxplot(fill = \"lightblue\") +   labs(title = \"Complexity vs Number of Isoforms\",        x = \"Number of Isoforms\",        y = \"Intra-cellular Diversity\") +   theme_minimal()"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"case-study-2-identifying-regulatory-genes","dir":"Articles","previous_headings":"Case Studies","what":"Case Study 2: Identifying Regulatory Genes","title":"Understanding Transcriptomic Complexity Metrics","text":"","code":"# Genes with variable complexity patterns might be regulatory # High inter-cellular diversity but low intra-cellular diversity # suggests cell-state dependent isoform switching  potential_regulatory <- tc_results$metrics[   tc_results$metrics$inter_cellular_isoform_diversity >      quantile(tc_results$metrics$inter_cellular_isoform_diversity, 0.75, na.rm = TRUE) &   tc_results$metrics$intra_cellular_isoform_diversity <      quantile(tc_results$metrics$intra_cellular_isoform_diversity, 0.25, na.rm = TRUE), ]  print(paste(\"Identified\", nrow(potential_regulatory), \"potential regulatory genes\")) #> [1] \"Identified 57 potential regulatory genes\" if (nrow(potential_regulatory) > 0) {   head(potential_regulatory[, c(\"gene\", \"n_isoforms\",                                 \"intra_cellular_isoform_diversity\",                                 \"inter_cellular_isoform_diversity\")]) } #>                        gene n_isoforms intra_cellular_isoform_diversity #> B3galt1             B3galt1          2                                0 #> Cxxc4                 Cxxc4          2                                0 #> Tac1                   Tac1          2                                0 #> Dnah7a               Dnah7a          2                                0 #> 1700019L13Rik 1700019L13Rik          2                                0 #> Fbxl16               Fbxl16          2                                0 #>               inter_cellular_isoform_diversity #> B3galt1                              0.9754361 #> Cxxc4                                0.9466857 #> Tac1                                 0.9333993 #> Dnah7a                               0.9651509 #> 1700019L13Rik                        0.8662512 #> Fbxl16                               0.9504299"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"exporting-results","dir":"Articles","previous_headings":"","what":"Exporting Results","title":"Understanding Transcriptomic Complexity Metrics","text":"","code":"# Export metrics for further analysis write.csv(tc_results$metrics,            file = file.path(tempdir(), \"complexity_metrics.csv\"),           row.names = FALSE)  # Create summary report summary_stats <- summary(tc_results) #> Isoform Complexity Analysis Summary: #> Total genes analysed: 1936 #>  #> NA Value Statistics (representing biologically meaningful cases): #>   - Intra-cellular Isoform Diversity   :    0 genes (0.0%) - Occurs when genes have only one expressed isoform, indicating lack of alternative splicing #>   - Inter-cellular Isoform Diversity   :    0 genes (0.0%) - Occurs when only one isoform is expressed across the entire cell population #>   - Intra-cell-type Heterogeneity      :  163 genes (8.4%) - Occurs when a cell type has insufficient cells expressing the gene (< 3 cells) #>   - Inter-cell-type Specificity        :    0 genes (0.0%) - Occurs for genes expressed in only a single cell type (high cell type-specificity) #>   - Intra-cell-type Heterogeneity Variability:  492 genes (25.4%) - Occurs when a gene is expressed in fewer than 2 cell types with sufficient data #>   - Inter-cell-type Difference Variability:  137 genes (7.1%) - Occurs when there are insufficient pairwise differences between cell types to calculate variability #>   - Cell-type-specific Co-expression Variability:  184 genes (9.5%) - Occurs when a gene lacks sufficient cell type-specific expression data to compare co-expression patterns #>  #> Classification Distribution Across Complexity Dimensions: #>  #> Intra-cellular Isoform Diversity: #>   - Strong Isoform Co-expression            :  704 genes (36.4%) #>   - Weak Isoform Co-expression              : 1232 genes (63.6%) #>  #> Inter-cellular Isoform Diversity: #>   - High Isoform Diversity                  :  595 genes (30.7%) #>   - Low Isoform Diversity                   : 1341 genes (69.3%) #>  #> Intra-cell-type Heterogeneity: #>   - High Cellular Heterogeneity             :  819 genes (42.3%) #>   - Low Cellular Heterogeneity              :  954 genes (49.3%) #>   - Unclassified                            :  163 genes (8.4%) #>  #> Inter-cell-type Specificity: #>   - Cell-Type-Independent Isoform Expression: 1300 genes (67.1%) #>   - Cell-Type-Specific Isoform Expression   :  636 genes (32.9%) #>  #> Intra-cell-type Heterogeneity Variability: #>   - Consistent Heterogeneity Across Cell Types:  892 genes (46.1%) #>   - Insufficient Cell Type Data             :  492 genes (25.4%) #>   - Variable Heterogeneity Across Cell Types:  552 genes (28.5%) #>  #> Inter-cell-type Difference Variability: #>   - High Cell-Type Distinctions             :  943 genes (48.7%) #>   - Insufficient Difference Data            :  137 genes (7.1%) #>   - Low Cell-Type Distinctions              :  856 genes (44.2%) #>  #> Cell-type-specific Co-expression Variability: #>   - Cell-Type-Adaptive Co-expression        :  596 genes (30.8%) #>   - Cell-Type-Consistent Co-expression      : 1156 genes (59.7%) #>   - Insufficient Data                       :  184 genes (9.5%) #>  #> Traditional Complexity Categories: #>   - High Diversity + High Specificity       :  319 genes (16.5%) #>   - High Diversity + Low Specificity        :  276 genes (14.3%) #>   - Low Diversity + High Specificity        :  317 genes (16.4%) #>   - Low Diversity + Low Specificity         : 1024 genes (52.9%) #>  #> Cell-Type-Specific Genes: #>   - Single cell-type genes                  :   23 genes (1.2%) #>  #> Core Metrics Statistics: #>  #>  #> |Metric                                       |  Mean| Median|    SD|  Min|   Max| Threshold| NA_Percent| #> |:--------------------------------------------|-----:|------:|-----:|----:|-----:|---------:|----------:| #> |Intra-cellular Isoform Diversity             | 0.351|  0.321| 0.270| 0.00| 0.991|     0.456|      0.000| #> |Inter-cellular Isoform Diversity             | 0.591|  0.630| 0.257| 0.01| 1.000|     0.758|      0.000| #> |Intra-cell-type Heterogeneity                | 0.363|  0.367| 0.230| 0.00| 1.000|     0.389|      8.419| #> |Inter-cell-type Specificity                  | 0.401|  0.382| 0.230| 0.00| 1.000|     0.497|      0.000| #> |Intra-cell-type Heterogeneity Variability    | 0.770|  0.620| 0.625| 0.00| 2.646|     0.832|     25.413| #> |Inter-cell-type Difference Variability       | 0.646|  0.567| 0.342| 0.00| 1.620|     0.552|      7.076| #> |Cell-type-specific Co-expression Variability | 1.032|  0.972| 0.702| 0.00| 2.646|     1.389|      9.504| #>  #> Performance metrics: #>   Processing time: 82.89 seconds (1.38 minutes) #>   Memory utilised: 1011.84 MB"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"advanced-interpretation-tips","dir":"Articles","previous_headings":"","what":"Advanced Interpretation Tips","title":"Understanding Transcriptomic Complexity Metrics","text":"Look outliers: Genes extreme values often interesting biology Consider metric combinations: Single metrics tell part story Relate gene function: Different gene categories show characteristic patterns Account technical factors: Low expression can affect metric reliability","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-03-complexity-metrics.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Understanding Transcriptomic Complexity Metrics","text":"","code":"sessionInfo() #> R version 4.4.3 (2025-02-28) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sequoia 15.5 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Australia/Brisbane #> tzcode source: internal #>  #> attached base packages: #> [1] grid      stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #> [1] ggrepel_0.9.6         ComplexHeatmap_2.22.0 ggplot2_3.5.2         #> [4] ScIsoX_1.1.1          #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-9                gridExtra_2.3               #>   [3] rlang_1.1.6                 magrittr_2.0.3              #>   [5] clue_0.3-66                 GetoptLong_1.0.5            #>   [7] ggridges_0.5.6              matrixStats_1.5.0           #>   [9] compiler_4.4.3              png_0.1-8                   #>  [11] systemfonts_1.2.1           vctrs_0.6.5                 #>  [13] pkgconfig_2.0.3             shape_1.4.6.1               #>  [15] crayon_1.5.3                fastmap_1.2.0               #>  [17] XVector_0.46.0              labeling_0.4.3              #>  [19] promises_1.3.3              Rsamtools_2.22.0            #>  [21] rmarkdown_2.29              UCSC.utils_1.2.0            #>  [23] ragg_1.4.0                  purrr_1.1.0                 #>  [25] xfun_0.52                   zlibbioc_1.52.0             #>  [27] cachem_1.1.0                GenomeInfoDb_1.42.3         #>  [29] jsonlite_2.0.0              progress_1.2.3              #>  [31] later_1.4.2                 DelayedArray_0.32.0         #>  [33] BiocParallel_1.40.0         parallel_4.4.3              #>  [35] prettyunits_1.2.0           cluster_2.1.8.1             #>  [37] R6_2.6.1                    bslib_0.9.0                 #>  [39] RColorBrewer_1.1-3          rtracklayer_1.66.0          #>  [41] car_3.1-3                   GenomicRanges_1.58.0        #>  [43] jquerylib_0.1.4             diptest_0.77-1              #>  [45] Rcpp_1.1.0                  SummarizedExperiment_1.36.0 #>  [47] iterators_1.0.14            knitr_1.50                  #>  [49] IRanges_2.40.1              httpuv_1.6.16               #>  [51] Matrix_1.7-3                tidyselect_1.2.1            #>  [53] viridis_0.6.5               rstudioapi_0.17.1           #>  [55] abind_1.4-8                 yaml_2.3.10                 #>  [57] miniUI_0.1.1.1              doParallel_1.0.17           #>  [59] codetools_0.2-20            curl_6.4.0                  #>  [61] lattice_0.22-6              tibble_3.3.0                #>  [63] plyr_1.8.9                  withr_3.0.2                 #>  [65] shiny_1.11.1                Biobase_2.66.0              #>  [67] evaluate_1.0.4              moments_0.14.1              #>  [69] desc_1.4.3                  circlize_0.4.16             #>  [71] mclust_6.1.1                Biostrings_2.74.1           #>  [73] pillar_1.11.0               MatrixGenerics_1.18.1       #>  [75] carData_3.0-5               DT_0.33                     #>  [77] foreach_1.5.2               stats4_4.4.3                #>  [79] plotly_4.11.0               generics_0.1.4              #>  [81] RCurl_1.98-1.16             S4Vectors_0.44.0            #>  [83] hms_1.1.3                   scales_1.4.0                #>  [85] xtable_1.8-4                glue_1.8.0                  #>  [87] lazyeval_0.2.2              tools_4.4.3                 #>  [89] BiocIO_1.16.0               data.table_1.17.8           #>  [91] ggradar_0.2                 GenomicAlignments_1.42.0    #>  [93] fs_1.6.6                    XML_3.99-0.18               #>  [95] cowplot_1.2.0               tidyr_1.3.1                 #>  [97] colorspace_2.1-1            patchwork_1.3.0             #>  [99] GenomeInfoDbData_1.2.13     restfulr_0.0.15             #> [101] Formula_1.2-5               cli_3.6.5                   #> [103] textshaping_1.0.0           S4Arrays_1.6.0              #> [105] viridisLite_0.4.2           dplyr_1.1.4                 #> [107] gtable_0.3.6                sass_0.4.10                 #> [109] digest_0.6.37               BiocGenerics_0.52.0         #> [111] SparseArray_1.6.2           rjson_0.2.23                #> [113] htmlwidgets_1.6.4           farver_2.1.2                #> [115] htmltools_0.5.8.1           pkgdown_2.1.3               #> [117] lifecycle_1.0.4             httr_1.4.7                  #> [119] mime_0.13                   GlobalOptions_0.1.2         #> [121] ggExtra_0.10.1              MASS_7.3-65"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Visualisation Gallery and Interpretation","text":"ScIsoX provides 13+ specialised visualisation functions explore transcriptomic complexity different perspectives. vignette demonstrates visualisation type interpretation guidelines.","code":"library(ScIsoX) library(ggplot2)  # Load example data data(gene_counts_blood) data(transcript_counts_blood) data(transcript_info) data(sample2stage)  # Create SCHT object scht_obj <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   qc_params = list(     min_genes_per_cell = 4000,     max_genes_per_cell = 10000,     min_cells_expressing = 0.02,     min_expr = 1e-6   ),   n_hvg = 3000,   verbose = FALSE ) #>  #> === Sparsity Analysis for Current Dataset === #>  #> 1. Original Transcript Matrix: #>   Number of genes: 55,487 #>   Number of isoforms: 142,238 #>   Number of cells: 205 #>   Non-zero elements: 2,457,789 #>   Zero elements: 26,701,001 #>   Total elements: 29,158,790 #>   Sparsity: 91.57% #>  #> 2. Filtered Transcript Matrix (Post-QC HVG): #>   Number of genes: 1,936 #>   Number of isoforms: 7,327 #>   Number of cells: 181 #>   Non-zero elements: 73,057 #>   Zero elements: 1,253,130 #>   Total elements: 1,326,187 #>   Sparsity: 94.49% #>  #> 3. SCHT Structure (Post-QC HVG): #>   Non-zero elements: 73,057 #>   Zero elements: 154,780 #>   Total elements: 227,837 #>   Sparsity: 67.93% #>  #> 4. Naive 3D Tensor (Post-QC HVG): #>   Required dimensions: 1,936 x 21 x 181 #>   Non-zero elements: 73,057 #>   Zero elements: 7,285,679 #>   Total elements: 7,358,736 #>   Sparsity: 99.01% #>  #> 5. Zero Elements Avoided by SCHT: #>   vs Original Matrix: 26,546,221 #>   vs Filtered Matrix: 1,098,350 #>   vs Naive 3D Tensor: 7,130,899 #>  #> 6. Memory Efficiency Summary: #>   SCHT uses only 0.78% of original matrix size #>   SCHT uses only 17.18% of filtered matrix size #>   SCHT uses only 3.10% of naive tensor size  # Calculate complexity metrics tc_results <- calculate_isoform_complexity_metrics(scht_obj, verbose = FALSE)"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"complexity-landscape","dir":"Articles","previous_headings":"Complexity Landscape Visualisations","what":"1. Complexity Landscape","title":"Visualisation Gallery and Interpretation","text":"Purpose: Visualise relationship complexity metrics 2D scatter plot.  Interpretation: - Top-right: Genes high complexity dimensions - Bottom-left: Simple genes limited isoform diversity - Top-left: Genes cell-specific isoform expression - Bottom-right: Genes constitutive multi-isoform expression","code":"plot_tc_landscape(   tc_results,   n_label = 10,   label_direction = \"top\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"density-contour-plot","dir":"Articles","previous_headings":"Complexity Landscape Visualisations","what":"2. Density Contour Plot","title":"Visualisation Gallery and Interpretation","text":"Purpose: Show density distribution genes complexity space.  Interpretation: - Contour lines indicate gene density - Multiple peaks suggest distinct gene populations - Useful identifying common complexity patterns","code":"plot_tc_density(   tc_results,   use_thresholds = TRUE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"diversity-comparison","dir":"Articles","previous_headings":"Complexity Landscape Visualisations","what":"3. Diversity Comparison","title":"Visualisation Gallery and Interpretation","text":"Purpose: Compare distributions different diversity metrics.","code":"plot_diversity_comparison(   tc_results,   label_top = 10 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"complexity-ridge-plots","dir":"Articles","previous_headings":"Complexity Landscape Visualisations","what":"4. Complexity Ridge Plots","title":"Visualisation Gallery and Interpretation","text":"Purpose: Show distributions complexity metrics across categories.","code":"# For global view plot_complexity_ridges(   tc_results,   type = \"global\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"threshold-visualisations","dir":"Articles","previous_headings":"Complexity Landscape Visualisations","what":"5. Threshold Visualisations","title":"Visualisation Gallery and Interpretation","text":"Purpose: Understand metrics classified low/medium/high categories.","code":"# Note: This function expects threshold plots object, not tc_results # Skip this example as it requires different input plot_threshold_visualisations(tc_results$threshold_plots) #> TableGrob (2 x 1) \"arrange\": 2 grobs #>   z     cells    name                grob #> 1 1 (2-2,1-1) arrange     gtable[arrange] #> 2 2 (1-1,1-1) arrange text[GRID.text.493]"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"isoform-co-expression-heatmap","dir":"Articles","previous_headings":"Isoform-Specific Visualisations","what":"6. Isoform Co-expression Heatmap","title":"Visualisation Gallery and Interpretation","text":"Purpose: Visualise correlation patterns isoforms gene.  Interpretation: - Red: Positive correlation (co-expressed isoforms) - Blue: Negative correlation (mutually exclusive isoforms) - Clustering reveals isoform groups","code":"plot_isoform_coexpression(   scht_obj,   gene = \"Irf8\",   method = \"pearson\",   display_numbers = TRUE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"isoform-usage-profile","dir":"Articles","previous_headings":"Isoform-Specific Visualisations","what":"7. Isoform Usage Profile","title":"Visualisation Gallery and Interpretation","text":"Purpose: Show relative usage isoforms across cell types.","code":"plot_isoform_profile(   scht_obj,   gene = \"Irf8\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"isoform-transitions","dir":"Articles","previous_headings":"Isoform-Specific Visualisations","what":"8. Isoform Transitions","title":"Visualisation Gallery and Interpretation","text":"Purpose: Visualise isoform usage changes across cell types states.","code":"plot_isoform_transitions(   scht_obj,   gene = \"Atl1\",   cell_type_order = c(\"AEC\",\"HEC\",\"T1_pre_HSC\",\"T2_pre_HSC\",\"E12\",\"E14\",\"Adult_HSC\" ) )"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"complexity-radar-chart","dir":"Articles","previous_headings":"Multi-dimensional Comparisons","what":"9. Complexity Radar Chart","title":"Visualisation Gallery and Interpretation","text":"Purpose: Compare multiple complexity metrics selected genes.","code":"# Select interesting genes complex_genes <- tc_results$metrics[   tc_results$metrics$cell_type_coexpression_variability_class == \"Cell-Type-Consistent Co-expression\", ]$gene  if (length(complex_genes) > 0) {   plot_complexity_radar(     tc_results,     genes = complex_genes[1:min(10, length(complex_genes))]   ) }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"single-gene-radar-across-cell-types","dir":"Articles","previous_headings":"Multi-dimensional Comparisons","what":"10. Single Gene Radar Across Cell Types","title":"Visualisation Gallery and Interpretation","text":"Purpose: Show gene’s complexity varies across cell types.","code":"plot_single_gene_radar_cell_type(   tc_results,   gene_name = \"Irf8\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"multiple-genes-radar-comparison","dir":"Articles","previous_headings":"Multi-dimensional Comparisons","what":"11. Multiple Genes Radar Comparison","title":"Visualisation Gallery and Interpretation","text":"Purpose: Compare multiple genes across cell types simultaneously.","code":"plot_compare_multiple_genes_radar_cell_type(   tc_results,   gene_names = complex_genes[1:min(10, length(complex_genes))],   scale_type = \"per_cell_type\" )"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"for-complexity-landscapes","dir":"Articles","previous_headings":"Interpretation Guidelines","what":"For Complexity Landscapes:","title":"Visualisation Gallery and Interpretation","text":"Gene positioning: Location indicates relative complexity Clustering patterns: Groups genes similar profiles Outliers: Often biologically interesting genes Threshold lines: Help identify significantly complex genes","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"for-isoform-visualisations","dir":"Articles","previous_headings":"Interpretation Guidelines","what":"For Isoform Visualisations:","title":"Visualisation Gallery and Interpretation","text":"Co-expression patterns: Indicate functional relationships Cell type specificity: Suggests regulatory mechanisms Transition patterns: May indicate differentiation paths","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"for-multi-dimensional-views","dir":"Articles","previous_headings":"Interpretation Guidelines","what":"For Multi-dimensional Views:","title":"Visualisation Gallery and Interpretation","text":"Radar charts: Compare overall complexity profiles Heatmaps: Identify patterns across many genes/conditions Ridge plots: Understand distribution shapes","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"customisation-options","dir":"Articles","previous_headings":"","what":"Customisation Options","title":"Visualisation Gallery and Interpretation","text":"visualisation functions support customisation:","code":"# Example: Customised landscape plot plot_tc_landscape(   tc_results,   x_metric = \"intra_cellular_isoform_diversity\",  # Change axes   y_metric = \"intra_cell_type_heterogeneity_variability\",   highlight_genes = c(\"Gene1\", \"Gene2\"),          # Highlight specific genes   n_label = 20,                                   # Label more genes   point_transparency = 0.7                        # Adjust transparency )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"saving-plots","dir":"Articles","previous_headings":"","what":"Saving Plots","title":"Visualisation Gallery and Interpretation","text":"","code":"# High-resolution plots for publication pdf(\"complexity_analysis.pdf\", width = 12, height = 10) plot_tc_landscape(tc_results, n_label = 20) dev.off()  # PNG for presentations png(\"complexity_landscape.png\", width = 1200, height = 1000, res = 150) plot_tc_landscape(tc_results, n_label = 20) dev.off()"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"best-practices","dir":"Articles","previous_headings":"","what":"Best Practices","title":"Visualisation Gallery and Interpretation","text":"Start overview plots (landscape, density) understand overall patterns Zoom interesting genes using isoform-specific plots Use comparative plots analysing multiple conditions Adjust parameters based dataset size complexity Consider colour-blind friendly palettes publication figures","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-04-visualisation.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Visualisation Gallery and Interpretation","text":"","code":"sessionInfo() #> R version 4.4.3 (2025-02-28) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sequoia 15.5 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Australia/Brisbane #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.2 ScIsoX_1.1.1  #>  #> loaded via a namespace (and not attached): #>   [1] RColorBrewer_1.1-3          rstudioapi_0.17.1           #>   [3] jsonlite_2.0.0              shape_1.4.6.1               #>   [5] magrittr_2.0.3              farver_2.1.2                #>   [7] rmarkdown_2.29              GlobalOptions_0.1.2         #>   [9] fs_1.6.6                    BiocIO_1.16.0               #>  [11] zlibbioc_1.52.0             ragg_1.4.0                  #>  [13] vctrs_0.6.5                 Rsamtools_2.22.0            #>  [15] RCurl_1.98-1.16             forcats_1.0.0               #>  [17] htmltools_0.5.8.1           S4Arrays_1.6.0              #>  [19] progress_1.2.3              curl_6.4.0                  #>  [21] SparseArray_1.6.2           Formula_1.2-5               #>  [23] sass_0.4.10                 bslib_0.9.0                 #>  [25] htmlwidgets_1.6.4           desc_1.4.3                  #>  [27] plyr_1.8.9                  plotly_4.11.0               #>  [29] cachem_1.1.0                GenomicAlignments_1.42.0    #>  [31] mime_0.13                   lifecycle_1.0.4             #>  [33] iterators_1.0.14            pkgconfig_2.0.3             #>  [35] Matrix_1.7-3                R6_2.6.1                    #>  [37] fastmap_1.2.0               GenomeInfoDbData_1.2.13     #>  [39] MatrixGenerics_1.18.1       shiny_1.11.1                #>  [41] clue_0.3-66                 digest_0.6.37               #>  [43] colorspace_2.1-1            patchwork_1.3.0             #>  [45] S4Vectors_0.44.0            textshaping_1.0.0           #>  [47] GenomicRanges_1.58.0        labeling_0.4.3              #>  [49] httr_1.4.7                  abind_1.4-8                 #>  [51] mgcv_1.9-1                  compiler_4.4.3              #>  [53] withr_3.0.2                 doParallel_1.0.17           #>  [55] BiocParallel_1.40.0         carData_3.0-5               #>  [57] viridis_0.6.5               MASS_7.3-65                 #>  [59] DelayedArray_0.32.0         rjson_0.2.23                #>  [61] tools_4.4.3                 ggradar_0.2                 #>  [63] httpuv_1.6.16               glue_1.8.0                  #>  [65] restfulr_0.0.15             nlme_3.1-167                #>  [67] promises_1.3.3              grid_4.4.3                  #>  [69] cluster_2.1.8.1             generics_0.1.4              #>  [71] isoband_0.2.7               gtable_0.3.6                #>  [73] tidyr_1.3.1                 data.table_1.17.8           #>  [75] hms_1.1.3                   car_3.1-3                   #>  [77] XVector_0.46.0              BiocGenerics_0.52.0         #>  [79] ggrepel_0.9.6               foreach_1.5.2               #>  [81] pillar_1.11.0               ggExtra_0.10.1              #>  [83] later_1.4.2                 circlize_0.4.16             #>  [85] splines_4.4.3               dplyr_1.1.4                 #>  [87] moments_0.14.1              lattice_0.22-6              #>  [89] rtracklayer_1.66.0          tidyselect_1.2.1            #>  [91] ComplexHeatmap_2.22.0       Biostrings_2.74.1           #>  [93] miniUI_0.1.1.1              knitr_1.50                  #>  [95] gridExtra_2.3               IRanges_2.40.1              #>  [97] SummarizedExperiment_1.36.0 stats4_4.4.3                #>  [99] xfun_0.52                   Biobase_2.66.0              #> [101] diptest_0.77-1              matrixStats_1.5.0           #> [103] DT_0.33                     UCSC.utils_1.2.0            #> [105] lazyeval_0.2.2              yaml_2.3.10                 #> [107] evaluate_1.0.4              codetools_0.2-20            #> [109] tibble_3.3.0                cli_3.6.5                   #> [111] xtable_1.8-4                systemfonts_1.2.1           #> [113] jquerylib_0.1.4             Rcpp_1.1.0                  #> [115] GenomeInfoDb_1.42.3         png_0.1-8                   #> [117] XML_3.99-0.18               parallel_4.4.3              #> [119] pkgdown_2.1.3               prettyunits_1.2.0           #> [121] mclust_6.1.1                bitops_1.0-9                #> [123] viridisLite_0.4.2           scales_1.4.0                #> [125] ggridges_0.5.6              purrr_1.1.0                 #> [127] crayon_1.5.3                GetoptLong_1.0.5            #> [129] rlang_1.1.6                 cowplot_1.2.0"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Co-expression Analysis and Isoform Switching","text":"vignette demonstrates ScIsoX’s comprehensive co-expression analysis capabilities interactive Shiny application, provides intuitive interface exploring isoform relationships, switching patterns, cell type-specific co-expression.","code":"library(ScIsoX) library(ggplot2)  # Load example data data(gene_counts_blood) data(transcript_counts_blood) data(transcript_info) data(sample2stage)  # Create IntegratedSCHT for cell type-specific analysis integrated_scht <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   qc_params = list(     min_genes_per_cell = 4000,     max_genes_per_cell = 10000,     min_cells_expressing = 0.02,     min_expr = 1e-6   ),   n_hvg = 3000,   require_cell_type = TRUE,   verbose = FALSE ) #>  #> === Sparsity Analysis for Current Dataset === #>  #> 1. Original Transcript Matrix: #>   Number of genes: 55,487 #>   Number of isoforms: 142,238 #>   Number of cells: 205 #>   Non-zero elements: 2,457,789 #>   Zero elements: 26,701,001 #>   Total elements: 29,158,790 #>   Sparsity: 91.57% #>  #> 2. Filtered Transcript Matrix (Post-QC HVG): #>   Number of genes: 1,936 #>   Number of isoforms: 7,327 #>   Number of cells: 181 #>   Non-zero elements: 73,057 #>   Zero elements: 1,253,130 #>   Total elements: 1,326,187 #>   Sparsity: 94.49% #>  #> 3. SCHT Structure (Post-QC HVG): #>   Non-zero elements: 73,057 #>   Zero elements: 154,780 #>   Total elements: 227,837 #>   Sparsity: 67.93% #>  #> 4. Naive 3D Tensor (Post-QC HVG): #>   Required dimensions: 1,936 x 21 x 181 #>   Non-zero elements: 73,057 #>   Zero elements: 7,285,679 #>   Total elements: 7,358,736 #>   Sparsity: 99.01% #>  #> 5. Zero Elements Avoided by SCHT: #>   vs Original Matrix: 26,546,221 #>   vs Filtered Matrix: 1,098,350 #>   vs Naive 3D Tensor: 7,130,899 #>  #> 6. Memory Efficiency Summary: #>   SCHT uses only 0.78% of original matrix size #>   SCHT uses only 17.18% of filtered matrix size #>   SCHT uses only 3.10% of naive tensor size"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"launching-the-shiny-app","dir":"Articles","previous_headings":"Interactive Co-expression Explorer","what":"Launching the Shiny App","title":"Co-expression Analysis and Isoform Switching","text":"comprehensive way explore co-expression patterns ScIsoX’s interactive Shiny application:","code":"# Launch interactive co-expression explorer launch_coexpression_app(integrated_scht)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"features-of-the-co-expression-app","dir":"Articles","previous_headings":"Interactive Co-expression Explorer","what":"Features of the Co-expression App","title":"Co-expression Analysis and Isoform Switching","text":"Shiny app provides: Search gene name Filter genes number isoforms Select pre-defined gene sets Choose Pearson, Spearman, Kendall correlation Adjust minimum cell expression thresholds Interactive heatmap customisable colours Set correlation thresholds switching Visualise switching pairs Export switching results Compare patterns across cell types Identify cell type-specific switching Interactive plots cell type Download correlation matrices Save publication-ready figures Export switching pair tables","code":""},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"basic-analysis-example","dir":"Articles","previous_headings":"Programmatic Co-expression Analysis","what":"Basic Analysis Example","title":"Co-expression Analysis and Isoform Switching","text":"Shiny app provides comprehensive interactive analysis, can also perform co-expression analysis programmatically:","code":"# Example: Analyse Mapk13 gene target_gene <- \"Mapk13\"  # Calculate isoform correlations cor_result <- calculate_isoform_coexpression(   integrated_scht,   gene = target_gene,   method = \"pearson\",   min_cells = 10 )  # View correlation summary print(paste(\"Gene:\", cor_result$gene)) #> [1] \"Gene: Mapk13\" print(paste(\"Number of isoforms:\", cor_result$n_isoforms)) #> [1] \"Number of isoforms: 7\" print(paste(\"Number of cells:\", cor_result$n_cells)) #> [1] \"Number of cells: 11\" print(\"\\nCorrelation matrix:\") #> [1] \"\\nCorrelation matrix:\" print(round(cor_result$cor_matrix, 2)) #>                    ENSMUST00000233984 ENSMUST00000124099 ENSMUST00000129096 #> ENSMUST00000233984               1.00               0.41               0.19 #> ENSMUST00000124099               0.41               1.00               0.84 #> ENSMUST00000129096               0.19               0.84               1.00 #> ENSMUST00000233109               0.31              -0.10              -0.44 #> ENSMUST00000233051               0.47              -0.32              -0.66 #> ENSMUST00000233676               0.78               0.68               0.47 #> ENSMUST00000004986               0.57               0.39               0.12 #>                    ENSMUST00000233109 ENSMUST00000233051 ENSMUST00000233676 #> ENSMUST00000233984               0.31               0.47               0.78 #> ENSMUST00000124099              -0.10              -0.32               0.68 #> ENSMUST00000129096              -0.44              -0.66               0.47 #> ENSMUST00000233109               1.00               0.55               0.13 #> ENSMUST00000233051               0.55               1.00               0.33 #> ENSMUST00000233676               0.13               0.33               1.00 #> ENSMUST00000004986               0.19               0.44               0.73 #>                    ENSMUST00000004986 #> ENSMUST00000233984               0.57 #> ENSMUST00000124099               0.39 #> ENSMUST00000129096               0.12 #> ENSMUST00000233109               0.19 #> ENSMUST00000233051               0.44 #> ENSMUST00000233676               0.73 #> ENSMUST00000004986               1.00  # Detect switching patterns switching_result <- detect_isoform_switching(   cor_result,   threshold = -0.3,   strong_threshold = -0.5 )  print(paste(\"\\nNumber of switching pairs:\", switching_result$n_switching_pairs)) #> [1] \"\\nNumber of switching pairs: 3\" print(paste(\"Number of strong switching pairs:\", switching_result$n_strong_switching)) #> [1] \"Number of strong switching pairs: 1\""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"systematic-analysis","dir":"Articles","previous_headings":"Programmatic Co-expression Analysis","what":"Systematic Analysis","title":"Co-expression Analysis and Isoform Switching","text":"","code":"# Analyse multiple genes selected_genes <- c(\"Atl1\", \"Irf8\", \"Mx1\", \"Mapk13\", \"Crb3\")  # Summary of switching patterns switching_summary <- data.frame()  for (gene in selected_genes) {   tryCatch({     cor_res <- calculate_isoform_coexpression(scht_obj, gene, min_cells = 10)     switch_res <- detect_isoform_switching(cor_res)          switching_summary <- rbind(switching_summary, data.frame(       gene = gene,       n_isoforms = cor_res$n_isoforms,       n_switching_pairs = switch_res$n_switching_pairs,       n_strong_switching = switch_res$n_strong_switching,       stringsAsFactors = FALSE     ))   }, error = function(e) NULL) }  print(switching_summary) #> data frame with 0 columns and 0 rows"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"understanding-cell-type-patterns","dir":"Articles","previous_headings":"Cell Type-Specific Analysis","what":"Understanding Cell Type Patterns","title":"Co-expression Analysis and Isoform Switching","text":"cell type-specific co-expression analysis, Shiny app provides: Side--side comparisons correlation matrices across cell types Interactive selection cell types compare Highlighting cell type-specific switching pairs Export cell type-specific results","code":""},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"conservation-analysis-tab","dir":"Articles","previous_headings":"Advanced Features in the Shiny App","what":"Conservation Analysis Tab","title":"Co-expression Analysis and Isoform Switching","text":"Shiny app includes dedicated tab conservation analysis: Multi-gene selection: Analyse conservation patterns across multiple genes Threshold adjustment: Interactively set conservation thresholds Visualisation options: Heatmaps, dendrograms, network views Export conservation scores: Download results analysis","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"network-analysis-tab","dir":"Articles","previous_headings":"Advanced Features in the Shiny App","what":"Network Analysis Tab","title":"Co-expression Analysis and Isoform Switching","text":"Explore co-expression networks: Network construction: Build networks based correlation thresholds Interactive visualisation: Drag zoom network plots Module detection: Identify co-expressed isoform modules Cell type overlays: Colour networks cell type specificity","code":""},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"getting-started","dir":"Articles","previous_headings":"Tips for Using the Shiny App","what":"Getting Started","title":"Co-expression Analysis and Isoform Switching","text":"Launch app IntegratedSCHT object Start Overview tab see summary statistics Select gene dropdown search box Explore correlations Analysis tab Check cell types Cell Type Specific tab Export results using download buttons","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"performance-tips","dir":"Articles","previous_headings":"Tips for Using the Shiny App","what":"Performance Tips","title":"Co-expression Analysis and Isoform Switching","text":"large datasets, pre-filter genes interest Use “cache results” option frequently analysed genes Export intermediate results avoid re-computation","code":""},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"use-case-1-identifying-isoform-switches-during-differentiation","dir":"Articles","previous_headings":"Common Use Cases","what":"Use Case 1: Identifying Isoform Switches During Differentiation","title":"Co-expression Analysis and Isoform Switching","text":"Shiny app particularly useful : - Tracking isoform usage changes across developmental stages - Identifying key switching events - Comparing patterns lineages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"use-case-2-disease-associated-isoform-changes","dir":"Articles","previous_headings":"Common Use Cases","what":"Use Case 2: Disease-Associated Isoform Changes","title":"Co-expression Analysis and Isoform Switching","text":"Compare normal vs disease samples Identify disease-specific switching patterns Explore therapeutic targets","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"use-case-3-cell-type-marker-discovery","dir":"Articles","previous_headings":"Common Use Cases","what":"Use Case 3: Cell Type Marker Discovery","title":"Co-expression Analysis and Isoform Switching","text":"Find isoforms specific cell types Validate cell type annotations Discover novel cell type markers","code":""},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"common-issues","dir":"Articles","previous_headings":"Troubleshooting the Shiny App","what":"Common Issues","title":"Co-expression Analysis and Isoform Switching","text":"Ensure required packages installed Check object IntegratedSCHT Verify sufficient memory dataset Reduce number genes analysis Increase min_cells threshold Use sampling large datasets Check gene names match data Verify minimum expression thresholds Ensure sufficient cells per cell type","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"exporting-results-from-the-shiny-app","dir":"Articles","previous_headings":"","what":"Exporting Results from the Shiny App","title":"Co-expression Analysis and Isoform Switching","text":"app provides multiple export options:","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"available-export-formats","dir":"Articles","previous_headings":"Exporting Results from the Shiny App","what":"Available Export Formats","title":"Co-expression Analysis and Isoform Switching","text":"CSV format analysis RDS format preserve R object structure Table switching pairs Summary statistics High-resolution PNG/PDF Customisable dimensions Publication-ready figures HTML reports results Includes methods parameters Reproducible analysis record","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"programmatic-export","dir":"Articles","previous_headings":"Exporting Results from the Shiny App","what":"Programmatic Export","title":"Co-expression Analysis and Isoform Switching","text":"","code":"# After running analysis in the app, you can also export programmatically if (exists(\"ct_coexp\")) {   # Export to temporary directory   export_result <- export_coexpression_results(     ct_coexp,     output_dir = tempdir(),     gene_name = \"Atl1\",     format = \"csv\"   )      print(paste(\"Results exported to:\", export_result$output_dir)) }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Co-expression Analysis and Isoform Switching","text":"ScIsoX Shiny application provides comprehensive, user-friendly interface co-expression analysis. Whether ’re exploring single gene conducting systematic analyses across cell types, app streamlines workflow provides publication-ready outputs. advanced programmatic analysis, underlying functions (calculate_isoform_coexpression, detect_isoform_switching, etc.) remain available custom workflows batch processing.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/articles/vignette-05-coexpression.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session Information","title":"Co-expression Analysis and Isoform Switching","text":"","code":"sessionInfo() #> R version 4.4.3 (2025-02-28) #> Platform: aarch64-apple-darwin20 #> Running under: macOS Sequoia 15.5 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Australia/Brisbane #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] ggplot2_3.5.2 ScIsoX_1.1.1  #>  #> loaded via a namespace (and not attached): #>   [1] bitops_1.0-9                gridExtra_2.3               #>   [3] rlang_1.1.6                 magrittr_2.0.3              #>   [5] clue_0.3-66                 GetoptLong_1.0.5            #>   [7] ggridges_0.5.6              matrixStats_1.5.0           #>   [9] compiler_4.4.3              png_0.1-8                   #>  [11] systemfonts_1.2.1           vctrs_0.6.5                 #>  [13] pkgconfig_2.0.3             shape_1.4.6.1               #>  [15] crayon_1.5.3                fastmap_1.2.0               #>  [17] XVector_0.46.0              promises_1.3.3              #>  [19] Rsamtools_2.22.0            rmarkdown_2.29              #>  [21] UCSC.utils_1.2.0            ragg_1.4.0                  #>  [23] purrr_1.1.0                 xfun_0.52                   #>  [25] zlibbioc_1.52.0             cachem_1.1.0                #>  [27] GenomeInfoDb_1.42.3         jsonlite_2.0.0              #>  [29] progress_1.2.3              later_1.4.2                 #>  [31] DelayedArray_0.32.0         BiocParallel_1.40.0         #>  [33] parallel_4.4.3              prettyunits_1.2.0           #>  [35] cluster_2.1.8.1             R6_2.6.1                    #>  [37] bslib_0.9.0                 RColorBrewer_1.1-3          #>  [39] rtracklayer_1.66.0          car_3.1-3                   #>  [41] GenomicRanges_1.58.0        jquerylib_0.1.4             #>  [43] diptest_0.77-1              Rcpp_1.1.0                  #>  [45] SummarizedExperiment_1.36.0 iterators_1.0.14            #>  [47] knitr_1.50                  IRanges_2.40.1              #>  [49] httpuv_1.6.16               Matrix_1.7-3                #>  [51] tidyselect_1.2.1            viridis_0.6.5               #>  [53] rstudioapi_0.17.1           abind_1.4-8                 #>  [55] yaml_2.3.10                 miniUI_0.1.1.1              #>  [57] doParallel_1.0.17           codetools_0.2-20            #>  [59] curl_6.4.0                  lattice_0.22-6              #>  [61] tibble_3.3.0                plyr_1.8.9                  #>  [63] withr_3.0.2                 shiny_1.11.1                #>  [65] Biobase_2.66.0              evaluate_1.0.4              #>  [67] moments_0.14.1              desc_1.4.3                  #>  [69] circlize_0.4.16             mclust_6.1.1                #>  [71] Biostrings_2.74.1           pillar_1.11.0               #>  [73] MatrixGenerics_1.18.1       carData_3.0-5               #>  [75] DT_0.33                     foreach_1.5.2               #>  [77] stats4_4.4.3                plotly_4.11.0               #>  [79] generics_0.1.4              RCurl_1.98-1.16             #>  [81] S4Vectors_0.44.0            hms_1.1.3                   #>  [83] scales_1.4.0                xtable_1.8-4                #>  [85] glue_1.8.0                  lazyeval_0.2.2              #>  [87] tools_4.4.3                 BiocIO_1.16.0               #>  [89] data.table_1.17.8           ggradar_0.2                 #>  [91] GenomicAlignments_1.42.0    fs_1.6.6                    #>  [93] XML_3.99-0.18               cowplot_1.2.0               #>  [95] grid_4.4.3                  tidyr_1.3.1                 #>  [97] colorspace_2.1-1            patchwork_1.3.0             #>  [99] GenomeInfoDbData_1.2.13     restfulr_0.0.15             #> [101] Formula_1.2-5               cli_3.6.5                   #> [103] textshaping_1.0.0           S4Arrays_1.6.0              #> [105] viridisLite_0.4.2           ComplexHeatmap_2.22.0       #> [107] dplyr_1.1.4                 gtable_0.3.6                #> [109] sass_0.4.10                 digest_0.6.37               #> [111] BiocGenerics_0.52.0         ggrepel_0.9.6               #> [113] SparseArray_1.6.2           rjson_0.2.23                #> [115] htmlwidgets_1.6.4           farver_2.1.2                #> [117] htmltools_0.5.8.1           pkgdown_2.1.3               #> [119] lifecycle_1.0.4             httr_1.4.7                  #> [121] mime_0.13                   GlobalOptions_0.1.2         #> [123] ggExtra_0.10.1              MASS_7.3-65"},{"path":"https://ThaddeusWu.github.io/ScIsoX/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Siyuan Wu. Author, maintainer. Ulf Schmitz. Author.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wu S, Schmitz U (2025). ScIsoX: Single-Cell Hierarchical Tensor (SCHT) Creation Pipeline Transcriptomic Complexity Analysis R. R package version 1.1.1, https://github.com/ThaddeusWu/ScIsoX, https://ThaddeusWu.github.io/ScIsoX/.","code":"@Manual{,   title = {ScIsoX: Single-Cell Hierarchical Tensor (SCHT) Creation Pipeline and Transcriptomic Complexity Analysis in R},   author = {Siyuan Wu and Ulf Schmitz},   year = {2025},   note = {R package version 1.1.1, https://github.com/ThaddeusWu/ScIsoX},   url = {https://ThaddeusWu.github.io/ScIsoX/}, }"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"single-cell-hierarchical-tensor-scht-creation-pipeline-and-transcriptomic-complexity-analysis-in-r","dir":"","previous_headings":"","what":"Single-Cell Hierarchical Tensor (SCHT) Creation Pipeline and Transcriptomic Complexity Analysis in R","title":"ScIsoX","text":"comprehensive toolkit analysing isoform expression patterns single-cell resolution","code":"Wu S and Schmitz U (2025). ScIsoX: A Multidimensional Framework for Measuring Isoform-Level Transcriptomic Complexity in Single Cells."},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"ScIsoX","text":"Introduction Installation Package Architecture 5-Minute Quick Start Basic Tutorial Advanced Usage Visualisation Gallery Troubleshooting Citation Contact & Support","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"ScIsoX","text":"ScIsoX provides robust computational framework investigating transcriptomic complexity single-cell resolution. package enables researchers analyse alternative splicing patterns across cell types, revealing cell type-specific isoform usage co-expression dynamics.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"key-features","dir":"","previous_headings":"Introduction","what":"Key Features","title":"ScIsoX","text":"Single-Cell Hierarchical Tensor: Generate multi-dimensional representation isoform expression Complexity Analysis: Calculate seven core complexity metrics capture different aspects transcriptomic diversity Advanced Visualisations: Create advanced figures complexity analysis 13+ specialised plotting functions Cell Type Comparison: Analyse cell type-specific isoform usage patterns Co-expression Analysis: Interactive Shiny application exploring isoform relationships Performance Tracking: Built-memory runtime monitoring sparsity analysis","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"theoretical-framework","dir":"","previous_headings":"Introduction","what":"Theoretical Framework","title":"ScIsoX","text":"ScIsoX implements novel analytical framework based hierarchical tensor decomposition quantify transcriptomic complexity across multiple dimensions. seven core metrics capture: Intra-cellular isoform diversity: Co-expression multiple isoforms within individual cells Inter-cellular isoform diversity: Distribution different isoforms across cellular population Intra-cell-type heterogeneity: Cell--cell variation isoform usage within cell type Inter-cell-type specificity: Cell-type-specific patterns isoform usage Intra-cell-type heterogeneity variability: Variation cellular heterogeneity across cell types Inter-cell-type difference variability: Identification cell type pairs distinctive isoform usage Cell-type-specific co-expression variability: Variation cellular co-expression mechanisms across cell types","code":""},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"prerequisites","dir":"","previous_headings":"Installation","what":"Prerequisites","title":"ScIsoX","text":"ScIsoX requires R version 4.0.0 higher depends several packages efficient data processing visualisation.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"from-github","dir":"","previous_headings":"Installation","what":"From GitHub","title":"ScIsoX","text":"","code":"# Install devtools if not already installed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  # Install ScIsoX devtools::install_github(\"ThaddeusWu/ScIsoX\")"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"first-time-setup","dir":"","previous_headings":"Installation","what":"First Time Setup","title":"ScIsoX","text":"first load ScIsoX, check optional packages provide helpful information:","code":"library(ScIsoX)  # If some optional packages are missing, you'll see: # =============================================== # ScIsoX: Single-Cell Isoform Complexity Analysis # =============================================== #  # Some optional packages are not installed: #   - For visualisation: ggridges, ggrepel, ggExtra #   - For advanced_plots: ComplexHeatmap, ggradar, cowplot, patchwork #   - For data_manipulation: tidyr #  # Some visualisation features may not be available. # To install all optional packages, run: #   install_scisox_suggests()  # Install all optional packages with one command: install_scisox_suggests()  # Or install only specific types: install_scisox_suggests(include_bioc = FALSE)  # Skip Bioconductor packages install_scisox_suggests(include_github = FALSE)  # Skip GitHub packages"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"dependencies","dir":"","previous_headings":"Installation","what":"Dependencies","title":"ScIsoX","text":"ScIsoX requires several R packages function properly. comprehensive list dependencies:","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"required-dependencies-imports","dir":"","previous_headings":"Installation > Dependencies","what":"Required Dependencies (Imports)","title":"ScIsoX","text":"packages automatically installed install ScIsoX:","code":"# Core dependencies required_packages <- c(   \"progress\",   # For progress bars   \"stats\",      # For statistical functions   \"graphics\",   # For base plotting   \"grDevices\",  # For graphics devices and colours   \"rtracklayer\", # For handling GTF files   \"tools\",      # For file utilities   \"data.table\", # For efficient data manipulation   \"Matrix\",     # For sparse matrix support   \"methods\",    # For S3/S4 method handling   \"dplyr\",      # For data manipulation   \"mclust\",     # For clustering and mixture models   \"ggplot2\",    # For plotting   \"moments\",    # For statistical moments calculation   \"utils\",      # For utility functions   \"knitr\",      # For documentation   \"car\",        # For statistical transformations   \"diptest\",    # For multimodality tests   \"scales\",     # For scale transformations   \"gridExtra\",  # For arranging multiple plots   \"magrittr\",   # For pipe operations   \"MASS\",       # For statistical functions   \"viridis\",    # For colour palettes (frequently used)   \"RColorBrewer\", # For colour palettes (frequently used)   \"shiny\",      # For interactive applications   \"shinydashboard\", # For Shiny dashboard layouts   \"plotly\",     # For interactive plots   \"DT\"          # For interactive data tables )  # These are automatically installed with ScIsoX"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"optional-dependencies-suggests","dir":"","previous_headings":"Installation > Dependencies","what":"Optional Dependencies (Suggests)","title":"ScIsoX","text":"packages provide enhanced functionality. ScIsoX designed work without packages, visualisations features reduced functionality: Quick Installation: ScIsoX provides convenient function install optional packages:","code":"# Optional packages for advanced visualisations suggested_packages <- c(   \"ggridges\",         # For ridge plots (required for plot_complexity_ridges)   \"ggrepel\",          # For repelling text labels (falls back to regular text)   \"ggExtra\",          # For marginal plots (skipped if not available)   \"ComplexHeatmap\",   # For heatmaps (required for plot_isoform_coexpression)   \"cowplot\",          # For plot composition (required for multi-panel layouts)   \"grid\",             # For advanced graphics   \"tidyr\",            # For data reshaping (falls back to base R reshape)   \"circlize\",         # For colour palettes in heatmaps   \"patchwork\"         # For combining plots ) # After installing ScIsoX, run: library(ScIsoX) install_scisox_suggests()"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"other-packages","dir":"","previous_headings":"Installation > Dependencies","what":"Other Packages","title":"ScIsoX","text":"advanced features require packages:","code":"# Install devtools if needed if (!requireNamespace(\"devtools\", quietly = TRUE)) {   install.packages(\"devtools\") }  # Install ggradar for radar charts if (!requireNamespace(\"ggradar\", quietly = TRUE)) {   devtools::install_github(\"ricardo-bion/ggradar\") }  # Install ComplexHeatmap for heat maps if (!require(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"ComplexHeatmap\")"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"package-behaviour-with-missing-dependencies","dir":"","previous_headings":"Installation > Dependencies","what":"Package Behaviour with Missing Dependencies","title":"ScIsoX","text":"ScIsoX designed robust optional packages installed: Core functionality always works: complexity calculations basic analyses ggrepel: Labels use standard text positioning ggExtra: Marginal distributions skipped tidyr: Base R reshape functions used Colour palettes: Built-alternatives provided Clear error messages: Functions requiring specific packages provide installation instructions Startup messages: loading ScIsoX, ’ll see optional packages missing Note: best experience, recommend installing suggested packages using install_scisox_suggests().","code":"# Example: Using ScIsoX without all optional packages library(ScIsoX) # You'll see a message about missing packages and how to install them  # The core analysis still works perfectly: # First create SCHT object data(gene_counts_blood) data(transcript_counts_blood) data(transcript_info) data(sample2stage)  scht_obj <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   n_hvg = 3000,   qc_params = list(     min_genes_per_cell = 4000,            max_genes_per_cell = 10000,           min_cells_expressing = 0.02,        min_expr = 1e-6   ),   verbose = FALSE )  tc_results <- calculate_isoform_complexity_metrics(scht_obj)  # Some visualisations may have reduced features: plot_tc_landscape(tc_results)  # Works, but labels might overlap without ggrepel"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"package-architecture","dir":"","previous_headings":"","what":"Package Architecture","title":"ScIsoX","text":"ScIsoX organised several functional modules: create_transcript_info(): Generate standardised transcript annotations GTF files generate_gene_counts(): Create gene-level counts isoform-level expression data plot_genes_per_cell_distribution(): Visualise analyse genes per cell distribution recommend_qc_parameters(): Generate data-driven QC parameter recommendations create_scht(): Process raw count data Single-Cell Hierarchical Tensor objects automatic sparsity detection calculate_isoform_complexity_metrics(): Calculate seven core complexity metrics select_genes_of_interest(): Filter genes based complexity classifications find_complexity_pattern(): Identify genes specific complexity patterns compare_gene_metrics(): Extract compare metrics across multiple genes plot_threshold_visualisations(): Create bar charts comparing distributions threshold choices across different complexity metrics plot_tc_landscape(): Create complexity landscape plots marginal distributions plot_tc_density(): Generate contour plots complexity landscapes plot_diversity_comparison(): Compare intra-cellular inter-cellular diversity plot_complexity_ridges(): Create ridge plots complexity metrics plot_isoform_coexpression(): Visualise co-expression patterns isoforms plot_isoform_profile(): Create stacked bar charts isoform usage across cell types plot_isoform_transitions(): Visualise isoform usage transitions across cell types plot_complexity_radar(): Create radar charts multi-dimensional complexity comparison plot_single_gene_radar_cell_type(): Create radar chart single gene across cell types plot_compare_multiple_genes_radar_cell_type(): Compare multiple genes across cell types radar charts plot_compare_tc_density_difference(): Compare complexity density differences groups plot_compare_tc_complexity_heatmap(): Create comparative heatmaps complexity differences calculate_isoform_coexpression(): Core correlation calculation single genes calculate_gene_coexpression_all_celltypes(): Multi-cell type correlation analysis analyse_coexpression_conservation(): Identifies conserved vs cell-type-specific patterns detect_isoform_switching(): Identifies antagonistic isoform relationships launch_coexpression_app(): Interactive Shiny application exploration calculate_scht_sparsity(): Analyse memory efficiency SCHT structures generate_qc_report(): Generate comprehensive QC reports","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"id_5-minute-quick-start","dir":"","previous_headings":"","what":"5-Minute Quick Start","title":"ScIsoX","text":"Want get started quickly? ’s minimal example using included example data: ’s ! ’ve just: - Created Single-Cell Hierarchical Tensor (SCHT) - Calculated transcriptomic complexity metrics - Visualised complexity landscape - Identified highly complex genes details, continue tutorials .","code":"# Load ScIsoX library(ScIsoX)  # Load example data data(gene_counts_blood) data(transcript_counts_blood) data(transcript_info) data(sample2stage)  # Create SCHT object with recommended parameters scht_obj <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   qc_params = list(     min_genes_per_cell = 4000,     max_genes_per_cell = 10000,     min_cells_expressing = 0.02,     min_expr = 1e-6   ),   n_hvg = 3000,   verbose = FALSE )  # Calculate complexity metrics tc_results <- calculate_isoform_complexity_metrics(scht_obj, verbose = FALSE)  # Visualise complexity landscape plot_tc_landscape(tc_results, n_label = 5)  # Find genes with high complexity complex_genes <- tc_results$metrics[   tc_results$metrics$intra_cellular_isoform_diversity_class == \"high\" &   tc_results$metrics$inter_cellular_isoform_diversity_class == \"high\", ] print(paste(\"Found\", nrow(complex_genes), \"highly complex genes\"))  # Launch interactive co-expression app (optional) # launch_coexpression_app(scht_obj)"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"input-data-recommendations","dir":"","previous_headings":"Basic Tutorial","what":"Input data recommendations","title":"ScIsoX","text":"accuracy ScIsoX’s complexity metrics contingent upon quality input isoform--cell count matrix. Users aware artefacts library preparation, sequencing errors, read misalignment can lead spurious identification transcripts, potentially inflating complexity metrics. Rigorous upstream quality control filtering therefore essential. instance, long-read data, several tools can employed collapse redundant transcripts filter artefacts TALON IsoQuant. Similarly, isoform-level quantification short-read data, established tools include Salmon, Kallisto-Bustools, RSEM. performance tools can vary depending dataset, encourage readers consult comprehensive benchmarking studies, Dong et al. long-read RNA-seq Westoby et al. short-read RNA-seq, select appropriate method specific needs. experimental designs multiple batches, recommend applying batch correction using established methods (e.g., Harmony, Seurat’s integration workflow) analysis ScIsoX. data types, starting high-quality reference annotation applying appropriate expression thresholds filter extremely low-abundance isoforms critical. ScIsoX’s internal filtering low-expression genes focus highly variable genes help mitigate impact residual noise, validity novel isoform analysis ultimately depends robust upstream quantification.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"id_1-data-preparation","dir":"","previous_headings":"Basic Tutorial","what":"1. Data Preparation","title":"ScIsoX","text":"ScIsoX works single-cell gene transcript expression matrices. Let’s start setting required data formats:","code":"library(ScIsoX)  # Example data is included with the package data(gene_counts_blood) data(transcript_counts_blood) data(transcript_info) data(sample2stage)  # View the structure of example data str(gene_counts_blood)    # Gene-level count matrix str(transcript_counts_blood)  # Transcript-level count matrix str(transcript_info)      # Transcript annotation information str(sample2stage)         # Cell metadata"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"working-with-your-own-data","dir":"","previous_headings":"Basic Tutorial > 1. Data Preparation","what":"Working with Your Own Data","title":"ScIsoX","text":"","code":"# If working with a GTF file, create transcript information transcript_info <- create_transcript_info(   gtf_path = \"path/to/gencode.gtf\",   remove_version = TRUE  # Remove version numbers from transcript and gene IDs for better compatibility )  # If starting with isoform counts, generate gene counts count_results <- generate_gene_counts(   isoform_counts = your_isoform_matrix,   show_progress = TRUE )  # Extracted output gene_counts <- count_results$gene_counts transcript_counts <- your_isoform_matrix  # Original isoform counts"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"data-attribution","dir":"","previous_headings":"Basic Tutorial","what":"Data Attribution","title":"ScIsoX","text":"example dataset included ScIsoX derived : Wang Q, et al. (2022). Single-cell transcriptomic atlas human endometrium menstrual cycle. Science Advances 8(1):eabg5369. DOI: 10.1126/sciadv.abg5369 data provided CC 4.0 license processed use example data package.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"id_2-quality-control-analysis","dir":"","previous_headings":"Basic Tutorial","what":"2. Quality Control Analysis","title":"ScIsoX","text":"creating SCHT object, analyse distribution genes per cell determine appropriate QC parameters: recommend_qc_parameters() function provides three different QC strategies: MAD_strategy: conservative approach using median ± 3 MAD (Median Absolute Deviation). reduces risk including poor quality cells remaining robust outliers. Interval_90: balanced approach using 5th 95th percentiles. strategy balances stringency dataset preservation. Interval_80: aggressive approach using 10th 90th percentiles. provides stringent filtering higher quality cell selection. can choose strategy best suits dataset use expertise set custom thresholds.","code":"# Visualise genes per cell distribution using example data qc_suggestions <- plot_genes_per_cell_distribution(   gene_counts = gene_counts_blood,   plot_type = \"density\",  # Options: \"density\" or \"hist\"   percentile_cutoffs = c(0.05, 0.95),  # Customise percentile lines to show   return_suggestions = TRUE )  # Get data-driven QC recommendations with multiple strategies qc_recommendations <- recommend_qc_parameters(gene_counts_blood)  # View recommendations print(qc_recommendations) # Select a QC strategy selected_strategy <- qc_recommendations$MAD_strategy  # Conservative approach  # Or use custom parameters based on experience custom_params <- list(   min_genes_per_cell = 300,  # Based on prior knowledge of your dataset   max_genes_per_cell = 5000, # Based on prior knowledge of your dataset   min_cells_expressing = 0.02,   min_expr = 1e-4 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"id_3-create-scht-object","dir":"","previous_headings":"Basic Tutorial","what":"3. Create SCHT Object","title":"ScIsoX","text":"Use QC parameters create Single-Cell Hierarchical Tensor object:","code":"# Using the example data data(gene_counts_blood) data(transcript_counts_blood) data(transcript_info) data(sample2stage)  # This contains cell type information  # Create SCHT object using recommended parameters scht_obj <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   n_hvg = 3000,   qc_params = list(     min_genes_per_cell = 4000,            max_genes_per_cell = 10000,           min_cells_expressing = 0.02,        min_expr = 1e-6   ),   require_cell_type = TRUE,   verbose = TRUE,   sparsity_threshold = 0.4 )  # Examine the SCHT object print(scht_obj) summary(scht_obj)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"id_4-calculate-complexity-metrics","dir":"","previous_headings":"Basic Tutorial","what":"4. Calculate Complexity Metrics","title":"ScIsoX","text":"Calculate seven core complexity metrics flexibility threshold determination: function supports data-driven threshold determination, automatically calculates optimal thresholds based dataset’s distribution, user-defined thresholds based prior knowledge specific research requirements. Data-driven thresholds particularly useful exploratory analysis, custom thresholds may preferred comparative studies specific biological knowledge guides threshold selection.","code":"# Option 1: Calculate transcriptomic complexity metrics with data-driven thresholds tc_results <- calculate_isoform_complexity_metrics(   scht_obj = scht_obj,   data_driven_thresholds = TRUE,  # Automatically determine optimal thresholds from the data   visualise = TRUE,  # Generate threshold determination visualisations   verbose = TRUE )  # Option 2: Calculate with custom thresholds based on prior knowledge custom_thresholds <- list(   intra_cellular_isoform_diversity = 0.5,   inter_cellular_isoform_diversity = 0.5,   intra_cell_type_heterogeneity = 0.3,   inter_cell_type_specificity = 0.7,   intra_cell_type_heterogeneity_variability = 0.4,   inter_cell_type_difference_variability = 0.3,   cell_type_coexpression_variability = 0.4 )  tc_results_custom <- calculate_isoform_complexity_metrics(   scht_obj = scht_obj,   default_thresholds = custom_thresholds,   data_driven_thresholds = FALSE,  # Use provided thresholds instead of data-driven ones   visualise = TRUE,   verbose = TRUE )  # View summary of complexity metrics summary(tc_results)  # Access complexity metrics data frame complexity_df <- tc_results$metrics head(complexity_df)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"id_5-basic-visualisation","dir":"","previous_headings":"Basic Tutorial","what":"5. Basic Visualisation","title":"ScIsoX","text":"Create standard visualisations exploring transcriptomic complexity:","code":"# Create complexity landscape plot with default settings landscape_plot <- plot_tc_landscape(   tc_results = tc_results,   x_metric = \"inter_cellular_isoform_diversity\",   y_metric = \"inter_cell_type_specificity\",   highlight_genes = NULL,  # Optionally specify genes to highlight   label_annotation = \"intra_cell_type_heterogeneity\",  # Metric used for colour intensity   n_label = 10,  # Number of genes to label   label_direction = \"top\",  # \"top\" or \"bottom\"   use_thresholds = TRUE,  # Use thresholds from tc_results   point_transparency = 0.85 )  # Display the plot print(landscape_plot)  # Create density plot for complexity landscape density_plot <- plot_tc_density(   tc_results = tc_results,   x_metric = \"inter_cellular_isoform_diversity\",   y_metric = \"inter_cell_type_specificity\",   use_thresholds = TRUE )  # Display the plot print(density_plot)  # Visualise diversity comparison diversity_plot <- plot_diversity_comparison(   tc_results = tc_results,   label_top = 10,  # Label top genes below the diagonal   use_thresholds = TRUE )  # Display the plot print(diversity_plot)"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"exploring-genes-with-specific-complexity-patterns","dir":"","previous_headings":"Advanced Usage","what":"Exploring Genes with Specific Complexity Patterns","title":"ScIsoX","text":"Identify genes interesting complexity patterns: find_complexity_pattern() function enables identify genes matching specific combinations complexity classifications across multiple dimensions. can specify many criteria needed sort results metric interest. select_genes_of_interest() function provides simpler interface filtering genes based single classification dimension, useful quickly isolating genes specific characteristics.","code":"# Find genes with high intra-cellular diversity and cell type specificity complex_genes <- find_complexity_pattern(   tc_results$metrics,   pattern = list(     intra_cellular_isoform_diversity_class = \"Strong Isoform Co-expression\",     inter_cell_type_specificity_class = \"Cell-Type-Specific Isoform Expression\"   ),   top_n = 20,   sort_by = \"inter_cell_type_specificity\"  # Sort by this metric )  # Select genes with high cellular heterogeneity heterogeneous_genes <- select_genes_of_interest(   tc_results$metrics,   category = \"High Cellular Heterogeneity\",   column = \"intra_cell_type_heterogeneity_class\",   top_n = 15,   sort_by = \"intra_cell_type_heterogeneity\"  # Sort by most heterogeneous )  # Compare metrics for selected genes gene_comparison <- compare_gene_metrics(   tc_metrics = tc_results,   gene_names = heterogeneous_genes,   include_mean = TRUE  # Include mean values for easier comparison )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"multi-dimensional-complexity-visualisation","dir":"","previous_headings":"Advanced Usage","what":"Multi-dimensional Complexity Visualisation","title":"ScIsoX","text":"Create advanced visualisations multi-dimensional complexity analysis: visualisations provide different perspectives gene complexity. radar charts particularly useful comparing multiple metrics simultaneously, ridge plots reveal distribution metric across dataset cell types.","code":"# Create dual diversity comparison plot diversity_plot <- plot_diversity_comparison(   tc_results = tc_results,   label_top = 15,  # Number of genes to label   point_transparency = 0.85,   use_thresholds = TRUE )  # Create radar chart for selected genes radar_plot <- plot_complexity_radar(   tc_metrics = tc_results,   genes = complex_genes[1:5],  # Compare up to 5 genes   scale_type = \"per_metric\"  # Options: \"global\", \"per_metric\", or \"none\" )  # Create ridge plots for visualising complexity distributions ridge_plot <- plot_complexity_ridges(   tc_results = tc_results,   type = \"global\",  # Options: \"global\" or \"cell_type\"   metrics = NULL,  # NULL will use all metrics, or specify a subset   scale_values = TRUE )  # Create cell type-specific ridge plots ct_ridges <- plot_complexity_ridges(   tc_results = tc_results,   type = \"cell_type\",   n_celltypes = 5,  # Maximum number of cell types to show   label_y_axis = FALSE )  # Create radar charts for a single gene across cell types single_gene_radar <- plot_single_gene_radar_cell_type(   tc_results = tc_results,   gene_name = complex_genes[1],   metrics = NULL,  # NULL will use default metrics, or specify custom metrics   scale_values = TRUE )  # Compare multiple genes across cell types with radar charts multi_gene_radar <- plot_compare_multiple_genes_radar_cell_type(   tc_results = tc_results,   gene_names = complex_genes[1:3],   cell_types = NULL,  # NULL will auto-detect, or specify cell types   metrics = NULL,  # NULL will use default metrics   scale_type = \"per_cell_type\",  # Options: \"global\" or \"per_cell_type\"   ncol = 3  # Number of columns in the grid layout )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"isoform-usage-analysis","dir":"","previous_headings":"Advanced Usage","what":"Isoform Usage Analysis","title":"ScIsoX","text":"Analyse isoform usage patterns genes interest: functions help understand isoform usage dynamics: plot_isoform_coexpression() reveals correlations isoforms, indicating coordinated mutually exclusive expression plot_isoform_profile() shows relative abundance isoform across cell types plot_isoform_transitions() particularly useful developmental trajectories ordered progressions, showing isoform usage changes across stages","code":"# Find a gene with multiple isoforms for demonstration multi_iso_genes <- names(which(table(transcript_info$gene_name) > 2)) if(length(multi_iso_genes) > 0) {   example_gene <- multi_iso_genes[1]      # Create heatmap for isoform co-expression   coexp_heatmap <- plot_isoform_coexpression(     scht_obj = scht_obj,     gene = example_gene,     display_numbers = TRUE  # Show correlation values in cells   )      # Create stacked bar chart for isoform usage across cell types   isoform_profile <- plot_isoform_profile(     scht_obj = scht_obj,     gene = example_gene,     cell_type_order = NULL,  # Optional ordering of cell types     min_prop = 0.05,  # Minimum proportion to display     color_palette = NULL  # Optional custom colour palette   )      # Create line plot for isoform transitions across cell types   # Get actual cell types from the data   cell_types <- sort(unique(scht_obj$cell_info$cell_type))   if(length(cell_types) >= 2) {     transition_plot <- plot_isoform_transitions(       scht_obj = scht_obj,       gene = example_gene,       cell_type_order = cell_types,  # Use actual cell types       min_prop = 0.05,  # Minimum proportion to display       smooth = TRUE,  # Apply smoothing to lines       color_palette = NULL  # Optional custom colour palette     )   } }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"comparing-complexity-across-conditions","dir":"","previous_headings":"Advanced Usage","what":"Comparing Complexity Across Conditions","title":"ScIsoX","text":"experiments comparing different conditions: comparative functions designed experimental designs multiple conditions: plot_compare_tc_density_difference() highlights regions complexity landscape genes shift conditions plot_compare_tc_complexity_heatmap() creates heatmaps visualising multiple complexity metrics changes across different groups conditions. function offers different ways select genes interest, including variance-based selection (genes highest variation across conditions), magnitude-based selection (genes largest absolute changes), custom selection (specific genes interest).","code":"# For demonstration, we'll simulate different conditions by subsetting our data # In practice, you would have separate datasets for each condition  # Create subsets to simulate conditions (e.g., different developmental stages) stages <- unique(sample2stage$cell_type) if(length(stages) >= 2) {   # Create SCHT objects for different stages/conditions   stage1_cells <- rownames(sample2stage)[sample2stage$cell_type == stages[1]]   stage2_cells <- rownames(sample2stage)[sample2stage$cell_type == stages[2]]      # Create subset SCHT objects (in practice, these would be your different conditions)   # Note: This is for demonstration only   scht_stage1 <- create_scht(     gene_counts = gene_counts_blood[, stage1_cells],     transcript_counts = transcript_counts_blood[, stage1_cells],     transcript_info = transcript_info,     cell_info = sample2stage[stage1_cells, , drop = FALSE],     n_hvg = 1000,  # Fewer HVGs for smaller dataset     qc_params = list(       min_genes_per_cell = 2000,  # Adjusted for subset       max_genes_per_cell = 8000,       min_cells_expressing = 0.05,       min_expr = 1e-6     ),     verbose = FALSE   )      # Calculate complexity metrics   tc_results_stage1 <- calculate_isoform_complexity_metrics(scht_stage1, verbose = FALSE)   tc_results_stage2 <- tc_results_stage1  # For demo purposes      # Create a list of results   tc_results_list <- list(     Stage1 = tc_results_stage1,     Stage2 = tc_results_stage2  # In practice, calculate separately   )      # Compare complexity (demonstration with same data)   # In practice, these would show real differences between conditions   diff_plot <- plot_compare_tc_density_difference(     tc_results_list = tc_results_list,     group_names = c(\"Stage 1\", \"Stage 2\"),     x_metric = \"inter_cellular_isoform_diversity\",     y_metric = \"inter_cell_type_specificity\",     grid_size = 50  # Lower resolution for demo   ) }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"co-expression-analysis","dir":"","previous_headings":"Advanced Usage","what":"Co-expression Analysis","title":"ScIsoX","text":"ScIsoX provides comprehensive tools analysing isoform co-expression patterns: co-expression analysis suite provides: - Correlation analysis: Calculate pairwise correlations isoforms - Conservation patterns: Identify conserved, variable, mixed patterns across cell types - Isoform switching: Detect antagonistic isoform relationships - Interactive exploration: Shiny app heatmaps, statistics, export functionality","code":"# Find genes with multiple isoforms for co-expression analysis multi_iso_genes <- names(which(table(transcript_info$gene_name) > 2))  if(length(multi_iso_genes) > 0) {   # Calculate co-expression for a single gene   coexp_result <- calculate_isoform_coexpression(     scht_obj = scht_obj,     gene = multi_iso_genes[1],     method = \"pearson\",  # Options: \"pearson\", \"spearman\"     min_cells = 10   )      # Analyse co-expression across all cell types   multi_coexp <- calculate_gene_coexpression_all_celltypes(     scht_obj = scht_obj,     gene = multi_iso_genes[1],     method = \"pearson\"   ) }  # Identify conservation patterns if(exists(\"multi_coexp\") && length(multi_iso_genes) > 0) {   conservation_results <- analyse_coexpression_conservation(     integrated_scht = scht_obj,     gene = multi_iso_genes[1],     method = \"pearson\",     min_cells = 10,     consistency_threshold = 0.7,     correlation_threshold = 0.3   )      # View conservation summary   print(conservation_results$summary)      # Plot conservation summary   plot_conservation_summary(     conservation_results,     output_file = \"conservation_summary.pdf\",     width = 8,     height = 6   ) }  # Detect isoform switching (antagonistic relationships) if(exists(\"coexp_result\")) {   switching_results <- detect_isoform_switching(     cor_result = coexp_result,     threshold = -0.3,     strong_threshold = -0.5   )      # View switching pairs   if(switching_results$n_switching_pairs > 0) {     print(switching_results$switching_pairs)   } }  # Calculate co-expression statistics if(exists(\"coexp_result\")) {   coexp_stats <- calculate_coexpression_stats(     cor_result = coexp_result,     include_pairwise = TRUE   )   print(paste(\"Mean correlation:\", round(coexp_stats$mean_correlation, 3)))   print(paste(\"Positive correlations:\", coexp_stats$pct_positive, \"%\")) }  # Export co-expression results if(exists(\"multi_coexp\")) {   export_coexpression_results(     coexpr_result = multi_coexp,     output_prefix = \"coexpression_analysis\",     formats = c(\"csv\", \"rds\")   ) }  # Launch interactive Shiny application launch_coexpression_app(scht_obj)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"performance-analysis--quality-control","dir":"","previous_headings":"Advanced Usage","what":"Performance Analysis & Quality Control","title":"ScIsoX","text":"Monitor performance generate comprehensive QC reports: functions help : - Understand memory usage: See SCHT’s hierarchical structure saves memory - Monitor performance: Track processing time memory utilisation - Quality control: Generate detailed reports data quality filtering results - Compare efficiency: Demonstrate advantages naive tensor approaches","code":"# Analyse SCHT sparsity and memory efficiency sparsity_stats <- calculate_scht_sparsity(scht_obj) print(sparsity_stats)  # Compare with cell type-specific analysis ct_sparsity <- calculate_ct_scht_sparsity(scht_obj)  # Generate comprehensive QC report generate_qc_report(   scht_obj = scht_obj,   output_dir = \"qc_reports\",   dataset_name = \"my_dataset\",   include_plots = TRUE,   include_summary_stats = TRUE )  # Analyse sparsity across different data representations sparsity_comparison <- analyse_sparsity_for_table(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   scht_obj = scht_obj,   dataset_name = \"Blood Cell Example Data\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"visualisation-gallery","dir":"","previous_headings":"","what":"Visualisation Gallery","title":"ScIsoX","text":"ScIsoX provides 13 specialised visualisation functions comprehensive exploration transcriptomic complexity. detailed examples:","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"threshold-visualisations","dir":"","previous_headings":"Visualisation Gallery","what":"Threshold Visualisations","title":"ScIsoX","text":"","code":"# View threshold determination plots from complexity calculation if(tc_results$visualise) {   plot_threshold_visualisations(     threshold_plots = tc_results$threshold_plots,     ncol = 3,     title = \"Threshold Determination for Complexity Metrics\"   ) }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"complexity-landscape-plots","dir":"","previous_headings":"Visualisation Gallery","what":"Complexity Landscape Plots","title":"ScIsoX","text":"","code":"# Create landscape plot with marginal distributions landscape <- plot_tc_landscape(   tc_results = tc_results,   x_metric = \"inter_cellular_isoform_diversity\",   y_metric = \"inter_cell_type_specificity\",   highlight_genes = names(sort(tc_results$metrics$inter_cellular_isoform_diversity,                                decreasing = TRUE))[1:5],   label_annotation = \"intra_cell_type_heterogeneity\",   n_label = 10,   label_direction = \"top\",  # \"top\" or \"bottom\"   use_thresholds = TRUE,   x_threshold = NULL,  # Use threshold from tc_results   y_threshold = NULL,  # Use threshold from tc_results   point_transparency = 0.85 )  # Create density contour plot density <- plot_tc_density(   tc_results = tc_results,   x_metric = \"inter_cellular_isoform_diversity\",   y_metric = \"inter_cell_type_specificity\",   use_thresholds = TRUE,   x_threshold = 0.6,   y_threshold = 0.6 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"diversity-analysis-plots","dir":"","previous_headings":"Visualisation Gallery","what":"Diversity Analysis Plots","title":"ScIsoX","text":"","code":"# Compare intra- vs inter-cellular diversity diversity_comp <- plot_diversity_comparison(   tc_results = tc_results,   label_top = 20,   point_transparency = 0.85,   use_thresholds = TRUE,   x_threshold = 0.6,   y_threshold = 0.6 )  # Create ridge plots for metric distributions ridge_global <- plot_complexity_ridges(   tc_results = tc_results,   type = \"global\",   metrics = NULL,  # Use all metrics   scale_values = TRUE )  # Cell type-specific ridge plots ridge_ct <- plot_complexity_ridges(   tc_results = tc_results,   type = \"cell_type\",   cell_types = NULL,  # Auto-detect   metrics = c(\"intra_cellular_isoform_diversity\",                \"inter_cellular_isoform_diversity\"),   n_celltypes = 5,   label_y_axis = TRUE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"isoform-co-expression-visualisations","dir":"","previous_headings":"Visualisation Gallery","what":"Isoform Co-expression Visualisations","title":"ScIsoX","text":"","code":"# Find genes with multiple isoforms multi_iso_genes <- names(which(table(transcript_info$gene_name) > 2))  if(length(multi_iso_genes) > 0) {   # Co-expression heatmap   coexp_heatmap <- plot_isoform_coexpression(     scht_obj = scht_obj,     gene = multi_iso_genes[1],     method = \"pearson\",     display_numbers = TRUE,     cluster_rows = TRUE,     cluster_columns = TRUE,     title = NULL  # Auto-generated   )      # Isoform usage profile across cell types   usage_profile <- plot_isoform_profile(     scht_obj = scht_obj,     gene = multi_iso_genes[1],     cell_type_order = NULL,  # Auto-order     min_prop = 0.05,     colour_palette = NULL  # Default palette   )      # Isoform transitions (if ordered cell types)   cell_types <- sort(unique(scht_obj$cell_info$cell_type))   if(length(cell_types) >= 2) {     transitions <- plot_isoform_transitions(       scht_obj = scht_obj,       gene = multi_iso_genes[1],       cell_type_order = cell_types,       selected_isoforms = NULL,  # All isoforms       min_prop = 0.05,       smooth = TRUE,       colour_palette = NULL     )   } }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"radar-charts-for-multi-dimensional-comparison","dir":"","previous_headings":"Visualisation Gallery","what":"Radar Charts for Multi-dimensional Comparison","title":"ScIsoX","text":"","code":"# Compare top complex genes complex_genes <- names(sort(tc_results$metrics$inter_cellular_isoform_diversity,                             decreasing = TRUE))[1:5]  # Multi-gene radar chart if(requireNamespace(\"ggradar\", quietly = TRUE)) {   radar_multi <- plot_complexity_radar(     tc_metrics = tc_results,     genes = complex_genes,     scale_type = \"global\"  # \"global\", \"per_metric\", or \"none\"   )      # Single gene across cell types   radar_single <- plot_single_gene_radar_cell_type(     tc_results = tc_results,     gene_name = complex_genes[1],     metrics = NULL,  # Default metrics     scale_values = TRUE   )      # Multiple genes across cell types   radar_compare <- plot_compare_multiple_genes_radar_cell_type(     tc_results = tc_results,     gene_names = complex_genes[1:3],     cell_types = NULL,  # All cell types     metrics = NULL,     scale_type = \"per_cell_type\",     ncol = 3   ) }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"comparative-analysis-visualisations","dir":"","previous_headings":"Visualisation Gallery","what":"Comparative Analysis Visualisations","title":"ScIsoX","text":"","code":"# For comparing conditions (requires multiple tc_results) # Example with simulated conditions if(length(unique(sample2stage$cell_type)) >= 2) {   # Create comparison list (in practice, use different conditions)   tc_results_list <- list(     Baseline = tc_results,     Treatment = tc_results  # Would be different condition   )      # Density difference plots   density_diff <- plot_compare_tc_density_difference(     tc_results_list = tc_results_list,     group_names = c(\"Baseline\", \"Treatment\"),     pair_indices = list(c(1, 2)),     x_metric = \"inter_cellular_isoform_diversity\",     y_metric = \"inter_cell_type_specificity\",     grid_size = 50   )      # Complexity heatmaps   if(requireNamespace(\"ComplexHeatmap\", quietly = TRUE)) {     heatmap_comp <- plot_compare_tc_complexity_heatmap(       tc_results_list = tc_results_list,       groups = c(\"Baseline\", \"Treatment\"),       metrics = c(\"intra_cellular_isoform_diversity\",                    \"inter_cellular_isoform_diversity\"),       n_top_genes = 30,       selection_method = \"variance\",       cluster_genes = TRUE,       show_changes = TRUE     )          # Display specific metric heatmap     print(heatmap_comp$heatmaps$intra_cellular_isoform_diversity)   } }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"co-expression-pattern-visualisations","dir":"","previous_headings":"Visualisation Gallery","what":"Co-expression Pattern Visualisations","title":"ScIsoX","text":"","code":"# Plot co-expression across cell types if(exists(\"multi_coexp\") && length(multi_coexp$cell_types) > 0) {   coexp_pattern <- plot_coexpression_across_celltypes(     coexpr_all_result = multi_coexp,     pair_selection = \"all\",  # \"all\", \"switching\", \"conserved\"     threshold = 0.3   )   print(coexp_pattern) }  # Cell type similarity based on co-expression if(exists(\"multi_coexp\") && length(multi_coexp$cell_types) >= 2) {   # Extract correlation matrices   cor_list <- lapply(multi_coexp$cell_types, function(x) x$cor_matrix)      # Calculate similarity   ct_similarity <- calculate_celltype_coexpression_similarity(     correlation_list = cor_list,     method = \"correlation\"  # \"correlation\", \"euclidean\", \"manhattan\"   )      # Visualise with hierarchical clustering   hc <- hclust(ct_similarity)   plot(hc, main = \"Cell Type Similarity Based on Co-expression Patterns\") }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"export-visualisations","dir":"","previous_headings":"Visualisation Gallery","what":"Export Visualisations","title":"ScIsoX","text":"","code":"# Save plots to PDF pdf(\"scisox_visualisations.pdf\", width = 10, height = 8)  # Add your plots here print(landscape) print(diversity_comp) print(ridge_global)  dev.off()  # Save individual plots ggsave(\"complexity_landscape.pdf\", landscape, width = 10, height = 8) ggsave(\"diversity_comparison.pdf\", diversity_comp, width = 8, height = 8)"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"common-issues-and-solutions","dir":"","previous_headings":"Troubleshooting","what":"Common Issues and Solutions","title":"ScIsoX","text":"Memory Issues Large Datasets Problem: R crashes shows high memory usage creating SCHT objects large datasets. Solution: Set sparsity_threshold lower value (e.g., 0.2) force sparse matrix usage Process data batches using smaller values large datasets, pre-filter genes low expression creating SCHT object Missing Cell Type Information Problem: Error missing cell types calculating complexity metrics. Solution: Ensure cell_info data frame contains column named “cell_type” Make sure cell IDs cell_info match column names count matrices Set require_cell_type = FALSE cell type information available Check cell type names contain special characters spaces might cause issues Missing Dependencies Visualisations Problem: Errors trying create visualisations. Solution: Install suggested packages full visualisation support Check specific missing packages mentioned error messages radar charts, ensure ggradar installed GitHub Use requireNamespace(\"package_name\", quietly = TRUE) check needed packages installed Performance Optimisation Problem: Processing slow large datasets. Solution: Use smaller n_hvg values (e.g., 1000-2000) Increase min_cells_expressing threshold focus well-expressed genes Process cell types separately working many cell types Consider pre-filtering dataset include genes interest","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"getting-help","dir":"","previous_headings":"Troubleshooting","what":"Getting Help","title":"ScIsoX","text":"encounter problems addressed , please: Submit issues via GitHub repository R session information (sessionInfo()) Error messages (full traceback possible) minimal reproducible example possible","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"ScIsoX","text":"use ScIsoX research, please cite: Manuscript: Software: BibTeX entry:","code":"ScIsoX: A Multidimensional Framework for Measuring Isoform-Level Transcriptomic Complexity in Single Cells Wu, S and Schmitz, U bioRxiv, 2025 DOI: 10.1101/2025.04.28.650897 url: https://www.biorxiv.org/content/10.1101/2025.04.28.650897v2 Wu, S and Schmitz, U (2025). ScIsoX: Single-Cell Hierarchical Tensor (SCHT) Creation Pipeline and Transcriptomic Complexity Analysis in R. R package version 1.1.1. DOI: 10.5281/zenodo.16569860 @article{Wu2025.04.28.650897,     author = {Wu, Siyuan and Schmitz, Ulf},     doi = {10.1101/2025.04.28.650897},     eprint = {https://www.biorxiv.org/content/early/2025/05/01/2025.04.28.650897.full.pdf},     journal = {bioRxiv},     title = {{ScIsoX}: A Multidimensional Framework for Measuring Isoform-Level Transcriptomic Complexity in Single Cells},     url = {https://www.biorxiv.org/content/early/2025/05/01/2025.04.28.650897},     year = {2025} }"},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"maintainer","dir":"","previous_headings":"Contact & Support","what":"Maintainer","title":"ScIsoX","text":"Siyuan Wu (thaddeus.wu@jcu.edu.au)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"contributors","dir":"","previous_headings":"Contact & Support","what":"Contributors","title":"ScIsoX","text":"Siyuan Wu (James Cook University) Ulf Schmitz (James Cook University)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"reporting-issues","dir":"","previous_headings":"Contact & Support","what":"Reporting Issues","title":"ScIsoX","text":"Please report bugs feature requests via GitHub issue tracker.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"license","dir":"","previous_headings":"Contact & Support","what":"License","title":"ScIsoX","text":"package licensed MIT License.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/index.html","id":"acknowledgments","dir":"","previous_headings":"Contact & Support","what":"Acknowledgments","title":"ScIsoX","text":"gratefully acknowledge Wang et al. (2022) making single-cell multiomics data publicly available. example datasets included ScIsoX derived publication: Wang W, et al. (2022). Single-cell multiomics defines tolerogenic extrathymic Aire-expressing populations. Science Advances 8(1):eabg5369. DOI: 10.1126/sciadv.abg5369 datasets used Creative Commons Attribution 4.0 International License (CC 4.0). ScIsoX: Unlocking complexity transcriptome, one cell time.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/analyse_coexpression_conservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyse co-expression conservation across cell types — analyse_coexpression_conservation","title":"Analyse co-expression conservation across cell types — analyse_coexpression_conservation","text":"Analyses conserved co-expression patterns across different cell types, identifying isoform pairs consistent relationships.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/analyse_coexpression_conservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyse co-expression conservation across cell types — analyse_coexpression_conservation","text":"","code":"analyse_coexpression_conservation(   integrated_scht,   gene,   method = \"pearson\",   min_cells = 10,   min_expression = 0,   consistency_threshold = 0.7,   correlation_threshold = 0.3 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/analyse_coexpression_conservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyse co-expression conservation across cell types — analyse_coexpression_conservation","text":"integrated_scht IntegratedSCHT object gene Gene analyse method Correlation method min_cells Minimum cells per cell type min_expression Minimum expression threshold consistency_threshold Proportion cell types needed \"conserved\" classification correlation_threshold Threshold considering correlation significant (default: 0.3)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/analyse_coexpression_conservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyse co-expression conservation across cell types — analyse_coexpression_conservation","text":"Conservation analysis results","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/analyse_sparsity_for_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Comprehensive sparsity analysis for manuscript table — analyse_sparsity_for_table","title":"Comprehensive sparsity analysis for manuscript table — analyse_sparsity_for_table","text":"Generates comprehensive sparsity statistics matching manuscript table format, comparing original matrices, filtered matrices, theoretical tensor, SCHT structure.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/analyse_sparsity_for_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comprehensive sparsity analysis for manuscript table — analyse_sparsity_for_table","text":"","code":"analyse_sparsity_for_table(   gene_counts,   transcript_counts,   transcript_info,   scht_obj,   filtered_gene_counts = NULL,   filtered_transcript_counts = NULL,   dataset_name = \"Dataset\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/analyse_sparsity_for_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comprehensive sparsity analysis for manuscript table — analyse_sparsity_for_table","text":"gene_counts Original gene count matrix transcript_counts Original transcript count matrix transcript_info Transcript information data frame scht_obj SCHT object created create_scht filtered_gene_counts Gene counts QC (optional) filtered_transcript_counts Transcript counts QC (optional) dataset_name Name dataset reporting","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/analyse_sparsity_for_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comprehensive sparsity analysis for manuscript table — analyse_sparsity_for_table","text":"List containing comprehensive sparsity statistics levels","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/analyse_sparsity_for_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comprehensive sparsity analysis for manuscript table — analyse_sparsity_for_table","text":"","code":"if (FALSE) { # \\dontrun{ results <- analyse_sparsity_for_table(   gene_counts = gene_counts,   transcript_counts = transcript_counts,   transcript_info = transcript_info,   scht_obj = scht_obj,   dataset_name = \"Brain Data\" ) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_celltype_coexpression_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate cell type co-expression similarity — calculate_celltype_coexpression_similarity","title":"Calculate cell type co-expression similarity — calculate_celltype_coexpression_similarity","text":"Calculates similarity cell types based co-expression patterns.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_celltype_coexpression_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate cell type co-expression similarity — calculate_celltype_coexpression_similarity","text":"","code":"calculate_celltype_coexpression_similarity(   correlation_list,   method = \"correlation\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_celltype_coexpression_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate cell type co-expression similarity — calculate_celltype_coexpression_similarity","text":"correlation_list List correlation matrices cell type method Distance method: \"correlation\", \"euclidean\", \"manhattan\"","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_celltype_coexpression_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate cell type co-expression similarity — calculate_celltype_coexpression_similarity","text":"Distance matrix cell types","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_coexpression_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate co-expression statistics — calculate_coexpression_stats","title":"Calculate co-expression statistics — calculate_coexpression_stats","text":"Generates comprehensive statistics co-expression analysis results.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_coexpression_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate co-expression statistics — calculate_coexpression_stats","text":"","code":"calculate_coexpression_stats(cor_result, include_pairwise = FALSE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_coexpression_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate co-expression statistics — calculate_coexpression_stats","text":"cor_result Result calculate_isoform_coexpression include_pairwise Include pairwise correlation details","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_coexpression_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate co-expression statistics — calculate_coexpression_stats","text":"list statistical summaries","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_ct_scht_sparsity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sparsity statistics for cell type-specific SCHT — calculate_ct_scht_sparsity","title":"Calculate sparsity statistics for cell type-specific SCHT — calculate_ct_scht_sparsity","text":"Calculates sparsity statistics IntegratedSCHT object, including overall per-cell-type statistics.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_ct_scht_sparsity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sparsity statistics for cell type-specific SCHT — calculate_ct_scht_sparsity","text":"","code":"calculate_ct_scht_sparsity(integrated_scht, verbose = FALSE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_ct_scht_sparsity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sparsity statistics for cell type-specific SCHT — calculate_ct_scht_sparsity","text":"integrated_scht IntegratedSCHT object verbose Print detailed statistics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_ct_scht_sparsity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sparsity statistics for cell type-specific SCHT — calculate_ct_scht_sparsity","text":"list containing overall per-cell-type sparsity statistics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_gene_coexpression_all_celltypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate gene co-expression across all cell types — calculate_gene_coexpression_all_celltypes","title":"Calculate gene co-expression across all cell types — calculate_gene_coexpression_all_celltypes","text":"Calculates co-expression patterns gene across cell types, returning overall cell type-specific correlations.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_gene_coexpression_all_celltypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate gene co-expression across all cell types — calculate_gene_coexpression_all_celltypes","text":"","code":"calculate_gene_coexpression_all_celltypes(   scht_obj,   gene,   method = \"pearson\",   min_cells = 10,   min_expression = 0 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_gene_coexpression_all_celltypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate gene co-expression across all cell types — calculate_gene_coexpression_all_celltypes","text":"scht_obj IntegratedSCHT object cell type information gene Gene name analyse method Correlation method: \"pearson\", \"spearman\", \"kendall\" min_cells Minimum cells per cell type min_expression Minimum mean expression threshold","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_gene_coexpression_all_celltypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate gene co-expression across all cell types — calculate_gene_coexpression_all_celltypes","text":"list containing overall cell type-specific correlations","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_isoform_coexpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate isoform co-expression correlation matrix — calculate_isoform_coexpression","title":"Calculate isoform co-expression correlation matrix — calculate_isoform_coexpression","text":"Calculates correlation matrix isoforms gene using specified correlation method.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_isoform_coexpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate isoform co-expression correlation matrix — calculate_isoform_coexpression","text":"","code":"calculate_isoform_coexpression(   scht_obj,   gene,   method = \"pearson\",   min_cells = 10,   min_expression = 0 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_isoform_coexpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate isoform co-expression correlation matrix — calculate_isoform_coexpression","text":"scht_obj SCHT IntegratedSCHT object gene Gene name analyse method Correlation method: \"pearson\", \"spearman\", \"kendall\" min_cells Minimum number cells required analysis min_expression Minimum mean expression threshold","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_isoform_coexpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate isoform co-expression correlation matrix — calculate_isoform_coexpression","text":"list containing: cor_matrix: Correlation matrix isoforms n_isoforms: Number isoforms n_cells: Number cells method: Correlation method used","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_isoform_coexpression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate isoform co-expression correlation matrix — calculate_isoform_coexpression","text":"","code":"if (FALSE) { # \\dontrun{ # Calculate correlation for a single gene cor_result <- calculate_isoform_coexpression(scht_obj, \"GAPDH\") print(cor_result$cor_matrix) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_isoform_complexity_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate all complexity metrics for all genes in SCHT object — calculate_isoform_complexity_metrics","title":"Calculate all complexity metrics for all genes in SCHT object — calculate_isoform_complexity_metrics","text":"function calculates comprehensive set metrics quantify transcriptomic complexity multiple levels: within cells, across cells, within cell types, across cell types. analyses isoform diversity, cell type specificity, expression patterns provide multidimensional characterisation transcriptomic complexity.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_isoform_complexity_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate all complexity metrics for all genes in SCHT object — calculate_isoform_complexity_metrics","text":"","code":"calculate_isoform_complexity_metrics(   scht_obj,   default_thresholds = list(intra_cellular_isoform_diversity = 0.6,     inter_cellular_isoform_diversity = 0.6, intra_cell_type_heterogeneity = 0.4,     inter_cell_type_specificity = 0.6, intra_cell_type_heterogeneity_variability = 0.5,     inter_cell_type_difference_variability = 0.3, cell_type_coexpression_variability =     0.4),   data_driven_thresholds = TRUE,   visualise = TRUE,   batch_size = 500,   min_samples = 20,   verbose = TRUE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_isoform_complexity_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate all complexity metrics for all genes in SCHT object — calculate_isoform_complexity_metrics","text":"scht_obj Single-Cell Hierarchical Tensor object default_thresholds List default thresholds metric (optional) data_driven_thresholds Whether use data-driven threshold detection (default: TRUE) visualise Whether create visualisations threshold determination (default: TRUE) batch_size Number genes process (default: 500) min_samples Minimum number samples required reliable threshold modelling verbose Whether print detailed progress messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_isoform_complexity_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate all complexity metrics for all genes in SCHT object — calculate_isoform_complexity_metrics","text":"transcriptomic_complexity object (list) containing: metrics: Data frame complexity metrics classifications gene single_cell_type_genes: List genes expressed specific cell types thresholds: thresholds used classification threshold_plots: Visualisations threshold fitting metric na_statistics: Statistics NA value proportions metric performance attribute containing: total_time_sec: Total processing time seconds memory_used_mb: Memory utilised megabytes","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_isoform_complexity_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate all complexity metrics for all genes in SCHT object — calculate_isoform_complexity_metrics","text":"function calculates seven core complexity metrics: Intra-cellular Isoform Diversity: Measures tendency cells co-express multiple isoforms gene Inter-cellular Isoform Diversity: Measures overall diversity isoforms used across entire cell population Intra-cell type Heterogeneity: Measures cell--cell variation isoform usage within cell type Inter-cell type Specificity: Measures differently gene uses isoforms across different cell types Intra-cell type Heterogeneity Variability: Measures whether certain cell types show particularly high cellular heterogeneity Inter-cell type Difference Variability: Measures whether certain cell type pairs show particularly significant differences isoform usage patterns Cell-type-specific Co-expression Variability: Measures whether gene employs different isoform co-expression patterns different cell types metric, classification column created categorise genes based statistically determined thresholds. provides comprehensive complexity profile gene across multiple dimensions. metrics may contain NA values, specific biological meanings: Inter-cell type metrics NA genes expressed one cell type Heterogeneity metrics NA genes insufficient cells per cell type Diversity metrics NA genes single expressed isoform NA values properly handled threshold determination classification.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_scht_sparsity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sparsity statistics for SCHT structure — calculate_scht_sparsity","title":"Calculate sparsity statistics for SCHT structure — calculate_scht_sparsity","text":"Calculates total number elements, non-zero elements, sparsity percentage SCHT object. demonstrates memory efficiency SCHT structure compared alternative representations.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_scht_sparsity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sparsity statistics for SCHT structure — calculate_scht_sparsity","text":"","code":"calculate_scht_sparsity(scht_obj, verbose = FALSE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_scht_sparsity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sparsity statistics for SCHT structure — calculate_scht_sparsity","text":"scht_obj SCHT object created create_scht verbose Print detailed statistics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_scht_sparsity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sparsity statistics for SCHT structure — calculate_scht_sparsity","text":"list containing: n_total: Total number elements SCHT n_nonzero: Number non-zero elements n_zeros: Number zero elements sparsity: Sparsity percentage n_genes: Number genes SCHT gene_stats: Per-gene statistics (verbose)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/calculate_scht_sparsity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sparsity statistics for SCHT structure — calculate_scht_sparsity","text":"","code":"if (FALSE) { # \\dontrun{ # Calculate sparsity for an SCHT object sparsity_stats <- calculate_scht_sparsity(my_scht) print(sparsity_stats) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/compare_gene_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and compare metrics for multiple genes — compare_gene_metrics","title":"Extract and compare metrics for multiple genes — compare_gene_metrics","text":"helper function extracts metrics stored results multiple genes, returns structured data frame comparison. useful preparing data custom visualisations statistical analyses.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/compare_gene_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and compare metrics for multiple genes — compare_gene_metrics","text":"","code":"compare_gene_metrics(tc_metrics, gene_names, include_mean = TRUE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/compare_gene_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and compare metrics for multiple genes — compare_gene_metrics","text":"tc_metrics Transcriptomic complexity results object gene_names Vector gene names extract metrics include_mean Whether include mean values gene (default: TRUE)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/compare_gene_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and compare metrics for multiple genes — compare_gene_metrics","text":"Data frame genes' metrics easy comparison","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/compare_gene_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract and compare metrics for multiple genes — compare_gene_metrics","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have calculated transcriptomic complexity tc_results <- calculate_isoform_complexity_metrics(scht_obj)  # Compare metrics for genes of interest genes_of_interest <- c(\"GENE1\", \"GENE2\", \"GENE3\") comparison_data <- compare_gene_metrics(tc_results, genes_of_interest) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/compare_sparsity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare sparsity across different data representations — compare_sparsity","title":"Compare sparsity across different data representations — compare_sparsity","text":"Compares sparsity memory efficiency SCHT structure original matrices theoretical tensor representations.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/compare_sparsity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare sparsity across different data representations — compare_sparsity","text":"","code":"compare_sparsity(   scht_obj,   original_transcript_counts,   filtered_transcript_counts = NULL )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/compare_sparsity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare sparsity across different data representations — compare_sparsity","text":"scht_obj SCHT object original_transcript_counts Original transcript count matrix filtered_transcript_counts Filtered transcript count matrix (optional)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/compare_sparsity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare sparsity across different data representations — compare_sparsity","text":"Comparison statistics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/create_scht.html","id":null,"dir":"Reference","previous_headings":"","what":"SCHT creation for large datasets with enhanced features — create_scht","title":"SCHT creation for large datasets with enhanced features — create_scht","text":"Creates Single-Cell Hierarchical Tensor raw count data efficient operations large-scale datasets. Supports pre-normalized data comprehensive QC tracking.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/create_scht.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SCHT creation for large datasets with enhanced features — create_scht","text":"","code":"create_scht(   gene_counts,   transcript_counts,   transcript_info,   cell_info = NULL,   n_hvg = 3000,   qc_params = list(min_genes_per_cell = 200, max_genes_per_cell = 20000,     min_cells_expressing = 0.02, min_expr = 1e-04),   require_cell_type = TRUE,   verbose = TRUE,   sparsity_threshold = 0.4,   input_type = c(\"raw_counts\", \"normalised\") )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/create_scht.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SCHT creation for large datasets with enhanced features — create_scht","text":"gene_counts Gene-level counts matrix, data frame, sparse matrix. Row names can either gene IDs (e.g., ENSG00000000001) gene names (e.g., GAPDH). function automatically detects format used handles appropriately. transcript_counts Transcript-level counts matrix, data frame, sparse matrix transcript_info Data frame transcript annotations cell_info Optional data frame cell metadata n_hvg Number highly variable genes select qc_params QC parameters list require_cell_type Whether cell type information required verbose Whether show progress sparsity_threshold Minimum sparsity use sparse representation (0-1) input_type Type input data: \"raw_counts\" \"normalised\" (e.g., TPM, FPKM)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/create_scht.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SCHT creation for large datasets with enhanced features — create_scht","text":"SCHT IntegratedSCHT object following attributes: performance: List containing performance metrics: total_time_sec: Total processing time seconds memory_used_mb: Memory utilised megabytes preprocessing: List containing QC statistics enhanced QC report creation_date: Timestamp object creation package_version: Version ScIsoX used","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/create_scht.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SCHT creation for large datasets with enhanced features — create_scht","text":"","code":"# Load example data data(gene_counts_blood) data(transcript_counts_blood) data(transcript_info) data(sample2stage)  # Example 1: Basic SCHT creation with default parameters scht_basic <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   n_hvg = 2000,   verbose = TRUE ) #> Starting SCHT creation with matrix support... #> Input type: raw_counts #> Checking package dependencies... #> Step 0: Processing input data and converting to optimal format... #> Input processing complete (4.27 sec). Memory usage: 424.60 MB #> Gene counts matrix: 55487 rows x 205 cols (sparse) #> Transcript counts matrix: 142238 rows x 205 cols (sparse)  #> Auto-detected QC parameters using three strategies: #>   MAD Strategy: min=980, max=13756 genes per cell #>   Interval 90: min=4106, max=10648 genes per cell #>   Interval 80: min=4474, max=9663 genes per cell #> Step 1: Performing initial quality control... #> Initial QC complete (0.45 sec). Memory usage: 459.60 MB #> Filtered 37606 genes and 0 transcripts #> Step 2: Filtering poor-quality cells... #> Cell QC complete (0.39 sec). Memory usage: 459.60 MB #> Filtered 0 cells, 205 remaining #> Step 3: Performing CPM normalisation... #> CPM normalisation complete (0.40 sec). Memory usage: 489.80 MB #> Step 4: Performing log2 transformation... #> Matrix format after log transform: #>    class(gene_mat) = dgCMatrix  #>    dim(gene_mat)   = 17881, 205  #>    class(transcript_mat) = dgCMatrix  #>    dim(transcript_mat)   = 142238, 205  #> Log2 transformation complete (0.42 sec). Memory usage: 519.90 MB #> Step 5: Selecting highly variable genes... #> Selecting top highly variable genes (HVGs)... #> Number of genes considered after min cell filter: 17881 #> Selected 2000 highly variable genes. #> HVG selection complete (0.37 sec). Memory usage: 520.10 MB #> Selected 2000 highly variable genes #> Step 6: Creating isoform matrices for HVGs... #> Filtering transcripts to only those belonging to HVGs... #> Number of input var_genes: 2000 #> Number of unique gene names in transcript_info: 77922 #> Converting to standard matrices... #> Created isoform matrices for 1296 genes #> HVGs with single isoform: 670 (removed) #> HVGs with multiple isoforms: 1296 (kept) #> Isoform matrix creation complete (20.61 sec). Memory usage: 523.10 MB #> Created matrices for 1296 genes with multiple isoforms #> Step 7: Building the final SCHT structure... #> SCHT structure building complete (0.41 sec). Memory usage: 523.10 MB #>  #> === Sparsity Analysis for Current Dataset === #>  #> 1. Original Transcript Matrix: #>   Number of genes: 55,487 #>   Number of isoforms: 142,238 #>   Number of cells: 205 #>   Non-zero elements: 2,457,789 #>   Zero elements: 26,701,001 #>   Total elements: 29,158,790 #>   Sparsity: 91.57% #>  #> 2. Filtered Transcript Matrix (Post-QC HVG): #>   Number of genes: 1,296 #>   Number of isoforms: 4,927 #>   Number of cells: 205 #>   Non-zero elements: 49,787 #>   Zero elements: 960,248 #>   Total elements: 1,010,035 #>   Sparsity: 95.07% #>  #> 3. SCHT Structure (Post-QC HVG): #>   Non-zero elements: 49,787 #>   Zero elements: 106,585 #>   Total elements: 156,372 #>   Sparsity: 68.16% #>  #> 4. Naive 3D Tensor (Post-QC HVG): #>   Required dimensions: 1,296 x 27 x 205 #>   Non-zero elements: 49,787 #>   Zero elements: 7,123,573 #>   Total elements: 7,173,360 #>   Sparsity: 99.31% #>  #> 5. Zero Elements Avoided by SCHT: #>   vs Original Matrix: 26,594,416 #>   vs Filtered Matrix: 853,663 #>   vs Naive 3D Tensor: 7,016,988 #>  #> 6. Memory Efficiency Summary: #>   SCHT uses only 0.54% of original matrix size #>   SCHT uses only 15.48% of filtered matrix size #>   SCHT uses only 2.18% of naive tensor size #> Step 8: Generating cell type-specific SCHT structures... #> Cell type-specific structure generation complete (0.56 sec). Memory usage: 528.10 MB #> Step 9: Creating integrated SCHT structure... #> Integration complete (0.48 sec). Memory usage: 528.10 MB #> SCHT creation completed successfully in 30.29 seconds (0.50 minutes) #> Memory utilised: 528.20 MB  # Examine the structure print(scht_basic) #> Integrated SCHT Object #> ===================== #>  #> Original SCHT: #> Single-Cell Hierarchical Tensor (SCHT) object #> Number of genes: 1296 #> Number of cells: 205 #> Total number of transcripts: 4927 #> Mean isoforms per gene: 3.8 #> Overall sparsity: 68.2 % #> Matrix storage type: matrix #>  #> Cell type-specific analysis: #> Number of cell types: 7 #> Cell Types: AEC, HEC, T1_pre_HSC, T2_pre_HSC, E12, E14, Adult_HSC  #>  #> Created: 2025-08-01 03:10:25 summary(scht_basic) #> Integrated SCHT Summary #> ====================== #>  #> Original SCHT Summary: #> ---------------------- #> SCHT Object Summary: #> -------------------- #>   Cells: 205 #>   Genes: 1296 #>   Total transcripts: 4927 #>   Mean isoforms: 3.80 #>  #> Preprocessing Info: #>   HVGs selected: 2000 #>   QC-filtered genes: 37606 #>   QC-filtered transcripts: 0 #>   QC-filtered cells: 0 #>  #> Data characteristics: #>   Sparsity: 68.2% #>   Created: 2025-08-01 03:10:22 #>  #> Cell type-specific Summary: #> ---------------------- #>    cell_type n_genes n_cells #> 1        AEC     809      18 #> 2        HEC    1142      24 #> 3 T1_pre_HSC    1048      26 #> 4 T2_pre_HSC     944      38 #> 5        E12     845      21 #> 6        E14     799      32 #> 7  Adult_HSC     954      44 #>  #> Performance metrics: #>   Total processing time: 30.29 seconds (0.50 minutes) #>   Memory utilised: 528.20 MB #>  #> Note: The actual number of cells for each gene may vary from the shown n_cells, #> as cells with no expression for specific genes are removed from their respective matrices. #> This cell-wise filtering is performed independently for each gene to maintain data quality #> and avoid spurious zero expressions in the cell type-specific analyses.  # Example 2: Using recommended QC parameters # First, get QC recommendations qc_recommendations <- recommend_qc_parameters(gene_counts_blood) print(qc_recommendations$explanation) #> [1] \"MAD_strategy: Uses median +/- 3 MAD, reduces risk of including poor quality cells whilst maintaining robustness to outliers\" #> [2] \"Interval_90: Uses 5th and 95th percentiles, balances stringency with dataset preservation\"                                   #> [3] \"Interval_80: Uses 10th and 90th percentiles, provides more aggressive filtering for higher quality cell selection\"            # Use the moderate (90% interval) strategy recommended_params <- qc_recommendations$Interval_90 # Add the missing parameters recommended_params$min_cells_expressing <- 0.02 recommended_params$min_expr <- 1e-6  scht_recommended <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   n_hvg = 1500,   qc_params = recommended_params,   verbose = TRUE ) #> Starting SCHT creation with matrix support... #> Input type: raw_counts #> Checking package dependencies... #> Step 0: Processing input data and converting to optimal format... #> Input processing complete (0.68 sec). Memory usage: 45.30 MB #> Gene counts matrix: 55487 rows x 205 cols (sparse) #> Transcript counts matrix: 142238 rows x 205 cols (sparse) #> Auto-detected QC parameters using three strategies: #>   MAD Strategy: min=980, max=13756 genes per cell #>   Interval 90: min=4106, max=10648 genes per cell #>   Interval 80: min=4474, max=9663 genes per cell #> Step 1: Performing initial quality control... #> Initial QC complete (0.43 sec). Memory usage: 79.60 MB #> Filtered 37606 genes and 0 transcripts #> Step 2: Filtering poor-quality cells... #> Cell QC complete (0.37 sec). Memory usage: 120.20 MB #> Filtered 22 cells, 183 remaining #> Step 3: Performing CPM normalisation... #> CPM normalisation complete (0.36 sec). Memory usage: 147.30 MB #> Step 4: Performing log2 transformation... #> Matrix format after log transform: #>    class(gene_mat) = dgCMatrix  #>    dim(gene_mat)   = 17881, 183  #>    class(transcript_mat) = dgCMatrix  #>    dim(transcript_mat)   = 142238, 183  #> Log2 transformation complete (0.37 sec). Memory usage: 174.40 MB #> Step 5: Selecting highly variable genes... #> Selecting top highly variable genes (HVGs)... #> Number of genes considered after min cell filter: 17114 #> Selected 1500 highly variable genes. #> HVG selection complete (0.36 sec). Memory usage: 174.40 MB #> Selected 1500 highly variable genes #> Step 6: Creating isoform matrices for HVGs... #> Filtering transcripts to only those belonging to HVGs... #> Number of input var_genes: 1500 #> Number of unique gene names in transcript_info: 77922 #> Converting to standard matrices... #> Created isoform matrices for 925 genes #> HVGs with single isoform: 546 (removed) #> HVGs with multiple isoforms: 925 (kept) #> Isoform matrix creation complete (14.61 sec). Memory usage: 175.70 MB #> Created matrices for 925 genes with multiple isoforms #> Step 7: Building the final SCHT structure... #> SCHT structure building complete (0.42 sec). Memory usage: 175.70 MB #>  #> === Sparsity Analysis for Current Dataset === #>  #> 1. Original Transcript Matrix: #>   Number of genes: 55,487 #>   Number of isoforms: 142,238 #>   Number of cells: 205 #>   Non-zero elements: 2,457,789 #>   Zero elements: 26,701,001 #>   Total elements: 29,158,790 #>   Sparsity: 91.57% #>  #> 2. Filtered Transcript Matrix (Post-QC HVG): #>   Number of genes: 925 #>   Number of isoforms: 3,282 #>   Number of cells: 183 #>   Non-zero elements: 26,813 #>   Zero elements: 573,793 #>   Total elements: 600,606 #>   Sparsity: 95.54% #>  #> 3. SCHT Structure (Post-QC HVG): #>   Non-zero elements: 26,813 #>   Zero elements: 51,715 #>   Total elements: 78,528 #>   Sparsity: 65.86% #>  #> 4. Naive 3D Tensor (Post-QC HVG): #>   Required dimensions: 925 x 21 x 183 #>   Non-zero elements: 26,813 #>   Zero elements: 3,527,962 #>   Total elements: 3,554,775 #>   Sparsity: 99.25% #>  #> 5. Zero Elements Avoided by SCHT: #>   vs Original Matrix: 26,649,286 #>   vs Filtered Matrix: 522,078 #>   vs Naive 3D Tensor: 3,476,247 #>  #> 6. Memory Efficiency Summary: #>   SCHT uses only 0.27% of original matrix size #>   SCHT uses only 13.07% of filtered matrix size #>   SCHT uses only 2.21% of naive tensor size #> Step 8: Generating cell type-specific SCHT structures... #> Cell type-specific structure generation complete (0.44 sec). Memory usage: 178.40 MB #> Step 9: Creating integrated SCHT structure... #> Integration complete (0.38 sec). Memory usage: 178.40 MB #> SCHT creation completed successfully in 19.95 seconds (0.33 minutes) #> Memory utilised: 178.40 MB  # Example 3: Manual QC parameters for different experimental designs # For high-depth sequencing or full-length protocols scht_manual <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   n_hvg = 1000,   qc_params = list(     min_genes_per_cell = 4000,            max_genes_per_cell = 10000,           min_cells_expressing = 0.02,        min_expr = 1e-6   ),   verbose = TRUE ) #> Starting SCHT creation with matrix support... #> Input type: raw_counts #> Checking package dependencies... #> Step 0: Processing input data and converting to optimal format... #> Input processing complete (0.71 sec). Memory usage: 45.30 MB #> Gene counts matrix: 55487 rows x 205 cols (sparse) #> Transcript counts matrix: 142238 rows x 205 cols (sparse) #> Auto-detected QC parameters using three strategies: #>   MAD Strategy: min=980, max=13756 genes per cell #>   Interval 90: min=4106, max=10648 genes per cell #>   Interval 80: min=4474, max=9663 genes per cell #> Step 1: Performing initial quality control... #> Initial QC complete (0.53 sec). Memory usage: 79.60 MB #> Filtered 37606 genes and 0 transcripts #> Step 2: Filtering poor-quality cells... #> Cell QC complete (0.43 sec). Memory usage: 118.80 MB #> Filtered 24 cells, 181 remaining #> Step 3: Performing CPM normalisation... #> CPM normalisation complete (0.41 sec). Memory usage: 145.00 MB #> Step 4: Performing log2 transformation... #> Matrix format after log transform: #>    class(gene_mat) = dgCMatrix  #>    dim(gene_mat)   = 17881, 181  #>    class(transcript_mat) = dgCMatrix  #>    dim(transcript_mat)   = 142238, 181  #> Log2 transformation complete (0.44 sec). Memory usage: 171.20 MB #> Step 5: Selecting highly variable genes... #> Selecting top highly variable genes (HVGs)... #> Number of genes considered after min cell filter: 16903 #> Selected 1000 highly variable genes. #> HVG selection complete (0.39 sec). Memory usage: 171.20 MB #> Selected 1000 highly variable genes #> Step 6: Creating isoform matrices for HVGs... #> Filtering transcripts to only those belonging to HVGs... #> Number of input var_genes: 1000 #> Number of unique gene names in transcript_info: 77922 #> Converting to standard matrices... #> Created isoform matrices for 624 genes #> HVGs with single isoform: 355 (removed) #> HVGs with multiple isoforms: 624 (kept) #> Isoform matrix creation complete (10.28 sec). Memory usage: 172.00 MB #> Created matrices for 624 genes with multiple isoforms #> Step 7: Building the final SCHT structure... #> SCHT structure building complete (0.41 sec). Memory usage: 172.00 MB #>  #> === Sparsity Analysis for Current Dataset === #>  #> 1. Original Transcript Matrix: #>   Number of genes: 55,487 #>   Number of isoforms: 142,238 #>   Number of cells: 205 #>   Non-zero elements: 2,457,789 #>   Zero elements: 26,701,001 #>   Total elements: 29,158,790 #>   Sparsity: 91.57% #>  #> 2. Filtered Transcript Matrix (Post-QC HVG): #>   Number of genes: 624 #>   Number of isoforms: 2,154 #>   Number of cells: 181 #>   Non-zero elements: 15,397 #>   Zero elements: 374,477 #>   Total elements: 389,874 #>   Sparsity: 96.05% #>  #> 3. SCHT Structure (Post-QC HVG): #>   Non-zero elements: 15,397 #>   Zero elements: 26,703 #>   Total elements: 42,100 #>   Sparsity: 63.43% #>  #> 4. Naive 3D Tensor (Post-QC HVG): #>   Required dimensions: 624 x 21 x 181 #>   Non-zero elements: 15,397 #>   Zero elements: 2,356,427 #>   Total elements: 2,371,824 #>   Sparsity: 99.35% #>  #> 5. Zero Elements Avoided by SCHT: #>   vs Original Matrix: 26,674,298 #>   vs Filtered Matrix: 347,774 #>   vs Naive 3D Tensor: 2,329,724 #>  #> 6. Memory Efficiency Summary: #>   SCHT uses only 0.14% of original matrix size #>   SCHT uses only 10.80% of filtered matrix size #>   SCHT uses only 1.78% of naive tensor size #> Step 8: Generating cell type-specific SCHT structures... #> Cell type-specific structure generation complete (0.50 sec). Memory usage: 173.60 MB #> Step 9: Creating integrated SCHT structure... #> Integration complete (0.42 sec). Memory usage: 173.60 MB #> SCHT creation completed successfully in 15.64 seconds (0.26 minutes) #> Memory utilised: 173.60 MB  # Example 4: Working with normalised data # If your data is already normalised (TPM/FPKM) # \\donttest{ scht_normalised <- create_scht(   gene_counts = gene_counts_blood,   transcript_counts = transcript_counts_blood,   transcript_info = transcript_info,   cell_info = sample2stage,   n_hvg = 1500,   input_type = \"normalised\",   verbose = TRUE ) #> Starting SCHT creation with matrix support... #> Input type: normalised #> Checking package dependencies... #> Step 0: Processing input data and converting to optimal format... #> Input processing complete (0.71 sec). Memory usage: 45.40 MB #> Gene counts matrix: 55487 rows x 205 cols (sparse) #> Transcript counts matrix: 142238 rows x 205 cols (sparse) #> Auto-detected QC parameters using three strategies: #>   MAD Strategy: min=980, max=13756 genes per cell #>   Interval 90: min=4106, max=10648 genes per cell #>   Interval 80: min=4474, max=9663 genes per cell #> Step 1: Performing initial quality control... #> Initial QC complete (0.46 sec). Memory usage: 79.60 MB #> Filtered 37606 genes and 0 transcripts #> Step 2: Filtering poor-quality cells... #> Cell QC complete (0.39 sec). Memory usage: 79.60 MB #> Filtered 0 cells, 205 remaining #> Step 3: Skipping CPM normalisation (data already normalised)... #> Step 4: Performing log2 transformation... #> Matrix format after log transform: #>    class(gene_mat) = dgCMatrix  #>    dim(gene_mat)   = 17881, 205  #>    class(transcript_mat) = dgCMatrix  #>    dim(transcript_mat)   = 142238, 205  #> Log2 transformation complete (0.42 sec). Memory usage: 109.70 MB #> Step 5: Selecting highly variable genes... #> Selecting top highly variable genes (HVGs)... #> Number of genes considered after min cell filter: 17881 #> Selected 1500 highly variable genes. #> HVG selection complete (0.43 sec). Memory usage: 109.80 MB #> Selected 1500 highly variable genes #> Step 6: Creating isoform matrices for HVGs... #> Filtering transcripts to only those belonging to HVGs... #> Number of input var_genes: 1500 #> Number of unique gene names in transcript_info: 77922 #> Converting to standard matrices... #> Created isoform matrices for 912 genes #> HVGs with single isoform: 559 (removed) #> HVGs with multiple isoforms: 912 (kept) #> Isoform matrix creation complete (15.89 sec). Memory usage: 111.00 MB #> Created matrices for 912 genes with multiple isoforms #> Step 7: Building the final SCHT structure... #> SCHT structure building complete (0.40 sec). Memory usage: 111.00 MB #>  #> === Sparsity Analysis for Current Dataset === #>  #> 1. Original Transcript Matrix: #>   Number of genes: 55,487 #>   Number of isoforms: 142,238 #>   Number of cells: 205 #>   Non-zero elements: 2,457,789 #>   Zero elements: 26,701,001 #>   Total elements: 29,158,790 #>   Sparsity: 91.57% #>  #> 2. Filtered Transcript Matrix (Post-QC HVG): #>   Number of genes: 912 #>   Number of isoforms: 3,334 #>   Number of cells: 205 #>   Non-zero elements: 29,566 #>   Zero elements: 653,904 #>   Total elements: 683,470 #>   Sparsity: 95.67% #>  #> 3. SCHT Structure (Post-QC HVG): #>   Non-zero elements: 29,566 #>   Zero elements: 58,606 #>   Total elements: 88,172 #>   Sparsity: 66.47% #>  #> 4. Naive 3D Tensor (Post-QC HVG): #>   Required dimensions: 912 x 14 x 205 #>   Non-zero elements: 29,566 #>   Zero elements: 2,587,874 #>   Total elements: 2,617,440 #>   Sparsity: 98.87% #>  #> 5. Zero Elements Avoided by SCHT: #>   vs Original Matrix: 26,642,395 #>   vs Filtered Matrix: 595,298 #>   vs Naive 3D Tensor: 2,529,268 #>  #> 6. Memory Efficiency Summary: #>   SCHT uses only 0.30% of original matrix size #>   SCHT uses only 12.90% of filtered matrix size #>   SCHT uses only 3.37% of naive tensor size #> Step 8: Generating cell type-specific SCHT structures... #> Cell type-specific structure generation complete (0.46 sec). Memory usage: 114.00 MB #> Step 9: Creating integrated SCHT structure... #> Integration complete (0.39 sec). Memory usage: 114.00 MB #> SCHT creation completed successfully in 21.07 seconds (0.35 minutes) #> Memory utilised: 114.00 MB # }  # Example 5: Accessing SCHT components # Get list of cell types cell_types <- names(scht_basic) print(cell_types) #> [1] \"original_results\"   \"cell_type_matrices\"  # Access specific cell type data if (\"AEC\" %in% cell_types) {   aec_data <- scht_basic[[\"AEC\"]]   print(paste(\"AEC dimensions:\", paste(dim(aec_data), collapse=\" x \"))) }  # Get highly variable genes used hvgs <- attr(scht_basic, \"hvg_genes\") print(head(hvgs)) #> NULL print(paste(\"Total HVGs:\", length(hvgs))) #> [1] \"Total HVGs: 0\"  # Check transcript usage per gene transcript_usage <- attr(scht_basic, \"transcript_gene_map\") print(head(transcript_usage)) #> NULL"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/create_transcript_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Create transcript information data frame from GTF file — create_transcript_info","title":"Create transcript information data frame from GTF file — create_transcript_info","text":"Imports GTF file creates standardised transcript information data frame use SCHT pipeline. Can optionally remove version numbers transcript gene IDs.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/create_transcript_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create transcript information data frame from GTF file — create_transcript_info","text":"","code":"create_transcript_info(gtf_path, remove_version = TRUE, progress = TRUE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/create_transcript_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create transcript information data frame from GTF file — create_transcript_info","text":"gtf_path Character string specifying path GTF file remove_version Logical indicating whether remove version numbers transcript gene IDs (default: TRUE) progress Logical indicating whether show progress messages (default: TRUE)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/create_transcript_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create transcript information data frame from GTF file — create_transcript_info","text":"data frame containing transcript information columns: transcript_id: Transcript identifier transcript_name: Transcript name gene_id: Gene identifier gene_name: Gene name transcript_type: Type transcript (e.g., protein_coding) gene_type: Type gene","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/create_transcript_info.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create transcript information data frame from GTF file — create_transcript_info","text":"","code":"if (FALSE) { # \\dontrun{ # With version number removal (default) transcript_info <- create_transcript_info(\"path/to/gencode.gtf\")  # Without version number removal transcript_info <- create_transcript_info(\"path/to/gencode.gtf\",                                          remove_version = FALSE) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/detect_isoform_switching.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect isoform switching patterns — detect_isoform_switching","title":"Detect isoform switching patterns — detect_isoform_switching","text":"Identifies potential isoform switching events based negative correlations isoforms.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/detect_isoform_switching.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect isoform switching patterns — detect_isoform_switching","text":"","code":"detect_isoform_switching(cor_result, threshold = -0.3, strong_threshold = -0.5)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/detect_isoform_switching.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect isoform switching patterns — detect_isoform_switching","text":"cor_result Result calculate_isoform_coexpression threshold Correlation threshold switching detection (default: -0.3) strong_threshold Threshold strong switching (default: -0.5)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/detect_isoform_switching.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect isoform switching patterns — detect_isoform_switching","text":"list containing switching pairs statistics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-both_tails_inflated_threshold_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Both tails-inflated threshold detection method — .both_tails_inflated_threshold_method","title":"Both tails-inflated threshold detection method — .both_tails_inflated_threshold_method","text":"Specialised implementation tails-inflated distributions properly handles non-tails component find appropriate threshold.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-both_tails_inflated_threshold_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Both tails-inflated threshold detection method — .both_tails_inflated_threshold_method","text":"","code":".both_tails_inflated_threshold_method(   analysis_values,   preprocessing,   verbose = FALSE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-both_tails_inflated_threshold_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Both tails-inflated threshold detection method — .both_tails_inflated_threshold_method","text":"analysis_values Processed values analyse preprocessing Preprocessing result verbose Whether print detailed messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-both_tails_inflated_threshold_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Both tails-inflated threshold detection method — .both_tails_inflated_threshold_method","text":"List containing threshold method details","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-build_scht.html","id":null,"dir":"Reference","previous_headings":"","what":"Build SCHT structure — .build_scht","title":"Build SCHT structure — .build_scht","text":"Creates final SCHT object structure efficient data handling memory management.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-build_scht.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build SCHT structure — .build_scht","text":"","code":".build_scht(   isoform_list,   transcript_info,   n_cells,   cell_info = NULL,   min_expr,   verbose = TRUE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-build_scht.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build SCHT structure — .build_scht","text":"isoform_list List gene-wise isoform expressions transcript_info Transcript annotation data n_cells Number cells dataset cell_info Optional cell metadata min_expr Minimum expression threshold verbose Whether show progress","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-build_scht.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build SCHT structure — .build_scht","text":"SCHT object attributes","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_cell_type_coexpression_variability.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CV of cell-type-specific co-expression varaibility — .calculate_cell_type_coexpression_variability","title":"Calculate CV of cell-type-specific co-expression varaibility — .calculate_cell_type_coexpression_variability","text":"function calculates coefficient variation mean intra-cellular diversity across cell types. High values indicate gene employs dramatically different isoform co-expression patterns different cell types.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_cell_type_coexpression_variability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CV of cell-type-specific co-expression varaibility — .calculate_cell_type_coexpression_variability","text":"","code":".calculate_cell_type_coexpression_variability(scht_obj, gene)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_cell_type_coexpression_variability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CV of cell-type-specific co-expression varaibility — .calculate_cell_type_coexpression_variability","text":"scht_obj Single-Cell Hierarchical Tensor object gene Gene name analyse","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_cell_type_coexpression_variability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate CV of cell-type-specific co-expression varaibility — .calculate_cell_type_coexpression_variability","text":"List containing CV cell type-specific mean IDI values","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_cell_type_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate cell type-specific metrics for a gene — .calculate_cell_type_metrics","title":"Calculate cell type-specific metrics for a gene — .calculate_cell_type_metrics","text":"function calculates comprehensive set diversity heterogeneity metrics cell type. enables detailed comparison isoform usage patterns across different cell populations, revealing tissue-specific regulatory mechanisms.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_cell_type_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate cell type-specific metrics for a gene — .calculate_cell_type_metrics","text":"","code":".calculate_cell_type_metrics(scht_obj, gene)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_cell_type_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate cell type-specific metrics for a gene — .calculate_cell_type_metrics","text":"scht_obj Single-Cell Hierarchical Tensor object gene Gene name analyse","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_cell_type_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate cell type-specific metrics for a gene — .calculate_cell_type_metrics","text":"List cell type-specific metrics, NULL insufficient data","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cell_type_difference_variability.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CV of inter-cell type difference — .calculate_inter_cell_type_difference_variability","title":"Calculate CV of inter-cell type difference — .calculate_inter_cell_type_difference_variability","text":"function calculates coefficient variation pairwise Jensen-Shannon distances cell types. High values indicate certain cell type pairs exhibit much dramatic differences isoform usage others, suggesting specialised functional distinctions specific cell populations.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cell_type_difference_variability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CV of inter-cell type difference — .calculate_inter_cell_type_difference_variability","text":"","code":".calculate_inter_cell_type_difference_variability(specificity_result)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cell_type_difference_variability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CV of inter-cell type difference — .calculate_inter_cell_type_difference_variability","text":"specificity_result Result .calculate_inter_cell_type_specificity()","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cell_type_difference_variability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate CV of inter-cell type difference — .calculate_inter_cell_type_difference_variability","text":"Coefficient variation cell type difference distances","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cell_type_specificity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate inter-cell type specificity (cell type specificity) — .calculate_inter_cell_type_specificity","title":"Calculate inter-cell type specificity (cell type specificity) — .calculate_inter_cell_type_specificity","text":"function calculates differently gene uses isoforms across different cell types using Jensen-Shannon distance. measures cell type-specificity isoform usage patterns.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cell_type_specificity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate inter-cell type specificity (cell type specificity) — .calculate_inter_cell_type_specificity","text":"","code":".calculate_inter_cell_type_specificity(scht_obj, gene)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cell_type_specificity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate inter-cell type specificity (cell type specificity) — .calculate_inter_cell_type_specificity","text":"scht_obj Single-Cell Hierarchical Tensor object gene Gene name analyse","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cell_type_specificity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate inter-cell type specificity (cell type specificity) — .calculate_inter_cell_type_specificity","text":"List containing cell type specificity related information","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cellular_isoform_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate inter-cellular isoform diversity index (IDI) — .calculate_inter_cellular_isoform_diversity","title":"Calculate inter-cellular isoform diversity index (IDI) — .calculate_inter_cellular_isoform_diversity","text":"function calculates diversity isoform usage across entire cell population, using average expression levels. captures population-level diversity (inter-cellular) measures overall diversity isoforms used across entire cell population.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cellular_isoform_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate inter-cellular isoform diversity index (IDI) — .calculate_inter_cellular_isoform_diversity","text":"","code":".calculate_inter_cellular_isoform_diversity(iso_mat)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cellular_isoform_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate inter-cellular isoform diversity index (IDI) — .calculate_inter_cellular_isoform_diversity","text":"iso_mat Matrix isoform expression, rows = isoforms, columns = cells","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_inter_cellular_isoform_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate inter-cellular isoform diversity index (IDI) — .calculate_inter_cellular_isoform_diversity","text":"Inter-cellular isoform diversity index","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cell_type_heterogeneity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate intra-cell type cellular heterogeneity — .calculate_intra_cell_type_heterogeneity","title":"Calculate intra-cell type cellular heterogeneity — .calculate_intra_cell_type_heterogeneity","text":"function measures cell--cell variation isoform usage patterns within cell type. High values indicate substantial cellular heterogeneity within cell type, suggesting subpopulations distinct isoform preferences.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cell_type_heterogeneity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate intra-cell type cellular heterogeneity — .calculate_intra_cell_type_heterogeneity","text":"","code":".calculate_intra_cell_type_heterogeneity(cell_type_mat)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cell_type_heterogeneity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate intra-cell type cellular heterogeneity — .calculate_intra_cell_type_heterogeneity","text":"cell_type_mat Matrix isoform expression specific cell type","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cell_type_heterogeneity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate intra-cell type cellular heterogeneity — .calculate_intra_cell_type_heterogeneity","text":"Average Jensen-Shannon distance cells within cell type","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cell_type_heterogeneity_variability.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CV of intra-cell type heterogeneity — .calculate_intra_cell_type_heterogeneity_variability","title":"Calculate CV of intra-cell type heterogeneity — .calculate_intra_cell_type_heterogeneity_variability","text":"function calculates coefficient variation intra-cell_type heterogeneity values across different cell types. High values indicate certain cell types exhibit dramatically higher cellular heterogeneity others, suggesting functionally distinct subpopulations within specific cell types.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cell_type_heterogeneity_variability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CV of intra-cell type heterogeneity — .calculate_intra_cell_type_heterogeneity_variability","text":"","code":".calculate_intra_cell_type_heterogeneity_variability(scht_obj, gene)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cell_type_heterogeneity_variability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CV of intra-cell type heterogeneity — .calculate_intra_cell_type_heterogeneity_variability","text":"scht_obj Single-Cell Hierarchical Tensor object gene Gene name analyse","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cell_type_heterogeneity_variability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate CV of intra-cell type heterogeneity — .calculate_intra_cell_type_heterogeneity_variability","text":"List containing CV cell type-specific heterogeneity values","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cellular_isoform_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate intra-cellular isoform diversity index (IDI) — .calculate_intra_cellular_isoform_diversity","title":"Calculate intra-cellular isoform diversity index (IDI) — .calculate_intra_cellular_isoform_diversity","text":"function calculates diversity isoform usage within individual cells, weighting expression level cell. approach captures cell-level diversity (intra-cellular) measures average tendency cells co-express multiple isoforms gene.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cellular_isoform_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate intra-cellular isoform diversity index (IDI) — .calculate_intra_cellular_isoform_diversity","text":"","code":".calculate_intra_cellular_isoform_diversity(iso_mat)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cellular_isoform_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate intra-cellular isoform diversity index (IDI) — .calculate_intra_cellular_isoform_diversity","text":"iso_mat Matrix isoform expression, rows = isoforms, columns = cells","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_intra_cellular_isoform_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate intra-cellular isoform diversity index (IDI) — .calculate_intra_cellular_isoform_diversity","text":"Named list containing intra_cellular_isoform_diversity individual cell IDI values","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_js_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Jensen-Shannon distance between two probability distributions — .calculate_js_distance","title":"Calculate Jensen-Shannon distance between two probability distributions — .calculate_js_distance","text":"Calculates Jensen-Shannon distance two probability vectors, taking advantage efficiency operating non-zero elements.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_js_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Jensen-Shannon distance between two probability distributions — .calculate_js_distance","text":"","code":".calculate_js_distance(p, q)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_js_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Jensen-Shannon distance between two probability distributions — .calculate_js_distance","text":"p First probability vector q Second probability vector","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-calculate_js_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Jensen-Shannon distance between two probability distributions — .calculate_js_distance","text":"Jensen-Shannon distance","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-check_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a package is available — .check_package","title":"Check if a package is available — .check_package","text":"Internal function check package availability informative messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-check_package.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a package is available — .check_package","text":"","code":".check_package(pkg_name, stop_if_missing = FALSE, install_message = NULL)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-check_package.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a package is available — .check_package","text":"pkg_name Name package check stop_if_missing Logical, whether stop execution package missing install_message Optional custom installation message","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-check_package.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a package is available — .check_package","text":"Logical indicating whether package available","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-classify_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create classification labels for each core metric — .classify_genes","title":"Create classification labels for each core metric — .classify_genes","text":"function classifies genes based complexity metrics. creates meaningful category labels dimension complexity. NA values preserved represent biologically meaningful cases cell type-specific expression single isoform expression.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-classify_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create classification labels for each core metric — .classify_genes","text":"","code":".classify_genes(metrics_df, thresholds)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-classify_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create classification labels for each core metric — .classify_genes","text":"metrics_df Data frame containing calculated metrics thresholds List threshold values classification","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-classify_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create classification labels for each core metric — .classify_genes","text":"Data frame added classification columns","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-create_SCHT.html","id":null,"dir":"Reference","previous_headings":"","what":"Create SCHT structure — .create_SCHT","title":"Create SCHT structure — .create_SCHT","text":"Creates Single-Cell Hierarchical Tensor structure efficient data handling large datasets.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-create_SCHT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create SCHT structure — .create_SCHT","text":"","code":".create_SCHT(   transcript_mat_final,   var_genes,   transcript_info_filtered,   verbose = TRUE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-create_SCHT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create SCHT structure — .create_SCHT","text":"transcript_mat_final Normalised transcript expression var_genes Selected highly variable genes transcript_info_filtered Filtered transcript information verbose Whether show progress","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-create_SCHT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create SCHT structure — .create_SCHT","text":"list containing SCHT structure","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-create_integrated_scht.html","id":null,"dir":"Reference","previous_headings":"","what":"Create integrated SCHT — .create_integrated_scht","title":"Create integrated SCHT — .create_integrated_scht","text":"Creates integrated data structure combining original SCHT cell type-specific analyses efficient memory usage.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-create_integrated_scht.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create integrated SCHT — .create_integrated_scht","text":"","code":".create_integrated_scht(scht_obj, cell_type_result)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-create_integrated_scht.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create integrated SCHT — .create_integrated_scht","text":"scht_obj Original SCHT object cell_type_result cell type-specific analysis results","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-create_integrated_scht.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create integrated SCHT — .create_integrated_scht","text":"IntegratedSCHT object","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_curve_inflection.html","id":null,"dir":"Reference","previous_headings":"","what":"Adaptive curve inflection detection with skewness-based search strategy — .detect_curve_inflection","title":"Adaptive curve inflection detection with skewness-based search strategy — .detect_curve_inflection","text":"Adaptive curve inflection detection skewness-based search strategy","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_curve_inflection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adaptive curve inflection detection with skewness-based search strategy — .detect_curve_inflection","text":"","code":".detect_curve_inflection(analysis_values, verbose = FALSE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_curve_inflection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adaptive curve inflection detection with skewness-based search strategy — .detect_curve_inflection","text":"analysis_values Numeric vector values verbose Logical indicating whether print detailed information","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_curve_inflection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adaptive curve inflection detection with skewness-based search strategy — .detect_curve_inflection","text":"List inflection detection results","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_multimodality.html","id":null,"dir":"Reference","previous_headings":"","what":"Improved multimodality detection — .detect_multimodality","title":"Improved multimodality detection — .detect_multimodality","text":"Uses multiple methods detect multimodality balanced sensitivity specificity","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_multimodality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Improved multimodality detection — .detect_multimodality","text":"","code":".detect_multimodality(values, verbose = FALSE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_multimodality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Improved multimodality detection — .detect_multimodality","text":"values Numeric vector values verbose Logical indicating whether print detailed information","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_multimodality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Improved multimodality detection — .detect_multimodality","text":"Logical indicating distribution multimodal","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_optimal_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Advanced Statistical Threshold Detection System — .detect_optimal_threshold","title":"Advanced Statistical Threshold Detection System — .detect_optimal_threshold","text":"system implements comprehensive approach threshold detection consistent preprocessing optimised handling challenging distributions including multimodality, zero-inflation, extreme skewness.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_optimal_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Advanced Statistical Threshold Detection System — .detect_optimal_threshold","text":"","code":".detect_optimal_threshold(   values,   feature_name = \"feature\",   min_threshold = 0.1,   max_threshold = NULL,   default_threshold = 0.6,   n_bootstrap = 100,   cross_validate = TRUE,   handle_outliers = TRUE,   verbose = FALSE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_optimal_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Advanced Statistical Threshold Detection System — .detect_optimal_threshold","text":"values Vector numeric values analyse feature_name Name feature analysed min_threshold Minimum acceptable threshold value max_threshold Maximum acceptable threshold value (NULL = use max(values)) default_threshold Default threshold use methods fail n_bootstrap Number bootstrap iterations stability assessment cross_validate Whether use cross-validation reliability assessment handle_outliers Whether temporarily exclude extreme outliers verbose Whether print detailed progress messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-detect_optimal_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Advanced Statistical Threshold Detection System — .detect_optimal_threshold","text":"list containing threshold, reliability metrics, method information","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-determine_optimal_thresholds.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine optimal thresholds for all metrics — .determine_optimal_thresholds","title":"Determine optimal thresholds for all metrics — .determine_optimal_thresholds","text":"Determine optimal thresholds metrics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-determine_optimal_thresholds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine optimal thresholds for all metrics — .determine_optimal_thresholds","text":"","code":".determine_optimal_thresholds(   metrics_df,   default_thresholds = list(intra_cellular_isoform_diversity = 0.6,     inter_cellular_isoform_diversity = 0.6, intra_cell_type_heterogeneity = 0.4,     inter_cell_type_specificity = 0.6, intra_cell_type_heterogeneity_variability = 0.5,     inter_cell_type_difference_variability = 0.3, cell_type_coexpression_variability =     0.4),   visualise = TRUE,   min_samples = 20,   verbose = TRUE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-determine_optimal_thresholds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine optimal thresholds for all metrics — .determine_optimal_thresholds","text":"metrics_df Data frame containing calculated metrics default_thresholds List default thresholds metric visualise Whether create visualisations min_samples Minimum number samples required reliable modelling verbose Whether print detailed progress messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-determine_optimal_thresholds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine optimal thresholds for all metrics — .determine_optimal_thresholds","text":"List thresholds, visualisations, statistics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-extreme_skew_threshold_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extreme skewness threshold detection method — .extreme_skew_threshold_method","title":"Extreme skewness threshold detection method — .extreme_skew_threshold_method","text":"Specialised implementation extremely skewed distributions focuses finding reasonable threshold body distribution rather extreme tail.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-extreme_skew_threshold_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extreme skewness threshold detection method — .extreme_skew_threshold_method","text":"","code":".extreme_skew_threshold_method(analysis_values, preprocessing, verbose = FALSE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-extreme_skew_threshold_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extreme skewness threshold detection method — .extreme_skew_threshold_method","text":"analysis_values Processed values analyse preprocessing Preprocessing result verbose Whether print detailed messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-extreme_skew_threshold_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extreme skewness threshold detection method — .extreme_skew_threshold_method","text":"List containing threshold method details","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-find_optimal_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine optimal Yeo-Johnson transformation parameter — .find_optimal_lambda","title":"Determine optimal Yeo-Johnson transformation parameter — .find_optimal_lambda","text":"Determine optimal Yeo-Johnson transformation parameter","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-find_optimal_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine optimal Yeo-Johnson transformation parameter — .find_optimal_lambda","text":"","code":".find_optimal_lambda(values)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-find_optimal_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine optimal Yeo-Johnson transformation parameter — .find_optimal_lambda","text":"values Numeric vector transform","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-find_optimal_lambda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine optimal Yeo-Johnson transformation parameter — .find_optimal_lambda","text":"Optimal lambda parameter","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-generate_cell_type_scht.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cell type-specific SCHT (Optimized Version) — .generate_cell_type_scht","title":"Generate cell type-specific SCHT (Optimized Version) — .generate_cell_type_scht","text":"Creates cell type-specific data structures optimised operations efficient handling large datasets. version inverts loop order memory stack efficient.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-generate_cell_type_scht.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cell type-specific SCHT (Optimized Version) — .generate_cell_type_scht","text":"","code":".generate_cell_type_scht(scht, cell_info, qc_params)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-generate_cell_type_scht.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cell type-specific SCHT (Optimized Version) — .generate_cell_type_scht","text":"scht Original SCHT object cell_info Cell metadata cell type information qc_params QC parameters list","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-generate_cell_type_scht.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cell type-specific SCHT (Optimized Version) — .generate_cell_type_scht","text":"CellTypeSCHT object cell type-specific data","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_colour_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Get color palette with fallback options — .get_colour_palette","title":"Get color palette with fallback options — .get_colour_palette","text":"Internal function get color palettes fallbacks RColorBrewer available","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_colour_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get color palette with fallback options — .get_colour_palette","text":"","code":".get_colour_palette(n, palette_name = \"Set3\")"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_colour_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get color palette with fallback options — .get_colour_palette","text":"n Number colors needed palette_name Name RColorBrewer palette","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_colour_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get color palette with fallback options — .get_colour_palette","text":"Vector colors","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_fallback_colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Get alternative colour palette — .get_fallback_colours","title":"Get alternative colour palette — .get_fallback_colours","text":"Internal function provide fallback colour palettes packages available","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_fallback_colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get alternative colour palette — .get_fallback_colours","text":"","code":".get_fallback_colours(n, type = \"qualitative\")"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_fallback_colours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get alternative colour palette — .get_fallback_colours","text":"n Number colours needed type Type palette (\"sequential\", \"diverging\", \"qualitative\")","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_fallback_colours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get alternative colour palette — .get_fallback_colours","text":"Vector colour codes","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_metric_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get metric-specific classification names — .get_metric_names","title":"Get metric-specific classification names — .get_metric_names","text":"Internal function return classification names different metrics.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_metric_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get metric-specific classification names — .get_metric_names","text":"","code":".get_metric_names(metric)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_metric_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get metric-specific classification names — .get_metric_names","text":"metric Name metric","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_metric_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get metric-specific classification names — .get_metric_names","text":"vector two elements: high low classification names","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_tc_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Get colour palette for transcriptome complexity visualisation — .get_tc_palette","title":"Get colour palette for transcriptome complexity visualisation — .get_tc_palette","text":"Internal function create consistent colour palette visualisations.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_tc_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get colour palette for transcriptome complexity visualisation — .get_tc_palette","text":"","code":".get_tc_palette()"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-get_tc_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get colour palette for transcriptome complexity visualisation — .get_tc_palette","text":"list colour specifications","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-multimodal_threshold_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Improved multimodal threshold detection with enhanced mixture model logic — .multimodal_threshold_method","title":"Improved multimodal threshold detection with enhanced mixture model logic — .multimodal_threshold_method","text":"Improved multimodal threshold detection enhanced mixture model logic","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-multimodal_threshold_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Improved multimodal threshold detection with enhanced mixture model logic — .multimodal_threshold_method","text":"","code":".multimodal_threshold_method(analysis_values, preprocessing, verbose = FALSE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-multimodal_threshold_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Improved multimodal threshold detection with enhanced mixture model logic — .multimodal_threshold_method","text":"analysis_values Processed values analyse preprocessing Preprocessing result verbose Whether print detailed messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-multimodal_threshold_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Improved multimodal threshold detection with enhanced mixture model logic — .multimodal_threshold_method","text":"List containing threshold method details","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-onAttach.html","id":null,"dir":"Reference","previous_headings":"","what":"Package attach hook — .onAttach","title":"Package attach hook — .onAttach","text":"function runs package attached, checking suggested packages providing helpful messages users.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-onAttach.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package attach hook — .onAttach","text":"","code":".onAttach(libname, pkgname)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-onAttach.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package attach hook — .onAttach","text":"libname Library name pkgname Package name","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_cell_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform cell-level quality control — .perform_cell_qc","title":"Perform cell-level quality control — .perform_cell_qc","text":"Identifies removes low-quality cells using matrix operations efficient processing large datasets.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_cell_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform cell-level quality control — .perform_cell_qc","text":"","code":".perform_cell_qc(gene_counts, transcript_counts, qc_params)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_cell_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform cell-level quality control — .perform_cell_qc","text":"gene_counts Gene-level counts (matrix) transcript_counts Transcript-level counts (matrix) qc_params QC parameters list","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_cell_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform cell-level quality control — .perform_cell_qc","text":"list containing filtered data QC metrics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_log_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform log transformation — .perform_log_transform","title":"Perform log transformation — .perform_log_transform","text":"Applies log2(x+1) transformation normalised count data special handling different matrix types.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_log_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform log transformation — .perform_log_transform","text":"","code":".perform_log_transform(gene_counts_norm, transcript_counts_norm, verbose)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_log_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform log transformation — .perform_log_transform","text":"gene_counts_norm Normalised gene counts transcript_counts_norm Normalised transcript counts","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_log_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform log transformation — .perform_log_transform","text":"list containing transformed data","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_normalisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform normalisation — .perform_normalisation","title":"Perform normalisation — .perform_normalisation","text":"Normalises count data counts per million (CPM) using operations maintain memory efficiency.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_normalisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform normalisation — .perform_normalisation","text":"","code":".perform_normalisation(gene_counts_filtered, transcript_counts_filtered)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_normalisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform normalisation — .perform_normalisation","text":"gene_counts_filtered Filtered gene counts transcript_counts_filtered Filtered transcript counts","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_normalisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform normalisation — .perform_normalisation","text":"list containing normalised data","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_qc.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform quality control on genes and transcripts — .perform_qc","title":"Perform quality control on genes and transcripts — .perform_qc","text":"Performs initial quality control using matrix operations filter low-quality genes transcripts.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_qc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform quality control on genes and transcripts — .perform_qc","text":"","code":".perform_qc(gene_counts, transcript_counts, transcript_info, qc_params)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_qc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform quality control on genes and transcripts — .perform_qc","text":"gene_counts Gene-level counts (matrix) transcript_counts Transcript-level counts (matrix) transcript_info Data frame transcript annotations qc_params QC parameters list","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-perform_qc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform quality control on genes and transcripts — .perform_qc","text":"list containing filtered data QC metrics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-prepare_tc_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data for transcriptomic complexity visualisation — .prepare_tc_data","title":"Prepare data for transcriptomic complexity visualisation — .prepare_tc_data","text":"Internal function prepare data plotting.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-prepare_tc_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data for transcriptomic complexity visualisation — .prepare_tc_data","text":"","code":".prepare_tc_data(   tc_results,   x_metric = \"inter_cellular_isoform_diversity\",   y_metric = \"inter_cell_type_specificity\",   highlight_genes = NULL,   label_annotation = \"intra_cell_type_heterogeneity\",   label_top = 10,   label_direction = \"top\",   use_thresholds = TRUE,   x_threshold = 0.6,   y_threshold = 0.6 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-prepare_tc_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data for transcriptomic complexity visualisation — .prepare_tc_data","text":"tc_results Transcriptomic complexity results object metrics data frame x_metric Name metric x-axis y_metric Name metric y-axis highlight_genes Optional vector gene names highlight label_annotation Column name use highlighting/labelling genes label_top Number top genes label highlight_genes provided label_direction Direction selecting genes: \"top\" (highest values) \"bottom\" (lowest values) use_thresholds Whether use thresholds tc_results x_threshold Manual threshold value x-axis y_threshold Manual threshold value y-axis","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-prepare_tc_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data for transcriptomic complexity visualisation — .prepare_tc_data","text":"list containing prepared data derived information","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-preprocess_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced data preprocessing for threshold detection — .preprocess_data","title":"Enhanced data preprocessing for threshold detection — .preprocess_data","text":"function provides comprehensive preprocessing including outlier detection, transformation, distribution classification, standardised handling zero-inflation, tail inflation, extreme skewness, multimodality.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-preprocess_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced data preprocessing for threshold detection — .preprocess_data","text":"","code":".preprocess_data(   values,   handle_outliers = TRUE,   feature_name = \"feature\",   verbose = FALSE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-preprocess_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced data preprocessing for threshold detection — .preprocess_data","text":"values Numeric vector values handle_outliers Whether temporarily exclude extreme outliers feature_name Name feature (messages) verbose Whether print detailed messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-preprocess_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced data preprocessing for threshold detection — .preprocess_data","text":"List containing processed data preprocessing information","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-process_gene_complexity.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a single gene for complexity metrics — .process_gene_complexity","title":"Process a single gene for complexity metrics — .process_gene_complexity","text":"Helper function processes single gene calculate complexity metrics.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-process_gene_complexity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a single gene for complexity metrics — .process_gene_complexity","text":"","code":".process_gene_complexity(scht_obj, gene)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-process_gene_complexity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a single gene for complexity metrics — .process_gene_complexity","text":"scht_obj Single-Cell Hierarchical Tensor object gene Gene name analyse","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-process_gene_complexity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a single gene for complexity metrics — .process_gene_complexity","text":"Data frame row complexity metrics gene, NULL insufficient data","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-process_input_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Process input data with matrix conversion — .process_input_data","title":"Process input data with matrix conversion — .process_input_data","text":"Validates converts input data appropriate matrix format memory-efficient processing large-scale count matrices.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-process_input_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process input data with matrix conversion — .process_input_data","text":"","code":".process_input_data(   gene_counts,   transcript_counts,   transcript_info,   cell_info = NULL,   n_hvg,   qc_params,   require_cell_type = TRUE,   sparsity_threshold = 0.4 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-process_input_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process input data with matrix conversion — .process_input_data","text":"gene_counts Gene-level counts matrix, data frame, sparse matrix transcript_counts Transcript-level counts matrix, data frame, sparse matrix transcript_info Data frame transcript annotations cell_info Optional data frame describing cells n_hvg Number highly variable genes select qc_params QC parameters list require_cell_type Whether cell type information required sparsity_threshold Minimum sparsity convert sparse format (0-1)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-process_input_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process input data with matrix conversion — .process_input_data","text":"list containing validated matrix inputs","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-right_tail_inflated_threshold_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Right tail-inflated threshold detection method — .right_tail_inflated_threshold_method","title":"Right tail-inflated threshold detection method — .right_tail_inflated_threshold_method","text":"Specialised implementation right tail-inflated distributions properly handles non-right tail component find appropriate threshold.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-right_tail_inflated_threshold_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Right tail-inflated threshold detection method — .right_tail_inflated_threshold_method","text":"","code":".right_tail_inflated_threshold_method(   analysis_values,   preprocessing,   verbose = FALSE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-right_tail_inflated_threshold_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Right tail-inflated threshold detection method — .right_tail_inflated_threshold_method","text":"analysis_values Processed values analyse preprocessing Preprocessing result verbose Whether print detailed messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-right_tail_inflated_threshold_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Right tail-inflated threshold detection method — .right_tail_inflated_threshold_method","text":"List containing threshold method details","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-select_hvgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Select highly variable genes using second-moment approach — .select_hvgs","title":"Select highly variable genes using second-moment approach — .select_hvgs","text":"Identifies highly variable genes using matrix operations efficient analysis large datasets. Variance computed subtracting square mean mean squares.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-select_hvgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select highly variable genes using second-moment approach — .select_hvgs","text":"","code":".select_hvgs(gene_mat, n_hvg, qc_params, verbose = TRUE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-select_hvgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select highly variable genes using second-moment approach — .select_hvgs","text":"gene_mat Normalised gene expression matrix. n_hvg Number HVGs select. qc_params QC parameters list; must contain min_cells_expressing. verbose Logical indicating whether display progress messages.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-select_hvgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select highly variable genes using second-moment approach — .select_hvgs","text":"list containing selected HVGs metrics: var_genes Character vector selected HVG names. dispersion Named numeric vector dispersion values (variance--mean ratio). mean_expr Named numeric vector mean expression values selected genes.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-tc_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme for transcriptomic complexity visualisation — .tc_theme","title":"Theme for transcriptomic complexity visualisation — .tc_theme","text":"Internal function create consistent theme plots.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-tc_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme for transcriptomic complexity visualisation — .tc_theme","text":"","code":".tc_theme()"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-tc_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theme for transcriptomic complexity visualisation — .tc_theme","text":"ggplot2 theme object","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-unimodal_threshold_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Unimodal distribution threshold detection method — .unimodal_threshold_method","title":"Unimodal distribution threshold detection method — .unimodal_threshold_method","text":"Implementation unimodal mildly skewed distributions.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-unimodal_threshold_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unimodal distribution threshold detection method — .unimodal_threshold_method","text":"","code":".unimodal_threshold_method(analysis_values, preprocessing, verbose = FALSE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-unimodal_threshold_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unimodal distribution threshold detection method — .unimodal_threshold_method","text":"analysis_values Processed values analyse preprocessing Preprocessing result verbose Whether print detailed messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-unimodal_threshold_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unimodal distribution threshold detection method — .unimodal_threshold_method","text":"List containing threshold method details","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-visualise_threshold_fitting.html","id":null,"dir":"Reference","previous_headings":"","what":"Enhanced visualisation of threshold determination — .visualise_threshold_fitting","title":"Enhanced visualisation of threshold determination — .visualise_threshold_fitting","text":"Enhanced visualisation threshold determination","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-visualise_threshold_fitting.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enhanced visualisation of threshold determination — .visualise_threshold_fitting","text":"","code":".visualise_threshold_fitting(values, threshold, metric_name, model = NULL)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-visualise_threshold_fitting.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enhanced visualisation of threshold determination — .visualise_threshold_fitting","text":"values Vector numeric values threshold Determined threshold value metric_name Name metric (title) model Optional model diagnostics information","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-visualise_threshold_fitting.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enhanced visualisation of threshold determination — .visualise_threshold_fitting","text":"ggplot2 object visualisation","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-yeo_johnson_inverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Inverse Yeo-Johnson transformation — .yeo_johnson_inverse","title":"Inverse Yeo-Johnson transformation — .yeo_johnson_inverse","text":"Inverse Yeo-Johnson transformation","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-yeo_johnson_inverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inverse Yeo-Johnson transformation — .yeo_johnson_inverse","text":"","code":".yeo_johnson_inverse(x, lambda)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-yeo_johnson_inverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inverse Yeo-Johnson transformation — .yeo_johnson_inverse","text":"x Transformed values lambda Transformation parameter","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-yeo_johnson_inverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inverse Yeo-Johnson transformation — .yeo_johnson_inverse","text":"Original scale values","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-yeo_johnson_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Yeo-Johnson transformation — .yeo_johnson_transform","title":"Apply Yeo-Johnson transformation — .yeo_johnson_transform","text":"Apply Yeo-Johnson transformation","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-yeo_johnson_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Yeo-Johnson transformation — .yeo_johnson_transform","text":"","code":".yeo_johnson_transform(x, lambda)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-yeo_johnson_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Yeo-Johnson transformation — .yeo_johnson_transform","text":"x Numeric vector transform lambda Transformation parameter","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-yeo_johnson_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Yeo-Johnson transformation — .yeo_johnson_transform","text":"Transformed values","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-zero_inflated_threshold_method.html","id":null,"dir":"Reference","previous_headings":"","what":"Zero-inflated threshold detection method — .zero_inflated_threshold_method","title":"Zero-inflated threshold detection method — .zero_inflated_threshold_method","text":"Specialised implementation zero-inflated distributions properly handles non-zero component find appropriate threshold.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-zero_inflated_threshold_method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zero-inflated threshold detection method — .zero_inflated_threshold_method","text":"","code":".zero_inflated_threshold_method(   analysis_values,   preprocessing,   verbose = FALSE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-zero_inflated_threshold_method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zero-inflated threshold detection method — .zero_inflated_threshold_method","text":"analysis_values Processed values analyse preprocessing Preprocessing result verbose Whether print detailed messages","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/dot-zero_inflated_threshold_method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zero-inflated threshold detection method — .zero_inflated_threshold_method","text":"List containing threshold method details","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/export_coexpression_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Export co-expression analysis results — export_coexpression_results","title":"Export co-expression analysis results — export_coexpression_results","text":"Exports comprehensive co-expression analysis results files.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/export_coexpression_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export co-expression analysis results — export_coexpression_results","text":"","code":"export_coexpression_results(   coexpr_result,   output_prefix,   formats = c(\"csv\", \"rds\") )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/export_coexpression_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export co-expression analysis results — export_coexpression_results","text":"coexpr_result Co-expression analysis results output_prefix Prefix output files formats Export formats: \"csv\", \"xlsx\", \"rds\"","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/find_complexity_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Find multi-dimensional complexity patterns — find_complexity_pattern","title":"Find multi-dimensional complexity patterns — find_complexity_pattern","text":"function identifies genes match specific combinations complexity classifications across multiple dimensions. enables discovery genes interesting unusual complexity profiles.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/find_complexity_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find multi-dimensional complexity patterns — find_complexity_pattern","text":"","code":"find_complexity_pattern(   metrics_df,   pattern,   top_n = 20,   sort_by = \"inter_cell_type_specificity\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/find_complexity_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find multi-dimensional complexity patterns — find_complexity_pattern","text":"metrics_df Data frame containing complexity metrics pattern Named list category patterns match top_n Number top genes select sort_by Column sort (default: \"inter_cell_type_specificity\")","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/find_complexity_pattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find multi-dimensional complexity patterns — find_complexity_pattern","text":"Vector selected gene names","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/gene_counts_blood.html","id":null,"dir":"Reference","previous_headings":"","what":"Blood dataset gene expression counts — gene_counts_blood","title":"Blood dataset gene expression counts — gene_counts_blood","text":"Gene-level expression count matrix blood single-cell RNA-seq data. data derived Wang et al. (2022) study alternative splicing hematopoietic stem cell formation.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/gene_counts_blood.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Blood dataset gene expression counts — gene_counts_blood","text":"data frame","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/gene_counts_blood.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Blood dataset gene expression counts — gene_counts_blood","text":"Wang et al. (2022). Science Advances 8(1):eabg5369. Data https://zenodo.org/records/5706781. Licensed CC 4.0.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/gene_counts_blood.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Blood dataset gene expression counts — gene_counts_blood","text":"Wang F, et al. (2022). Single-cell architecture functional requirement alternative splicing hematopoietic stem cell formation. Science Advances 8(1):eabg5369.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/generate_gene_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate gene counts from annotated isoform counts — generate_gene_counts","title":"Generate gene counts from annotated isoform counts — generate_gene_counts","text":"Generates gene-level counts transcript information fully annotated isoform count matrix. function converts isoform-level expression matrix gene-level expression matrix summing counts isoforms belonging gene. function assumes isoform names format \"GENE-NUMBER\" (e.g., \"Fasl-201\").","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/generate_gene_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate gene counts from annotated isoform counts — generate_gene_counts","text":"isoform_counts Matrix data frame isoform-level counts isoform names rownames. row represents isoform, column represents cell sample. show_progress Logical indicating whether show progress messages (default: TRUE).","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/generate_gene_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate gene counts from annotated isoform counts — generate_gene_counts","text":"list containing two elements: gene_counts: Data frame gene-level counts rows genes columns cells/samples transcript_info: Data frame columns: transcript_id: Original isoform identifier transcript_name: Original isoform name gene_id: Associated gene identifier gene_name: Associated gene name","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/generate_gene_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate gene counts from annotated isoform counts — generate_gene_counts","text":"function performs following steps: Validates input format extracts gene names isoform identifiers Converts data efficient format processing Aggregates isoform counts gene level Creates necessary transcript information Returns results format compatible SCHT analysis","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/generate_gene_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate gene counts from annotated isoform counts — generate_gene_counts","text":"","code":"# IMPORTANT: This function requires transcript names in \"GeneName-TranscriptID\" format # For example: \"Sox2-201\", \"Nanog-001\", \"Oct4-202\"  # Example 1: Create synthetic data with correct naming format # Simulate an isoform count matrix set.seed(123) n_genes <- 50 n_isoforms <- 120  # Some genes have multiple isoforms n_cells <- 100  # Generate transcript names in required format gene_names <- paste0(\"Gene\", 1:n_genes) transcript_names <- character(n_isoforms) idx <- 1  for (i in 1:n_genes) {   n_iso <- sample(1:4, 1)  # 1-4 isoforms per gene   for (j in 1:n_iso) {     transcript_names[idx] <- paste0(gene_names[i], \"-\", sprintf(\"%03d\", j))     idx <- idx + 1     if (idx > n_isoforms) break   }   if (idx > n_isoforms) break }  # Remove empty entries and create count matrix transcript_names <- transcript_names[transcript_names != \"\"] isoform_counts <- matrix(   rpois(length(transcript_names) * n_cells, lambda = 5),   nrow = length(transcript_names),   dimnames = list(transcript_names,                  paste0(\"Cell\", 1:n_cells)) )  # Generate gene counts result <- generate_gene_counts(isoform_counts, show_progress = FALSE)  # Check results print(paste(\"Input transcripts:\", nrow(isoform_counts))) #> [1] \"Input transcripts: 118\" print(paste(\"Output genes:\", nrow(result$gene_counts))) #> [1] \"Output genes: 50\" print(head(result$transcript_info)) #>           transcript_id transcript_name gene_id gene_name #> Gene1-001     Gene1-001       Gene1-001   Gene1     Gene1 #> Gene1-002     Gene1-002       Gene1-002   Gene1     Gene1 #> Gene1-003     Gene1-003       Gene1-003   Gene1     Gene1 #> Gene2-001     Gene2-001       Gene2-001   Gene2     Gene2 #> Gene2-002     Gene2-002       Gene2-002   Gene2     Gene2 #> Gene2-003     Gene2-003       Gene2-003   Gene2     Gene2  # Example 2: Working with real data that needs reformatting # If your transcript names are not in the required format: # \\donttest{ # Load data data(transcript_counts_blood)  # Current format: ENSMUST00000193812 # Need to convert to: GeneName-TranscriptID format # This would require mapping transcript IDs to gene names first  # For demonstration, create a small subset with correct format demo_transcripts <- matrix(   rpois(500, lambda = 3),   nrow = 10,   dimnames = list(     c(\"Actb-201\", \"Actb-202\", \"Gapdh-201\", \"Gapdh-202\", \"Gapdh-203\",       \"Tubb5-201\", \"Ppia-201\", \"Ppia-202\", \"B2m-201\", \"Hprt-201\"),     paste0(\"Cell\", 1:50)   ) )  demo_result <- generate_gene_counts(demo_transcripts) #> Starting gene count generation... #> Converting data format... #> Calculating gene-level counts... #> Creating output format... #> Process completed successfully. print(demo_result$gene_counts[, 1:5]) #>       Cell1 Cell2 Cell3 Cell4 Cell5 #> Actb      7     6     9     4     9 #> Gapdh     8    15     6     7     5 #> Tubb5     2     1     4     5     1 #> Ppia      3     7     9    11     7 #> B2m       0     1     6     5     0 #> Hprt      4     3     4     1     1 # }  # Example 3: Understanding the pseudo-transcript_info # Even without create_transcript_info(), this function creates # a basic transcript_info for gene-transcript mapping print(\"Pseudo-transcript_info structure:\") #> [1] \"Pseudo-transcript_info structure:\" print(str(result$transcript_info)) #> 'data.frame':\t118 obs. of  4 variables: #>  $ transcript_id  : chr  \"Gene1-001\" \"Gene1-002\" \"Gene1-003\" \"Gene2-001\" ... #>  $ transcript_name: chr  \"Gene1-001\" \"Gene1-002\" \"Gene1-003\" \"Gene2-001\" ... #>  $ gene_id        : chr  \"Gene1\" \"Gene1\" \"Gene1\" \"Gene2\" ... #>  $ gene_name      : chr  \"Gene1\" \"Gene1\" \"Gene1\" \"Gene2\" ... #> NULL  # This ensures compatibility with downstream SCHT analysis # The mapping can be used directly in create_scht()"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/generate_qc_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate comprehensive QC report from SCHT object — generate_qc_report","title":"Generate comprehensive QC report from SCHT object — generate_qc_report","text":"Creates detailed quality control report including data characteristics, filtering statistics, HVG selection, sparsity analysis, performance metrics.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/generate_qc_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate comprehensive QC report from SCHT object — generate_qc_report","text":"","code":"generate_qc_report(   scht_obj,   output_dir = \"qc_report\",   format = c(\"html\", \"markdown\"),   dataset_name = NULL )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/generate_qc_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate comprehensive QC report from SCHT object — generate_qc_report","text":"scht_obj SCHT object enhanced QC information output_dir Directory save report files format Output format: \"html\" \"markdown\" dataset_name Optional dataset name include output filename (e.g., \"blood_data\")","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/generate_qc_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate comprehensive QC report from SCHT object — generate_qc_report","text":"Path generated report","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/install_scisox_suggests.html","id":null,"dir":"Reference","previous_headings":"","what":"Install all suggested packages for ScIsoX — install_scisox_suggests","title":"Install all suggested packages for ScIsoX — install_scisox_suggests","text":"function helps users install optional packages enhance ScIsoX functionality. provides convenient way ensure visualisation analysis features available.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/install_scisox_suggests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install all suggested packages for ScIsoX — install_scisox_suggests","text":"","code":"install_scisox_suggests(include_bioc = TRUE, include_github = TRUE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/install_scisox_suggests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install all suggested packages for ScIsoX — install_scisox_suggests","text":"include_bioc Logical, whether include Bioconductor packages (default: TRUE) include_github Logical, whether include GitHub packages (default: TRUE)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/install_scisox_suggests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install all suggested packages for ScIsoX — install_scisox_suggests","text":"NULL (invisibly). Messages indicate installation progress.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/install_scisox_suggests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install all suggested packages for ScIsoX — install_scisox_suggests","text":"","code":"if (FALSE) { # \\dontrun{ # Install all suggested packages install_scisox_suggests()  # Install only CRAN packages install_scisox_suggests(include_bioc = FALSE, include_github = FALSE) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/launch_coexpression_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Interactive Co-expression Analysis Application — launch_coexpression_app","title":"Interactive Co-expression Analysis Application — launch_coexpression_app","text":"Launch Shiny application interactive exploration isoform co-expression patterns","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/launch_coexpression_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interactive Co-expression Analysis Application — launch_coexpression_app","text":"","code":"launch_coexpression_app(scht_obj, port = NULL, launch.browser = TRUE)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/launch_coexpression_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interactive Co-expression Analysis Application — launch_coexpression_app","text":"scht_obj IntegratedSCHT object created create_scht() port Port number app (default: NULL, uses random port) launch.browser Whether launch browser automatically (default: TRUE)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/launch_coexpression_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interactive Co-expression Analysis Application — launch_coexpression_app","text":"Launches Shiny application","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_coexpression_across_celltypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot co-expression patterns across cell types — plot_coexpression_across_celltypes","title":"Plot co-expression patterns across cell types — plot_coexpression_across_celltypes","text":"Visualizes co-expression patterns vary across different cell types specific gene.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_coexpression_across_celltypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot co-expression patterns across cell types — plot_coexpression_across_celltypes","text":"","code":"plot_coexpression_across_celltypes(   coexpr_all_result,   pair_selection = \"all\",   threshold = 0.3 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_coexpression_across_celltypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot co-expression patterns across cell types — plot_coexpression_across_celltypes","text":"coexpr_all_result Result calculate_gene_coexpression_all_celltypes pair_selection pairs show: \"\", \"switching\", \"conserved\" threshold Threshold pair selection","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_coexpression_across_celltypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot co-expression patterns across cell types — plot_coexpression_across_celltypes","text":"ggplot object","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_multiple_genes_radar_cell_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Create radar charts by cell type with better label handling — plot_compare_multiple_genes_radar_cell_type","title":"Create radar charts by cell type with better label handling — plot_compare_multiple_genes_radar_cell_type","text":"Creates separate radar chart cell type comparing multiple genes, improved label handling single combined legend plots. function useful comparing multiple genes across different cell types structured grid format.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_multiple_genes_radar_cell_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create radar charts by cell type with better label handling — plot_compare_multiple_genes_radar_cell_type","text":"","code":"plot_compare_multiple_genes_radar_cell_type(   tc_results,   gene_names,   cell_types = NULL,   metrics = NULL,   scale_type = \"per_cell_type\",   ncol = 3 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_multiple_genes_radar_cell_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create radar charts by cell type with better label handling — plot_compare_multiple_genes_radar_cell_type","text":"tc_results Transcriptomic complexity results object gene_names Vector gene names compare cell_types Vector cell types include (NULL, detected cell types used) metrics Vector metric names include radar chart scale_type scale metrics: \"global\" (across cell types) \"per_cell_type\" (cell type independently). Default \"per_cell_type\" ncol Number columns arranging plots grid","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_multiple_genes_radar_cell_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create radar charts by cell type with better label handling — plot_compare_multiple_genes_radar_cell_type","text":"combined plot grid informative legend clean labels","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_multiple_genes_radar_cell_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create radar charts by cell type with better label handling — plot_compare_multiple_genes_radar_cell_type","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have calculated transcriptomic complexity tc_results <- calculate_isoform_complexity_metrics(scht_obj)  # Create multi-gene radar plots across cell types with default per-cell-type scaling genes_of_interest <- c(\"GENE1\", \"GENE2\", \"GENE3\") plot_compare_multiple_genes_radar_cell_type(tc_results, genes_of_interest)  # Create plots with global scaling for direct comparison across cell types plot_compare_multiple_genes_radar_cell_type(tc_results, genes_of_interest, scale_type = \"global\") } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_tc_complexity_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create heatmaps for transcriptome complexity metrics across groups using ComplexHeatmap — plot_compare_tc_complexity_heatmap","title":"Create heatmaps for transcriptome complexity metrics across groups using ComplexHeatmap — plot_compare_tc_complexity_heatmap","text":"function creates heatmaps visualising multiple complexity metrics across different groups conditions. can also show changes metrics consecutive groups. function supports different methods selecting genes display.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_tc_complexity_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create heatmaps for transcriptome complexity metrics across groups using ComplexHeatmap — plot_compare_tc_complexity_heatmap","text":"","code":"plot_compare_tc_complexity_heatmap(   tc_results_list,   groups = NULL,   metrics = c(\"intra_cellular_isoform_diversity\", \"inter_cellular_isoform_diversity\",     \"intra_cell_type_heterogeneity\", \"inter_cell_type_specificity\",     \"intra_cell_type_heterogeneity_variability\",     \"inter_cell_type_difference_variability\", \"cell_type_coexpression_variability\"),   n_top_genes = 50,   selection_method = \"variance\",   custom_genes = NULL,   cluster_genes = FALSE,   show_changes = TRUE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_tc_complexity_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create heatmaps for transcriptome complexity metrics across groups using ComplexHeatmap — plot_compare_tc_complexity_heatmap","text":"tc_results_list List transcriptomic complexity results objects groups Vector names group (NULL, generic names used) metrics Vector metric names include heatmaps n_top_genes Number top genes include heatmaps selection_method Method selecting genes (\"variance\", \"magnitude\", \"custom\") custom_genes Vector custom gene names use selection_method \"custom\" cluster_genes Whether cluster genes heatmaps show_changes Whether create separate heatmaps showing changes groups","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_tc_complexity_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create heatmaps for transcriptome complexity metrics across groups using ComplexHeatmap — plot_compare_tc_complexity_heatmap","text":"list containing: heatmaps List ComplexHeatmap objects metric change_heatmaps List ComplexHeatmap objects showing changes groups metric_matrices List matrices metric values change_matrices List matrices change values top_genes Vector selected gene names selection_method Method used gene selection","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_tc_complexity_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create heatmaps for transcriptome complexity metrics across groups using ComplexHeatmap — plot_compare_tc_complexity_heatmap","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have transcriptomic complexity results for 3 conditions tc_results_list <- list(condition_A = tc_results_A,                          condition_B = tc_results_B,                         condition_C = tc_results_C)                          # Create heatmaps with default settings heatmap_results <- plot_compare_tc_complexity_heatmap(tc_results_list,                    groups = c(\"Condition A\", \"Condition B\", \"Condition C\"))                    # Display the first heatmap heatmap_results$heatmaps$intra_cellular_isoform_diversity  # Use custom gene selection custom_heatmaps <- plot_compare_tc_complexity_heatmap(tc_results_list,                   groups = c(\"Condition A\", \"Condition B\", \"Condition C\"),                   selection_method = \"custom\",                   custom_genes = c(\"GENE1\", \"GENE2\", \"GENE3\")) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_tc_density_difference.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare transcriptomic complexity density differences between groups — plot_compare_tc_density_difference","title":"Compare transcriptomic complexity density differences between groups — plot_compare_tc_density_difference","text":"function calculates visualises density differences genes 2D metric space different groups conditions. helps identify regions gene distributions shift groups.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_tc_density_difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare transcriptomic complexity density differences between groups — plot_compare_tc_density_difference","text":"","code":"plot_compare_tc_density_difference(   tc_results_list,   group_names = NULL,   pair_indices = NULL,   x_metric = \"inter_cellular_isoform_diversity\",   y_metric = \"inter_cell_type_specificity\",   grid_size = 100,   main_title = \"Density Differences Between Groups\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_tc_density_difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare transcriptomic complexity density differences between groups — plot_compare_tc_density_difference","text":"tc_results_list List transcriptomic complexity results objects group_names Vector names group (NULL, generic names used) pair_indices List integer pairs groups compare (NULL, consecutive pairs used) x_metric Name metric x-axis (default: \"inter_cellular_isoform_diversity\") y_metric Name metric y-axis (default: \"inter_cell_type_specificity\") grid_size Size density estimation grid (higher = detailed slower) main_title Main title combined plot","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_tc_density_difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare transcriptomic complexity density differences between groups — plot_compare_tc_density_difference","text":"ggplot object (single comparison) patchwork combined plot (multiple comparisons)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_compare_tc_density_difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare transcriptomic complexity density differences between groups — plot_compare_tc_density_difference","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have transcriptomic complexity results for 3 conditions tc_results_list <- list(condition_A = tc_results_A,                          condition_B = tc_results_B,                         condition_C = tc_results_C)                          # Compare all consecutive pairs plot_compare_tc_density_difference(tc_results_list,                               group_names = c(\"Condition A\", \"Condition B\", \"Condition C\"))                               # Compare specific pairs plot_compare_tc_density_difference(tc_results_list,                              group_names = c(\"Condition A\", \"Condition B\", \"Condition C\"),                              pair_indices = list(c(1, 3), c(2, 3))) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_complexity_radar.html","id":null,"dir":"Reference","previous_headings":"","what":"Create gene complexity radar chart — plot_complexity_radar","title":"Create gene complexity radar chart — plot_complexity_radar","text":"Creates radar chart showing multiple complexity metrics selected genes. visualisation provides compact way compare different genes across multiple complexity dimensions simultaneously.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_complexity_radar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create gene complexity radar chart — plot_complexity_radar","text":"","code":"plot_complexity_radar(tc_metrics, genes, scale_type = \"global\")"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_complexity_radar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create gene complexity radar chart — plot_complexity_radar","text":"tc_metrics Data frame calculate_isoform_complexity_metrics() results object genes Vector gene names include scale_type scale metrics: \"global\" (across genes), \"per_metric\" (metric independently), \"none\"","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_complexity_radar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create gene complexity radar chart — plot_complexity_radar","text":"ggplot object can printed saved","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_complexity_radar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create gene complexity radar chart — plot_complexity_radar","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have calculated transcriptomic complexity tc_results <- calculate_isoform_complexity_metrics(scht_obj)  # Create radar plot for genes of interest genes_of_interest <- c(\"GENE1\", \"GENE2\", \"GENE3\") plot_complexity_radar(tc_results, genes_of_interest) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_complexity_ridges.html","id":null,"dir":"Reference","previous_headings":"","what":"Create ridge plots for visualising complexity metrics distributions — plot_complexity_ridges","title":"Create ridge plots for visualising complexity metrics distributions — plot_complexity_ridges","text":"function creates ridge plots visualise distribution complexity metrics either globally cell type. Ridge plots offer compact way compare multiple distributions simultaneously.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_complexity_ridges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create ridge plots for visualising complexity metrics distributions — plot_complexity_ridges","text":"","code":"plot_complexity_ridges(   tc_results,   type = \"global\",   cell_types = NULL,   metrics = NULL,   n_celltypes = 10,   label_y_axis = FALSE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_complexity_ridges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create ridge plots for visualising complexity metrics distributions — plot_complexity_ridges","text":"tc_results Results calculate_isoform_complexity_metrics() type Type plot: \"global\" (across metrics) \"cell_type\" (comparing cell types) cell_types Vector cell types display (cell_type plots, NULL detected) metrics Metrics display (NULL, uses global, core 3 cell_type) n_celltypes Maximum number cell types show auto-detecting label_y_axis Whether show metric labels (cell_type plots)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_complexity_ridges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create ridge plots for visualising complexity metrics distributions — plot_complexity_ridges","text":"ggplot object can printed saved","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_complexity_ridges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create ridge plots for visualising complexity metrics distributions — plot_complexity_ridges","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have calculated transcriptomic complexity tc_results <- calculate_isoform_complexity_metrics(scht_obj)  # Create global ridge plot for all metrics plot_complexity_ridges(tc_results, type = \"global\")  # Create cell type-specific ridge plots for core metrics plot_complexity_ridges(tc_results, type = \"cell_type\") } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_conservation_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a summary visualisation of co-expression conservation — plot_conservation_summary","title":"Create a summary visualisation of co-expression conservation — plot_conservation_summary","text":"Creates bar plots visualisations summarising conservation patterns across cell types.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_conservation_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a summary visualisation of co-expression conservation — plot_conservation_summary","text":"","code":"plot_conservation_summary(   conservation_results,   output_file = \"conservation_summary.pdf\",   width = 8,   height = 6 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_conservation_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a summary visualisation of co-expression conservation — plot_conservation_summary","text":"conservation_results Results analyse_coexpression_conservation output_file Output filename (default: \"conservation_summary.pdf\") width Plot width inches height Plot height inches","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_conservation_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a summary visualisation of co-expression conservation — plot_conservation_summary","text":"Invisible NULL","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_diversity_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Dual diversity comparison plot — plot_diversity_comparison","title":"Dual diversity comparison plot — plot_diversity_comparison","text":"Visualises relationship intra-cellular inter-cellular diversity identify different isoform usage patterns. plot helps identify genes unusual patterns, particularly higher intra-cellular inter-cellular diversity.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_diversity_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dual diversity comparison plot — plot_diversity_comparison","text":"","code":"plot_diversity_comparison(   tc_results,   label_top = 10,   point_transparency = 0.85,   use_thresholds = TRUE,   x_threshold = 0.6,   y_threshold = 0.6 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_diversity_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dual diversity comparison plot — plot_diversity_comparison","text":"tc_results Transcriptomic complexity results object metrics data frame label_top Number top genes (idi_difference) label diagonal line point_transparency Alpha value points (0-1) use_thresholds Whether use thresholds tc_results x_threshold Threshold value x-axis (intra-cellular diversity) y_threshold Threshold value y-axis (inter-cellular diversity)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_diversity_comparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dual diversity comparison plot — plot_diversity_comparison","text":"ggplot object diversity comparison visualization can printed saved","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_diversity_comparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dual diversity comparison plot — plot_diversity_comparison","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have calculated transcriptomic complexity tc_results <- calculate_isoform_complexity_metrics(scht_obj)  # Create diversity comparison plot plot_diversity_comparison(tc_results)  # Label more genes plot_diversity_comparison(tc_results, label_top = 20) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_genes_per_cell_distribution.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot and analyse genes per cell distribution — plot_genes_per_cell_distribution","title":"Plot and analyse genes per cell distribution — plot_genes_per_cell_distribution","text":"Creates detailed visualisation genes per cell distribution calculates suggested quality control parameters. Optimised dense sparse matrices accommodate large-scale single-cell datasets.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_genes_per_cell_distribution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot and analyse genes per cell distribution — plot_genes_per_cell_distribution","text":"","code":"plot_genes_per_cell_distribution(   gene_counts,   plot_type = \"hist\",   percentile_cutoffs = c(0.05, 0.95),   return_suggestions = TRUE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_genes_per_cell_distribution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot and analyse genes per cell distribution — plot_genes_per_cell_distribution","text":"gene_counts matrix gene counts (rows = genes, columns = cells). Supports standard sparse matrices Matrix package. plot_type Character, one \"hist\" (histogram) \"density\" (density plot) percentile_cutoffs Numeric vector percentiles show cutoff lines return_suggestions Logical, whether return suggested QC parameters","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_genes_per_cell_distribution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot and analyse genes per cell distribution — plot_genes_per_cell_distribution","text":"return_suggestions=TRUE, returns list containing: min_genes_per_cell: Suggested minimum genes per cell max_genes_per_cell: Suggested maximum genes per cell median_genes: Median number genes per cell summary_stats: Additional statistics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_coexpression.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap of isoform co-expression patterns using ComplexHeatmap — plot_isoform_coexpression","title":"Create a heatmap of isoform co-expression patterns using ComplexHeatmap — plot_isoform_coexpression","text":"function creates heatmap visualisation showing correlation different isoforms gene. Strong positive correlations suggest coordinated expression, negative correlations indicate mutually exclusive usage. Creates heatmap visualisation isoform co-expression patterns. visualisation companion calculate_isoform_coexpression.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_coexpression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap of isoform co-expression patterns using ComplexHeatmap — plot_isoform_coexpression","text":"","code":"plot_isoform_coexpression(   scht_obj,   gene,   method = \"pearson\",   display_numbers = FALSE,   cluster_rows = TRUE,   cluster_columns = TRUE,   title = NULL )  plot_isoform_coexpression(   scht_obj,   gene,   method = \"pearson\",   display_numbers = FALSE,   cluster_rows = TRUE,   cluster_columns = TRUE,   title = NULL )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_coexpression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap of isoform co-expression patterns using ComplexHeatmap — plot_isoform_coexpression","text":"scht_obj SCHT IntegratedSCHT object gene Gene name visualize method Correlation method: \"pearson\", \"spearman\", \"kendall\" display_numbers Whether show correlation values cluster_rows Whether cluster rows cluster_columns Whether cluster columns title Custom title heatmap","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_coexpression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap of isoform co-expression patterns using ComplexHeatmap — plot_isoform_coexpression","text":"ComplexHeatmap object can printed saved ComplexHeatmap object","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_coexpression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap of isoform co-expression patterns using ComplexHeatmap — plot_isoform_coexpression","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have a Single-Cell Hierarchical Tensor object # Create co-expression heatmap for a gene of interest plot_isoform_coexpression(scht_obj, \"GENE1\")  # With correlation values displayed plot_isoform_coexpression(scht_obj, \"GENE1\", display_numbers = TRUE)  # With custom legend title plot_isoform_coexpression(scht_obj, \"GENE1\", legend_title = \"Co-expression\") } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot stacked isoform usage profiles — plot_isoform_profile","title":"Plot stacked isoform usage profiles — plot_isoform_profile","text":"Creates stacked bar chart showing proportional isoform usage across different cell types developmental stages. visualisation helps identify cell type-specific isoform preferences.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot stacked isoform usage profiles — plot_isoform_profile","text":"","code":"plot_isoform_profile(   scht_obj,   gene,   cell_type_order = NULL,   min_prop = 0.05,   colour_palette = NULL )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot stacked isoform usage profiles — plot_isoform_profile","text":"scht_obj Single-Cell Hierarchical Tensor object gene Gene name analyse cell_type_order Optional vector specifying order cell types min_prop Minimum proportion display (minor isoforms grouped \"\") colour_palette Colour palette use (default: distinct qualitative palette)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot stacked isoform usage profiles — plot_isoform_profile","text":"ggplot object can printed saved","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot stacked isoform usage profiles — plot_isoform_profile","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have a Single-Cell Hierarchical Tensor object # Create isoform profile for a gene of interest plot_isoform_profile(scht_obj, \"GENE1\")  # Specify cell type order (e.g., for developmental trajectory) cell_types <- c(\"Progenitor\", \"Intermediate\", \"Mature\") plot_isoform_profile(scht_obj, \"GENE1\", cell_type_order = cell_types) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot isoform usage transitions across cell types — plot_isoform_transitions","title":"Plot isoform usage transitions across cell types — plot_isoform_transitions","text":"Creates line plot showing isoform proportions change across different cell types. visualisation particularly useful developmental trajectories ordered cell type progressions.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot isoform usage transitions across cell types — plot_isoform_transitions","text":"","code":"plot_isoform_transitions(   scht_obj,   gene,   cell_type_order,   selected_isoforms = NULL,   min_prop = 0.05,   smooth = TRUE,   colour_palette = NULL )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot isoform usage transitions across cell types — plot_isoform_transitions","text":"scht_obj Single-Cell Hierarchical Tensor object gene Gene name analyse cell_type_order Vector specifying order cell types (required plot) selected_isoforms Optional vector isoform names plot. provided, isoforms shown (ignoring min_prop) min_prop Minimum proportion display (default: 0.05). Ignored selected_isoforms provided smooth Apply smoothing lines (default: TRUE) colour_palette Colour palette use (default: viridis plasma)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot isoform usage transitions across cell types — plot_isoform_transitions","text":"ggplot object can printed saved","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_isoform_transitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot isoform usage transitions across cell types — plot_isoform_transitions","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have a Single-Cell Hierarchical Tensor object # Create isoform transition plot for a gene along a developmental trajectory cell_types <- c(\"Progenitor\", \"Intermediate\", \"Mature\") plot_isoform_transitions(scht_obj, \"GENE1\", cell_type_order = cell_types)  # Plot only specific isoforms plot_isoform_transitions(scht_obj, \"GENE1\",                          cell_type_order = cell_types,                         selected_isoforms = c(\"ENSMUST00000001\", \"ENSMUST00000002\")) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_single_gene_radar_cell_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Create radar chart for a single gene across cell types with enhanced visualization — plot_single_gene_radar_cell_type","title":"Create radar chart for a single gene across cell types with enhanced visualization — plot_single_gene_radar_cell_type","text":"enhanced version original plot_cell_type_complexity_radar function better visual elements higher resolution output. function helps visualise complexity metrics vary across different cell types single gene.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_single_gene_radar_cell_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create radar chart for a single gene across cell types with enhanced visualization — plot_single_gene_radar_cell_type","text":"","code":"plot_single_gene_radar_cell_type(   tc_results,   gene_name,   metrics = NULL,   scale_values = TRUE )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_single_gene_radar_cell_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create radar chart for a single gene across cell types with enhanced visualization — plot_single_gene_radar_cell_type","text":"tc_results Transcriptomic complexity results object gene_name Gene name analyse metrics Vector metric names include radar chart scale_values Whether scale values 0-1 better comparability","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_single_gene_radar_cell_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create radar chart for a single gene across cell types with enhanced visualization — plot_single_gene_radar_cell_type","text":"ggplot object can printed saved","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_single_gene_radar_cell_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create radar chart for a single gene across cell types with enhanced visualization — plot_single_gene_radar_cell_type","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have calculated transcriptomic complexity tc_results <- calculate_isoform_complexity_metrics(scht_obj)  # Create radar plot for a single gene across cell types plot_single_gene_radar_cell_type(tc_results, \"GENE1\") } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_tc_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcriptomic complexity density plot — plot_tc_density","title":"Transcriptomic complexity density plot — plot_tc_density","text":"Creates density visualisation transcriptomic complexity landscape showing gene distribution patterns. plot provides smoother representation gene concentration across complexity landscape, highlighting hotspots.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_tc_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transcriptomic complexity density plot — plot_tc_density","text":"","code":"plot_tc_density(   tc_results,   x_metric = \"inter_cellular_isoform_diversity\",   y_metric = \"inter_cell_type_specificity\",   use_thresholds = TRUE,   x_threshold = 0.6,   y_threshold = 0.6 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_tc_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transcriptomic complexity density plot — plot_tc_density","text":"tc_results Transcriptomic complexity results object metrics data frame x_metric Name metric x-axis (default: \"inter_cellular_isoform_diversity\") y_metric Name metric y-axis (default: \"inter_cell_type_specificity\") use_thresholds Whether use thresholds tc_results x_threshold Manual threshold value x-axis y_threshold Manual threshold value y-axis","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_tc_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transcriptomic complexity density plot — plot_tc_density","text":"ggplot object density visualisation can printed saved","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_tc_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transcriptomic complexity density plot — plot_tc_density","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have calculated transcriptomic complexity tc_results <- calculate_isoform_complexity_metrics(scht_obj)  # Create density plot with default metrics plot_tc_density(tc_results)  # Use different metrics plot_tc_density(tc_results,                  x_metric = \"intra_cellular_isoform_diversity\",                  y_metric = \"inter_cellular_isoform_diversity\") } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_tc_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcriptomic complexity landscape plot with marginal distributions — plot_tc_landscape","title":"Transcriptomic complexity landscape plot with marginal distributions — plot_tc_landscape","text":"Creates visualisation transcriptomic complexity landscape quadrants marginal distributions. plot reveals distribution genes across different complexity dimensions helps identify genes interesting patterns.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_tc_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transcriptomic complexity landscape plot with marginal distributions — plot_tc_landscape","text":"","code":"plot_tc_landscape(   tc_results,   x_metric = \"inter_cellular_isoform_diversity\",   y_metric = \"inter_cell_type_specificity\",   highlight_genes = NULL,   label_annotation = \"intra_cell_type_heterogeneity\",   n_label = 10,   label_direction = \"top\",   use_thresholds = TRUE,   x_threshold = 0.6,   y_threshold = 0.6,   point_transparency = 0.85 )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_tc_landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transcriptomic complexity landscape plot with marginal distributions — plot_tc_landscape","text":"tc_results Transcriptomic complexity results object metrics data frame x_metric Name metric x-axis (default: \"inter_cellular_isoform_diversity\") y_metric Name metric y-axis (default: \"inter_cell_type_specificity\") highlight_genes Optional vector gene names highlight label_annotation Column name use highlighting/labelling genes n_label Number genes label highlight_genes provided label_direction Direction selecting genes: \"top\" (highest values) \"bottom\" (lowest values) use_thresholds Whether use thresholds tc_results x_threshold Manual threshold value x-axis y_threshold Manual threshold value y-axis point_transparency Alpha value points (0-1)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_tc_landscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transcriptomic complexity landscape plot with marginal distributions — plot_tc_landscape","text":"ggplot object marginal distributions can printed saved","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_tc_landscape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transcriptomic complexity landscape plot with marginal distributions — plot_tc_landscape","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have calculated transcriptomic complexity tc_results <- calculate_isoform_complexity_metrics(scht_obj)  # Create landscape plot with default metrics plot_tc_landscape(tc_results)  # Use different metrics and highlight specific genes plot_tc_landscape(tc_results,                   x_metric = \"intra_cellular_isoform_diversity\",                   y_metric = \"inter_cellular_isoform_diversity\",                  highlight_genes = c(\"GENE1\", \"GENE2\", \"GENE3\"))                   # Highlight bottom 10 genes by heterogeneity plot_tc_landscape(tc_results,                  n_label = 10,                  label_direction = \"bottom\") } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_threshold_visualisations.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multiple threshold visualisations in a grid layout — plot_threshold_visualisations","title":"Plot multiple threshold visualisations in a grid layout — plot_threshold_visualisations","text":"function arranges multiple threshold fitting visualisations grid layout, useful comparing distributions threshold choices across different complexity metrics.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_threshold_visualisations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multiple threshold visualisations in a grid layout — plot_threshold_visualisations","text":"","code":"plot_threshold_visualisations(   threshold_plots,   ncol = 3,   title = \"Threshold Fitting Visualisations\" )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_threshold_visualisations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multiple threshold visualisations in a grid layout — plot_threshold_visualisations","text":"threshold_plots List ggplot2 objects showing threshold visualisations ncol Number columns grid layout title Overall title grid","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_threshold_visualisations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot multiple threshold visualisations in a grid layout — plot_threshold_visualisations","text":"grid arrangement threshold visualisation plots can printed saved","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/plot_threshold_visualisations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot multiple threshold visualisations in a grid layout — plot_threshold_visualisations","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming you have calculated transcriptomic complexity tc_results <- calculate_isoform_complexity_metrics(scht_obj)  # Plot all threshold visualisations in a 2-column grid plot_threshold_visualisations(tc_results$threshold_plots, ncol = 2) } # }"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.CellTypeSCHT.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for CellTypeSCHT objects — print.CellTypeSCHT","title":"Print method for CellTypeSCHT objects — print.CellTypeSCHT","text":"Displays concise summary cell type-specific SCHT analysis.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.CellTypeSCHT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for CellTypeSCHT objects — print.CellTypeSCHT","text":"","code":"# S3 method for class 'CellTypeSCHT' print(x, ...)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.CellTypeSCHT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for CellTypeSCHT objects — print.CellTypeSCHT","text":"x CellTypeSCHT object print ... Additional arguments (used)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.CellTypeSCHT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for CellTypeSCHT objects — print.CellTypeSCHT","text":"None (prints console)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.IntegratedSCHT.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for IntegratedSCHT objects — print.IntegratedSCHT","title":"Print method for IntegratedSCHT objects — print.IntegratedSCHT","text":"Displays summary integrated SCHT object, including original cell type-specific information.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.IntegratedSCHT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for IntegratedSCHT objects — print.IntegratedSCHT","text":"","code":"# S3 method for class 'IntegratedSCHT' print(x, ...)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.IntegratedSCHT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for IntegratedSCHT objects — print.IntegratedSCHT","text":"x IntegratedSCHT object print ... Additional arguments (used)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.IntegratedSCHT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for IntegratedSCHT objects — print.IntegratedSCHT","text":"None (prints console)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.SCHT.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for SCHT objects — print.SCHT","title":"Print method for SCHT objects — print.SCHT","text":"Provides concise summary SCHT object, displaying key statistics genes, cells, transcripts.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.SCHT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for SCHT objects — print.SCHT","text":"","code":"# S3 method for class 'SCHT' print(x, ...)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.SCHT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for SCHT objects — print.SCHT","text":"x SCHT object print ... Additional arguments (used)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.SCHT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for SCHT objects — print.SCHT","text":"None (prints console)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.transcriptomic_complexity.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for transcriptomic_complexity objects — print.transcriptomic_complexity","title":"Print method for transcriptomic_complexity objects — print.transcriptomic_complexity","text":"Print method transcriptomic_complexity objects","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.transcriptomic_complexity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for transcriptomic_complexity objects — print.transcriptomic_complexity","text":"","code":"# S3 method for class 'transcriptomic_complexity' print(x, ...)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.transcriptomic_complexity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for transcriptomic_complexity objects — print.transcriptomic_complexity","text":"x transcriptomic_complexity object ... Additional arguments (used)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/print.transcriptomic_complexity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for transcriptomic_complexity objects — print.transcriptomic_complexity","text":"Invisibly returns x","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/recommend_qc_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate QC parameter recommendations — recommend_qc_parameters","title":"Generate QC parameter recommendations — recommend_qc_parameters","text":"Analyses gene count distribution provides detailed recommendations quality control parameter settings using different stringency levels. Supports dense sparse matrices efficient processing large-scale single-cell datasets.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/recommend_qc_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate QC parameter recommendations — recommend_qc_parameters","text":"","code":"recommend_qc_parameters(gene_counts)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/recommend_qc_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate QC parameter recommendations — recommend_qc_parameters","text":"gene_counts matrix gene counts. Supports standard sparse matrices Matrix package.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/recommend_qc_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate QC parameter recommendations — recommend_qc_parameters","text":"list containing QC recommendations: MAD_strategy: Conservative parameter settings based median absolute deviation Interval_90: Moderate parameter settings using 5th 95th percentiles Interval_80: Aggressive parameter settings using 10th 90th percentiles explanation: Descriptions approach","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/sample2stage.html","id":null,"dir":"Reference","previous_headings":"","what":"Blood dataset cell metadata — sample2stage","title":"Blood dataset cell metadata — sample2stage","text":"Cell metadata including cell type annotations blood dataset.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/sample2stage.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Blood dataset cell metadata — sample2stage","text":"data frame columns: sample Sample identifier cell_type Cell type annotation","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/sample2stage.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Blood dataset cell metadata — sample2stage","text":"Wang et al. (2022). Science Advances 8(1):eabg5369. Data https://zenodo.org/records/5706781. Licensed CC 4.0.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/sample2stage.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Blood dataset cell metadata — sample2stage","text":"Wang F, et al. (2022). Single-cell architecture functional requirement alternative splicing hematopoietic stem cell formation. Science Advances 8(1):eabg5369.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/select_genes_of_interest.html","id":null,"dir":"Reference","previous_headings":"","what":"Select genes for further investigation based on complexity classification — select_genes_of_interest","title":"Select genes for further investigation based on complexity classification — select_genes_of_interest","text":"Select genes investigation based complexity classification","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/select_genes_of_interest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select genes for further investigation based on complexity classification — select_genes_of_interest","text":"","code":"select_genes_of_interest(   metrics_df,   category,   column = NULL,   top_n = 20,   sort_by = NULL )"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/select_genes_of_interest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select genes for further investigation based on complexity classification — select_genes_of_interest","text":"metrics_df Data frame containing complexity metrics category Classification interest (e.g., \"Strong Isoform Co-expression\", \"Cell Type-Specific\") column Classification column filter top_n Number top genes select (relevance) sort_by Column sort (default depends classification)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/select_genes_of_interest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select genes for further investigation based on complexity classification — select_genes_of_interest","text":"Vector selected gene names","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.CellTypeSCHTSCHT.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for CellTypeSCHT objects — summary.CellTypeSCHTSCHT","title":"Summary method for CellTypeSCHT objects — summary.CellTypeSCHTSCHT","text":"Generates detailed summary cell type-specific SCHT analysis.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.CellTypeSCHTSCHT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for CellTypeSCHT objects — summary.CellTypeSCHTSCHT","text":"","code":"# S3 method for class 'CellTypeSCHTSCHT' summary(object, ...)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.CellTypeSCHTSCHT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for CellTypeSCHT objects — summary.CellTypeSCHTSCHT","text":"object CellTypeSCHT object summarise ... Additional arguments (used)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.CellTypeSCHTSCHT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for CellTypeSCHT objects — summary.CellTypeSCHTSCHT","text":"None (prints console)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.IntegratedSCHT.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for IntegratedSCHT objects — summary.IntegratedSCHT","title":"Summary method for IntegratedSCHT objects — summary.IntegratedSCHT","text":"Provides comprehensive summary integrated SCHT object, including original SCHT summary cell type-specific analysis results.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.IntegratedSCHT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for IntegratedSCHT objects — summary.IntegratedSCHT","text":"","code":"# S3 method for class 'IntegratedSCHT' summary(object, ...)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.IntegratedSCHT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for IntegratedSCHT objects — summary.IntegratedSCHT","text":"object IntegratedSCHT object summarise ... Additional arguments (used)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.IntegratedSCHT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for IntegratedSCHT objects — summary.IntegratedSCHT","text":"None (prints console)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.SCHT.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for SCHT objects — summary.SCHT","title":"Summary method for SCHT objects — summary.SCHT","text":"Generates detailed summary SCHT object, including preprocessing information data characteristics.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.SCHT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for SCHT objects — summary.SCHT","text":"","code":"# S3 method for class 'SCHT' summary(object, ...)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.SCHT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for SCHT objects — summary.SCHT","text":"object SCHT object summarise ... Additional arguments (used)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.SCHT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for SCHT objects — summary.SCHT","text":"None (prints console)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.transcriptomic_complexity.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for transcriptomic_complexity objects — summary.transcriptomic_complexity","title":"Summary method for transcriptomic_complexity objects — summary.transcriptomic_complexity","text":"Summary method transcriptomic_complexity objects","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.transcriptomic_complexity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for transcriptomic_complexity objects — summary.transcriptomic_complexity","text":"","code":"# S3 method for class 'transcriptomic_complexity' summary(object, ...)"},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.transcriptomic_complexity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for transcriptomic_complexity objects — summary.transcriptomic_complexity","text":"object transcriptomic_complexity object ... Additional arguments (used)","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/summary.transcriptomic_complexity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary method for transcriptomic_complexity objects — summary.transcriptomic_complexity","text":"list summary statistics","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/transcript_counts_blood.html","id":null,"dir":"Reference","previous_headings":"","what":"Blood dataset transcript expression counts — transcript_counts_blood","title":"Blood dataset transcript expression counts — transcript_counts_blood","text":"Transcript-level expression count matrix blood single-cell RNA-seq data. data derived Wang et al. (2022) study alternative splicing hematopoietic stem cell formation.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/transcript_counts_blood.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Blood dataset transcript expression counts — transcript_counts_blood","text":"data frame","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/transcript_counts_blood.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Blood dataset transcript expression counts — transcript_counts_blood","text":"Wang et al. (2022). Science Advances 8(1):eabg5369. Data https://zenodo.org/records/5706781. Licensed CC 4.0.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/transcript_counts_blood.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Blood dataset transcript expression counts — transcript_counts_blood","text":"Wang F, et al. (2022). Single-cell architecture functional requirement alternative splicing hematopoietic stem cell formation. Science Advances 8(1):eabg5369.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/transcript_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Transcript information — transcript_info","title":"Transcript information — transcript_info","text":"Transcript gene annotation information mouse genome. data processed using create_transcript_info() function ScIsoX package.","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/transcript_info.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Transcript information — transcript_info","text":"data frame columns: transcript_id Transcript identifier transcript_name Transcript name gene_id Gene identifier gene_name Gene symbol transcript_type Transcript biotype gene_type Gene biotype","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/reference/transcript_info.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Transcript information — transcript_info","text":"GENCODE Mouse Release M36 https://www.gencodegenes.org/mouse/release_M36.html. Processed using create_transcript_info() function ScIsoX package.","code":""},{"path":[]},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/news/index.html","id":"major-improvements-1-1-1","dir":"Changelog","previous_headings":"","what":"Major Improvements","title":"ScIsoX 1.1.1 (2025-08-01)","text":"Runnable Examples: Replaced \\dontrun{} blocks fully executable examples using built-datasets gene_counts_blood: Gene expression matrix transcript_counts_blood: Transcript expression matrix transcript_info: Transcript--gene mapping sample2stage: Cell type annotations Getting Started ScIsoX Data Import Quality Control Understanding Transcriptomic Complexity Metrics Visualisation Gallery Interpretation Co-expression Analysis Isoform Switching pkgdown Website: Built comprehensive documentation website improved design navigation","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/news/index.html","id":"bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"ScIsoX 1.1.1 (2025-08-01)","text":"Fixed plot_isoform_profile() error multi-isoform genes exist IntegratedSCHT Fixed duplicate plot_isoform_coexpression() function definition Fixed plot_complexity_radar() parameter name mismatch (gene_colors vs gene_colours) Fixed incorrect classification names complexity metrics (e.g., “high”/“low” → proper category names) Fixed NAMESPACE typo: CellTypeSCHTSCHT → CellTypeSCHT Replaced deprecated class() usage inherits() S3 class checking Fixed vignette errors incorrect function parameters","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/news/index.html","id":"documentation-1-1-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"ScIsoX 1.1.1 (2025-08-01)","text":"Added comprehensive Input Data Recommendations section README Added Visualisation Gallery showcasing plot types Added 5-Minute Quick Start guide functions now runnable examples Improved function documentation clearer parameter descriptions Added proper attribution example data throughout documentation","code":""},{"path":[]},{"path":"https://ThaddeusWu.github.io/ScIsoX/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"ScIsoX 1.1.0 (2025-07-29)","text":"Fixed issue create_scht() function fail gene count matrix used gene names instead gene IDs (#2). function now automatically detects whether gene IDs gene names used handles cases appropriately. Fixed issue plot_compare_multiple_genes_radar_cell_type() function fail encountering NA values (#1). function now removes genes/cell types NA values provides appropriate warnings. Fixed complexity metrics showing 100% NA cell type-related metrics due field name mismatch cell_type_specific cell_type_matrices Fixed conservation analysis Mixed pattern detection logic check Mixed patterns Conserved patterns Fixed sparsity analysis correctly count isoforms filtered matrix using mixed gene names/IDs SCHT Resolved gene name conflicts SCHT using gene IDs conflicted names preserving gene names unique entries","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/news/index.html","id":"enhancements-1-1-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"ScIsoX 1.1.0 (2025-07-29)","text":"Added graceful handling missing suggested packages informative messages Added install_scisox_suggests() function easy installation optional packages Improved package startup messages inform users missing optional dependencies Added British English spelling consistency throughout package Performance tracking: core functions now automatically track report processing time memory utilisation Enhanced S3 methods: summary() methods now display detailed performance metrics data structure efficiency statistics Sparsity reporting: SCHT objects now report original hierarchical structure sparsity, demonstrating memory efficiency gains plot_tc_landscape() now supports highlighting top bottom genes via new n_label label_direction parameters plot_isoform_transitions() now includes selected_isoforms parameter plot specific isoforms interest","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"ScIsoX 1.1.0 (2025-07-29)","text":"Added simple_benchmark.R script inst/scripts/ performance evaluation Added generate_qc_report.R script inst/scripts/ quality control reporting Added sparsity_analysis.R script inst/scripts/ tensor efficiency analysis Customisable dataset names output files Accurate gene counting SCHT structure Integrated HTML styling within function calculate_scht_sparsity(): Calculates sparsity statistics SCHT structures calculate_ct_scht_sparsity(): Cell type-specific sparsity analysis analyse_sparsity_for_table(): Comprehensive comparison across data representations Demonstrates memory efficiency SCHT vs naive tensor approaches calculate_isoform_coexpression(): Core correlation calculation single genes calculate_gene_coexpression_all_celltypes(): Multi-cell type correlation analysis analyse_coexpression_conservation(): Identifies conserved vs cell-type-specific patterns bootstrap FDR detect_isoform_switching(): Identifies antagonistic isoform relationships plot_isoform_coexpression(): Creates correlation heatmaps using ComplexHeatmap plot_coexpression_across_celltypes(): Line plots showing correlation dynamics across cell types calculate_celltype_coexpression_similarity(): Cell type similarity based co-expression plot_conservation_summary(): Bar charts conservation pattern distributions export_coexpression_results(): Export functionality results Overall cell type-specific co-expression heatmaps Isoform switching detection negative correlations Conservation analysis mixed pattern detection Statistical analysis: confidence intervals, bootstrap stability (100 iterations), FDR correction Interactive plotly visualisations detailed hover information Comprehensive export functionality analysis results","code":""},{"path":"https://ThaddeusWu.github.io/ScIsoX/news/index.html","id":"internal-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"Internal Changes","title":"ScIsoX 1.1.0 (2025-07-29)","text":"Created package_utils.R helper functions package management Created zzz.R package startup hooks Added fallback colour palettes RColorBrewer available Moved viridis RColorBrewer Suggests Imports core visualisation functionality Renamed internal performance tracking “peak memory” “memory utilised” clarity Added performance attributes SCHT transcriptomic_complexity objects Added validation scripts inst/scripts/ robustness testing Standardised code formatting documentation","code":""}]
