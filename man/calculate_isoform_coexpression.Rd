% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coexpression_analysis.R
\name{calculate_isoform_coexpression}
\alias{calculate_isoform_coexpression}
\title{Calculate isoform co-expression correlation matrix}
\usage{
calculate_isoform_coexpression(
  scht_obj,
  gene,
  method = "pearson",
  min_cells = 10,
  min_expression = 0
)
}
\arguments{
\item{scht_obj}{SCHT or IntegratedSCHT object}

\item{gene}{Gene name to analyse}

\item{method}{Correlation method: "pearson", "spearman", or "kendall"}

\item{min_cells}{Minimum number of cells required for analysis}

\item{min_expression}{Minimum mean expression threshold}
}
\value{
A list containing:
\itemize{
\item cor_matrix: Correlation matrix between isoforms
\item n_isoforms: Number of isoforms
\item n_cells: Number of cells
\item method: Correlation method used
}
}
\description{
Calculates correlation matrix between isoforms of a gene using
the specified correlation method.
}
\examples{
# Load example data and create SCHT
data(gene_counts_blood)
data(transcript_counts_blood)
data(transcript_info)
data(sample2stage)

scht_obj <- create_scht(
  gene_counts = gene_counts_blood,
  transcript_counts = transcript_counts_blood,
  transcript_info = transcript_info,
  cell_info = sample2stage,
  qc_params = list(
    min_genes_per_cell = 4000,       
    max_genes_per_cell = 10000,      
    min_cells_expressing = 0.02,   
    min_expr = 1e-6
  ),
  n_hvg = 3000,
  verbose = FALSE
)

# Example 1: Find genes with multiple isoforms in the filtered data
# Get the actual gene list from the SCHT object
if (inherits(scht_obj, "IntegratedSCHT")) {
  gene_list <- names(scht_obj$original_results)
} else {
  gene_list <- names(scht_obj)
}

# Find genes with multiple isoforms
multi_iso_genes <- character()
for (g in gene_list[1:min(50, length(gene_list))]) {
  if (inherits(scht_obj, "IntegratedSCHT")) {
    n_iso <- nrow(scht_obj$original_results[[g]])
  } else {
    n_iso <- nrow(scht_obj[[g]])
  }
  if (n_iso > 2) multi_iso_genes <- c(multi_iso_genes, g)
}

# Analyze the first multi-isoform gene found
if (length(multi_iso_genes) > 0) {
  cor_result <- calculate_isoform_coexpression(scht_obj, multi_iso_genes[1])
  cat("Gene:", multi_iso_genes[1], "\n")
  cat("Number of isoforms:", cor_result$n_isoforms, "\n")
  print(cor_result$cor_matrix)
  
  # Check switching patterns
  switching <- detect_isoform_switching(cor_result)
  if (switching$n_switching_pairs > 0) {
    cat("Switching pairs found:", switching$n_switching_pairs, "\n")
  }
}
}
