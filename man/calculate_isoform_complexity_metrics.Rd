% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/complexity_metrics.R
\name{calculate_isoform_complexity_metrics}
\alias{calculate_isoform_complexity_metrics}
\title{Calculate all complexity metrics for all genes in SCHT object}
\usage{
calculate_isoform_complexity_metrics(
  scht_obj,
  default_thresholds = list(intra_cellular_isoform_diversity = 0.6,
    inter_cellular_isoform_diversity = 0.6, intra_cell_type_heterogeneity = 0.4,
    inter_cell_type_specificity = 0.6, intra_cell_type_heterogeneity_variability = 0.5,
    inter_cell_type_difference_variability = 0.3, cell_type_coexpression_variability =
    0.4),
  data_driven_thresholds = TRUE,
  visualise = TRUE,
  batch_size = 500,
  min_samples = 20,
  verbose = TRUE
)
}
\arguments{
\item{scht_obj}{Single-Cell Hierarchical Tensor object}

\item{default_thresholds}{List of default thresholds for each metric (optional)}

\item{data_driven_thresholds}{Whether to use data-driven threshold detection (default: TRUE)}

\item{visualise}{Whether to create visualisations of threshold determination (default: TRUE)}

\item{batch_size}{Number of genes to process at once (default: 500)}

\item{min_samples}{Minimum number of samples required for reliable threshold modelling}

\item{verbose}{Whether to print detailed progress messages}
}
\value{
A transcriptomic_complexity object (list) containing:
\itemize{
\item metrics: Data frame with complexity metrics and classifications for each gene
\item single_cell_type_genes: List of genes expressed only in specific cell types
\item thresholds: The thresholds used for classification
\item threshold_plots: Visualisations of threshold fitting for each metric
\item na_statistics: Statistics about NA value proportions for each metric
}
With performance attribute containing:
\itemize{
\item \code{total_time_sec}: Total processing time in seconds
\item \code{memory_used_mb}: Memory utilised in megabytes
}
}
\description{
This function calculates a comprehensive set of metrics to quantify
transcriptomic complexity at multiple levels: within cells, across cells,
within cell types, and across cell types. It analyses isoform diversity,
cell type specificity, and expression patterns to provide a multidimensional
characterisation of transcriptomic complexity.
}
\details{
The function calculates seven core complexity metrics:
\enumerate{
\item Intra-cellular Isoform Diversity: Measures the tendency for cells to co-express multiple
isoforms of a gene
\item Inter-cellular Isoform Diversity: Measures the overall diversity of isoforms used
across the entire cell population
\item Intra-cell type Heterogeneity: Measures the cell-to-cell variation in isoform
usage within each cell type
\item Inter-cell type Specificity: Measures how differently a gene uses its isoforms
across different cell types
\item Intra-cell type Heterogeneity Variability: Measures whether certain cell types show
particularly high cellular heterogeneity
\item Inter-cell type Difference Variability: Measures whether certain cell type pairs
show particularly significant differences in isoform usage patterns
\item Cell-type-specific Co-expression Variability: Measures whether a gene employs different
isoform co-expression patterns in different cell types
}

For each metric, a classification column is created to categorise genes based on
statistically determined thresholds. This provides a comprehensive complexity
profile for each gene across multiple dimensions.

Some metrics may contain NA values, which have specific biological meanings:
\itemize{
\item Inter-cell type metrics are NA for genes expressed in only one cell type
\item Heterogeneity metrics are NA for genes with insufficient cells per cell type
\item Diversity metrics are NA for genes with only a single expressed isoform
These NA values are properly handled during threshold determination and classification.
}
}
\examples{
# Load example data
data(gene_counts_blood)
data(transcript_counts_blood)
data(transcript_info)
data(sample2stage)

# Create SCHT object first
scht_obj <- create_scht(
  gene_counts = gene_counts_blood,
  transcript_counts = transcript_counts_blood,
  transcript_info = transcript_info,
  cell_info = sample2stage,
  n_hvg = 3000,
  qc_params = list(
    min_genes_per_cell = 4000,       
    max_genes_per_cell = 10000,      
    min_cells_expressing = 0.02,   
    min_expr = 1e-6
  ),
  verbose = FALSE
)

# Example 1: Calculate complexity metrics with default settings
tc_results <- calculate_isoform_complexity_metrics(
  scht_obj,
  verbose = TRUE
)

# Examine the results
print(names(tc_results))
print(head(tc_results$metrics))

# Check classification distribution
print(table(tc_results$metrics$intra_cellular_isoform_diversity_class))

# Example 2: Use custom thresholds
custom_thresholds <- list(
  intra_cellular_isoform_diversity = 0.7,
  inter_cellular_isoform_diversity = 0.7,
  intra_cell_type_heterogeneity = 0.5,
  inter_cell_type_specificity = 0.5,
  intra_cell_type_heterogeneity_variability = 0.8,
  inter_cell_type_difference_variability = 0.6,
  cell_type_coexpression_variability = 1.0
)

\donttest{
tc_custom <- calculate_isoform_complexity_metrics(
  scht_obj,
  default_thresholds = custom_thresholds,
  data_driven_thresholds = FALSE,  # Use only custom thresholds
  verbose = FALSE
)
}

# Example 3: Process in smaller batches for memory efficiency
\donttest{
tc_batched <- calculate_isoform_complexity_metrics(
  scht_obj,
  batch_size = 100,  # Process 100 genes at a time
  verbose = TRUE
)
}

# Example 4: Access specific metrics for genes of interest
genes_of_interest <- head(rownames(tc_results$metrics), 10)
gene_metrics <- tc_results$metrics[
  tc_results$metrics$gene \%in\% genes_of_interest,
]
print(gene_metrics[, c("gene", "intra_cellular_isoform_diversity", 
                       "inter_cellular_isoform_diversity")])

# Example 5: Identify highly complex genes
complex_genes <- tc_results$metrics[
  tc_results$metrics$intra_cellular_isoform_diversity_class == "high" &
  tc_results$metrics$inter_cellular_isoform_diversity_class == "high" &
  !is.na(tc_results$metrics$intra_cellular_isoform_diversity),
]
print(paste("Number of highly complex genes:", nrow(complex_genes)))

}
